(()=>{var __webpack_modules__={563:function(module,exports,__webpack_require__){eval('/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n/*!\n * jQuery JavaScript Library v3.7.0\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-05-11T18:29Z\n */\n(function (global, factory) {\n  "use strict";\n\n  if (( false ? 0 : _typeof(module)) === "object" && _typeof(module.exports) === "object") {\n    // For CommonJS and CommonJS-like environments where a proper `window`\n    // is present, execute the factory and get jQuery.\n    // For environments that do not have a `window` with a `document`\n    // (such as Node.js), expose a factory as module.exports.\n    // This accentuates the need for the creation of a real `window`.\n    // e.g. var jQuery = require("jquery")(window);\n    // See ticket trac-14549 for more info.\n    module.exports = global.document ? factory(global, true) : function (w) {\n      if (!w.document) {\n        throw new Error("jQuery requires a window with a document");\n      }\n      return factory(w);\n    };\n  } else {\n    factory(global);\n  }\n\n  // Pass this if window is not defined yet\n})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {\n  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n  // enough that all such attempts are guarded in a try block.\n  "use strict";\n\n  var arr = [];\n  var getProto = Object.getPrototypeOf;\n  var _slice = arr.slice;\n  var flat = arr.flat ? function (array) {\n    return arr.flat.call(array);\n  } : function (array) {\n    return arr.concat.apply([], array);\n  };\n  var push = arr.push;\n  var indexOf = arr.indexOf;\n  var class2type = {};\n  var toString = class2type.toString;\n  var hasOwn = class2type.hasOwnProperty;\n  var fnToString = hasOwn.toString;\n  var ObjectFunctionString = fnToString.call(Object);\n  var support = {};\n  var isFunction = function isFunction(obj) {\n    // Support: Chrome <=57, Firefox <=52\n    // In some browsers, typeof returns "function" for HTML <object> elements\n    // (i.e., `typeof document.createElement( "object" ) === "function"`).\n    // We don\'t want to classify *any* DOM node as a function.\n    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n    // Plus for old WebKit, typeof returns "function" for HTML collections\n    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)\n    return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";\n  };\n  var isWindow = function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  };\n  var document = window.document;\n  var preservedScriptAttributes = {\n    type: true,\n    src: true,\n    nonce: true,\n    noModule: true\n  };\n  function DOMEval(code, node, doc) {\n    doc = doc || document;\n    var i,\n      val,\n      script = doc.createElement("script");\n    script.text = code;\n    if (node) {\n      for (i in preservedScriptAttributes) {\n        // Support: Firefox 64+, Edge 18+\n        // Some browsers don\'t support the "nonce" property on scripts.\n        // On the other hand, just using `getAttribute` is not enough as\n        // the `nonce` attribute is reset to an empty string whenever it\n        // becomes browsing-context connected.\n        // See https://github.com/whatwg/html/issues/2369\n        // See https://html.spec.whatwg.org/#nonce-attributes\n        // The `node.getAttribute` check was added for the sake of\n        // `jQuery.globalEval` so that it can fake a nonce-containing node\n        // via an object.\n        val = node[i] || node.getAttribute && node.getAttribute(i);\n        if (val) {\n          script.setAttribute(i, val);\n        }\n      }\n    }\n    doc.head.appendChild(script).parentNode.removeChild(script);\n  }\n  function toType(obj) {\n    if (obj == null) {\n      return obj + "";\n    }\n\n    // Support: Android <=2.3 only (functionish RegExp)\n    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);\n  }\n  /* global Symbol */\n  // Defining this global in .eslintrc.json would create a danger of using the global\n  // unguarded in another place, it seems safer to define global only for this module\n\n  var version = "3.7.0",\n    rhtmlSuffix = /HTML$/i,\n    // Define a local copy of jQuery\n    jQuery = function jQuery(selector, context) {\n      // The jQuery object is actually just the init constructor \'enhanced\'\n      // Need init if jQuery is called (just allow error to be thrown if not included)\n      return new jQuery.fn.init(selector, context);\n    };\n  jQuery.fn = jQuery.prototype = {\n    // The current version of jQuery being used\n    jquery: version,\n    constructor: jQuery,\n    // The default length of a jQuery object is 0\n    length: 0,\n    toArray: function toArray() {\n      return _slice.call(this);\n    },\n    // Get the Nth element in the matched element set OR\n    // Get the whole matched element set as a clean array\n    get: function get(num) {\n      // Return all the elements in a clean array\n      if (num == null) {\n        return _slice.call(this);\n      }\n\n      // Return just the one element from the set\n      return num < 0 ? this[num + this.length] : this[num];\n    },\n    // Take an array of elements and push it onto the stack\n    // (returning the new matched element set)\n    pushStack: function pushStack(elems) {\n      // Build a new jQuery matched element set\n      var ret = jQuery.merge(this.constructor(), elems);\n\n      // Add the old object onto the stack (as a reference)\n      ret.prevObject = this;\n\n      // Return the newly-formed element set\n      return ret;\n    },\n    // Execute a callback for every element in the matched set.\n    each: function each(callback) {\n      return jQuery.each(this, callback);\n    },\n    map: function map(callback) {\n      return this.pushStack(jQuery.map(this, function (elem, i) {\n        return callback.call(elem, i, elem);\n      }));\n    },\n    slice: function slice() {\n      return this.pushStack(_slice.apply(this, arguments));\n    },\n    first: function first() {\n      return this.eq(0);\n    },\n    last: function last() {\n      return this.eq(-1);\n    },\n    even: function even() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return (i + 1) % 2;\n      }));\n    },\n    odd: function odd() {\n      return this.pushStack(jQuery.grep(this, function (_elem, i) {\n        return i % 2;\n      }));\n    },\n    eq: function eq(i) {\n      var len = this.length,\n        j = +i + (i < 0 ? len : 0);\n      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    },\n    end: function end() {\n      return this.prevObject || this.constructor();\n    },\n    // For internal use only.\n    // Behaves like an Array\'s method, not like a jQuery method.\n    push: push,\n    sort: arr.sort,\n    splice: arr.splice\n  };\n  jQuery.extend = jQuery.fn.extend = function () {\n    var options,\n      name,\n      src,\n      copy,\n      copyIsArray,\n      clone,\n      target = arguments[0] || {},\n      i = 1,\n      length = arguments.length,\n      deep = false;\n\n    // Handle a deep copy situation\n    if (typeof target === "boolean") {\n      deep = target;\n\n      // Skip the boolean and the target\n      target = arguments[i] || {};\n      i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if (_typeof(target) !== "object" && !isFunction(target)) {\n      target = {};\n    }\n\n    // Extend jQuery itself if only one argument is passed\n    if (i === length) {\n      target = this;\n      i--;\n    }\n    for (; i < length; i++) {\n      // Only deal with non-null/undefined values\n      if ((options = arguments[i]) != null) {\n        // Extend the base object\n        for (name in options) {\n          copy = options[name];\n\n          // Prevent Object.prototype pollution\n          // Prevent never-ending loop\n          if (name === "__proto__" || target === copy) {\n            continue;\n          }\n\n          // Recurse if we\'re merging plain objects or arrays\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n            src = target[name];\n\n            // Ensure proper type for the source value\n            if (copyIsArray && !Array.isArray(src)) {\n              clone = [];\n            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {\n              clone = {};\n            } else {\n              clone = src;\n            }\n            copyIsArray = false;\n\n            // Never move original objects, clone them\n            target[name] = jQuery.extend(deep, clone, copy);\n\n            // Don\'t bring in undefined values\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    }\n\n    // Return the modified object\n    return target;\n  };\n  jQuery.extend({\n    // Unique for each copy of jQuery on the page\n    expando: "jQuery" + (version + Math.random()).replace(/\\D/g, ""),\n    // Assume jQuery is ready without the ready module\n    isReady: true,\n    error: function error(msg) {\n      throw new Error(msg);\n    },\n    noop: function noop() {},\n    isPlainObject: function isPlainObject(obj) {\n      var proto, Ctor;\n\n      // Detect obvious negatives\n      // Use toString instead of jQuery.type to catch host objects\n      if (!obj || toString.call(obj) !== "[object Object]") {\n        return false;\n      }\n      proto = getProto(obj);\n\n      // Objects with no prototype (e.g., `Object.create( null )`) are plain\n      if (!proto) {\n        return true;\n      }\n\n      // Objects with prototype are plain iff they were constructed by a global Object function\n      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;\n      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;\n    },\n    isEmptyObject: function isEmptyObject(obj) {\n      var name;\n      for (name in obj) {\n        return false;\n      }\n      return true;\n    },\n    // Evaluates a script in a provided context; falls back to the global one\n    // if not specified.\n    globalEval: function globalEval(code, options, doc) {\n      DOMEval(code, {\n        nonce: options && options.nonce\n      }, doc);\n    },\n    each: function each(obj, callback) {\n      var length,\n        i = 0;\n      if (isArrayLike(obj)) {\n        length = obj.length;\n        for (; i < length; i++) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      } else {\n        for (i in obj) {\n          if (callback.call(obj[i], i, obj[i]) === false) {\n            break;\n          }\n        }\n      }\n      return obj;\n    },\n    // Retrieve the text value of an array of DOM nodes\n    text: function text(elem) {\n      var node,\n        ret = "",\n        i = 0,\n        nodeType = elem.nodeType;\n      if (!nodeType) {\n        // If no nodeType, this is expected to be an array\n        while (node = elem[i++]) {\n          // Do not traverse comment nodes\n          ret += jQuery.text(node);\n        }\n      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n        return elem.textContent;\n      } else if (nodeType === 3 || nodeType === 4) {\n        return elem.nodeValue;\n      }\n\n      // Do not include comment or processing instruction nodes\n\n      return ret;\n    },\n    // results is for internal usage only\n    makeArray: function makeArray(arr, results) {\n      var ret = results || [];\n      if (arr != null) {\n        if (isArrayLike(Object(arr))) {\n          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);\n        } else {\n          push.call(ret, arr);\n        }\n      }\n      return ret;\n    },\n    inArray: function inArray(elem, arr, i) {\n      return arr == null ? -1 : indexOf.call(arr, elem, i);\n    },\n    isXMLDoc: function isXMLDoc(elem) {\n      var namespace = elem && elem.namespaceURI,\n        docElem = elem && (elem.ownerDocument || elem).documentElement;\n\n      // Assume HTML when documentElement doesn\'t yet exist, such as inside\n      // document fragments.\n      return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");\n    },\n    // Support: Android <=4.0 only, PhantomJS 1 only\n    // push.apply(_, arraylike) throws on ancient WebKit\n    merge: function merge(first, second) {\n      var len = +second.length,\n        j = 0,\n        i = first.length;\n      for (; j < len; j++) {\n        first[i++] = second[j];\n      }\n      first.length = i;\n      return first;\n    },\n    grep: function grep(elems, callback, invert) {\n      var callbackInverse,\n        matches = [],\n        i = 0,\n        length = elems.length,\n        callbackExpect = !invert;\n\n      // Go through the array, only saving the items\n      // that pass the validator function\n      for (; i < length; i++) {\n        callbackInverse = !callback(elems[i], i);\n        if (callbackInverse !== callbackExpect) {\n          matches.push(elems[i]);\n        }\n      }\n      return matches;\n    },\n    // arg is for internal usage only\n    map: function map(elems, callback, arg) {\n      var length,\n        value,\n        i = 0,\n        ret = [];\n\n      // Go through the array, translating each of the items to their new values\n      if (isArrayLike(elems)) {\n        length = elems.length;\n        for (; i < length; i++) {\n          value = callback(elems[i], i, arg);\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n\n        // Go through every key on the object,\n      } else {\n        for (i in elems) {\n          value = callback(elems[i], i, arg);\n          if (value != null) {\n            ret.push(value);\n          }\n        }\n      }\n\n      // Flatten any nested arrays\n      return flat(ret);\n    },\n    // A global GUID counter for objects\n    guid: 1,\n    // jQuery.support is not used in Core but other projects attach their\n    // properties to it so it needs to exist.\n    support: support\n  });\n  if (typeof Symbol === "function") {\n    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n  }\n\n  // Populate the class2type map\n  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (_i, name) {\n    class2type["[object " + name + "]"] = name.toLowerCase();\n  });\n  function isArrayLike(obj) {\n    // Support: real iOS 8.2 only (not reproducible in simulator)\n    // `in` check used to prevent JIT error (gh-2145)\n    // hasOwn isn\'t used here due to false negatives\n    // regarding Nodelist length in IE\n    var length = !!obj && "length" in obj && obj.length,\n      type = toType(obj);\n    if (isFunction(obj) || isWindow(obj)) {\n      return false;\n    }\n    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;\n  }\n  function nodeName(elem, name) {\n    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n  }\n  var pop = arr.pop;\n  var sort = arr.sort;\n  var splice = arr.splice;\n  var whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]";\n  var rtrimCSS = new RegExp("^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g");\n\n  // Note: an element does not contain itself\n  jQuery.contains = function (a, b) {\n    var bup = b && b.parentNode;\n    return a === bup || !!(bup && bup.nodeType === 1 && (\n    // Support: IE 9 - 11+\n    // IE doesn\'t have `contains` on SVG.\n    a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n  };\n\n  // CSS string/identifier serialization\n  // https://drafts.csswg.org/cssom/#common-serializing-idioms\n  var rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;\n  function fcssescape(ch, asCodePoint) {\n    if (asCodePoint) {\n      // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n      if (ch === "\\0") {\n        return "\\uFFFD";\n      }\n\n      // Control characters and (dependent upon position) numbers get escaped as code points\n      return ch.slice(0, -1) + "\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";\n    }\n\n    // Other potentially-special ASCII characters get backslash-escaped\n    return "\\\\" + ch;\n  }\n  jQuery.escapeSelector = function (sel) {\n    return (sel + "").replace(rcssescape, fcssescape);\n  };\n  var preferredDoc = document,\n    pushNative = push;\n  (function () {\n    var i,\n      Expr,\n      outermostContext,\n      sortInput,\n      hasDuplicate,\n      push = pushNative,\n      // Local document vars\n      document,\n      documentElement,\n      documentIsHTML,\n      rbuggyQSA,\n      matches,\n      // Instance-specific data\n      expando = jQuery.expando,\n      dirruns = 0,\n      done = 0,\n      classCache = createCache(),\n      tokenCache = createCache(),\n      compilerCache = createCache(),\n      nonnativeSelectorCache = createCache(),\n      sortOrder = function sortOrder(a, b) {\n        if (a === b) {\n          hasDuplicate = true;\n        }\n        return 0;\n      },\n      booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" + "loop|multiple|open|readonly|required|scoped",\n      // Regular expressions\n\n      // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n      identifier = "(?:\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+",\n      // Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors\n      attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +\n      // Operator (capture 2)\n      "*([*^$|!~]?=)" + whitespace +\n      // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"\n      "*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace + "*\\\\]",\n      pseudos = ":(" + identifier + ")(?:\\\\((" +\n      // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n      // 1. quoted (capture 3; capture 4 or capture 5)\n      "(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" +\n      // 2. simple (capture 6)\n      "((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" +\n      // 3. anything else (capture 2)\n      ".*" + ")\\\\)|)",\n      // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n      rwhitespace = new RegExp(whitespace + "+", "g"),\n      rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),\n      rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),\n      rdescend = new RegExp(whitespace + "|>"),\n      rpseudo = new RegExp(pseudos),\n      ridentifier = new RegExp("^" + identifier + "$"),\n      matchExpr = {\n        ID: new RegExp("^#(" + identifier + ")"),\n        CLASS: new RegExp("^\\\\.(" + identifier + ")"),\n        TAG: new RegExp("^(" + identifier + "|[*])"),\n        ATTR: new RegExp("^" + attributes),\n        PSEUDO: new RegExp("^" + pseudos),\n        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace + "*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i"),\n        bool: new RegExp("^(?:" + booleans + ")$", "i"),\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" + whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i")\n      },\n      rinputs = /^(?:input|select|textarea|button)$/i,\n      rheader = /^h\\d$/i,\n      // Easily-parseable/retrievable ID or TAG or CLASS selectors\n      rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n      rsibling = /[+~]/,\n      // CSS escapes\n      // https://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n      runescape = new RegExp("\\\\\\\\[\\\\da-fA-F]{1,6}" + whitespace + "?|\\\\\\\\([^\\\\r\\\\n\\\\f])", "g"),\n      funescape = function funescape(escape, nonHex) {\n        var high = "0x" + escape.slice(1) - 0x10000;\n        if (nonHex) {\n          // Strip the backslash prefix from a non-hex escape sequence\n          return nonHex;\n        }\n\n        // Replace a hexadecimal escape sequence with the encoded Unicode code point\n        // Support: IE <=11+\n        // For values outside the Basic Multilingual Plane (BMP), manually construct a\n        // surrogate pair\n        return high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n      },\n      // Used for iframes; see `setDocument`.\n      // Support: IE 9 - 11+, Edge 12 - 18+\n      // Removing the function wrapper causes a "Permission Denied"\n      // error in IE/Edge.\n      unloadHandler = function unloadHandler() {\n        setDocument();\n      },\n      inDisabledFieldset = addCombinator(function (elem) {\n        return elem.disabled === true && nodeName(elem, "fieldset");\n      }, {\n        dir: "parentNode",\n        next: "legend"\n      });\n\n    // Support: IE <=9 only\n    // Accessing document.activeElement can throw unexpectedly\n    // https://bugs.jquery.com/ticket/13393\n    function safeActiveElement() {\n      try {\n        return document.activeElement;\n      } catch (err) {}\n    }\n\n    // Optimize for push.apply( _, NodeList )\n    try {\n      push.apply(arr = _slice.call(preferredDoc.childNodes), preferredDoc.childNodes);\n\n      // Support: Android <=4.0\n      // Detect silently failing push.apply\n      // eslint-disable-next-line no-unused-expressions\n      arr[preferredDoc.childNodes.length].nodeType;\n    } catch (e) {\n      push = {\n        apply: function apply(target, els) {\n          pushNative.apply(target, _slice.call(els));\n        },\n        call: function call(target) {\n          pushNative.apply(target, _slice.call(arguments, 1));\n        }\n      };\n    }\n    function find(selector, context, results, seed) {\n      var m,\n        i,\n        elem,\n        nid,\n        match,\n        groups,\n        newSelector,\n        newContext = context && context.ownerDocument,\n        // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n      results = results || [];\n\n      // Return early from calls with invalid selector or context\n      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n        return results;\n      }\n\n      // Try to shortcut find operations (as opposed to filters) in HTML documents\n      if (!seed) {\n        setDocument(context);\n        context = context || document;\n        if (documentIsHTML) {\n          // If the selector is sufficiently simple, try using a "get*By*" DOM method\n          // (excepting DocumentFragment context, where the methods don\'t exist)\n          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n            // ID selector\n            if (m = match[1]) {\n              // Document context\n              if (nodeType === 9) {\n                if (elem = context.getElementById(m)) {\n                  // Support: IE 9 only\n                  // getElementById can match elements by name instead of ID\n                  if (elem.id === m) {\n                    push.call(results, elem);\n                    return results;\n                  }\n                } else {\n                  return results;\n                }\n\n                // Element context\n              } else {\n                // Support: IE 9 only\n                // getElementById can match elements by name instead of ID\n                if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {\n                  push.call(results, elem);\n                  return results;\n                }\n              }\n\n              // Type selector\n            } else if (match[2]) {\n              push.apply(results, context.getElementsByTagName(selector));\n              return results;\n\n              // Class selector\n            } else if ((m = match[3]) && context.getElementsByClassName) {\n              push.apply(results, context.getElementsByClassName(m));\n              return results;\n            }\n          }\n\n          // Take advantage of querySelectorAll\n          if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n            newSelector = selector;\n            newContext = context;\n\n            // qSA considers elements outside a scoping root when evaluating child or\n            // descendant combinators, which is not what we want.\n            // In such cases, we work around the behavior by prefixing every selector in the\n            // list with an ID selector referencing the scope context.\n            // The technique has to be used as well when a leading combinator is used\n            // as such selectors are not recognized by querySelectorAll.\n            // Thanks to Andrew Dupont for this technique.\n            if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {\n              // Expand context for sibling selectors\n              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n\n              // We can use :scope instead of the ID hack if the browser\n              // supports it & if we\'re not changing the context.\n              // Support: IE 11+, Edge 17 - 18+\n              // IE/Edge sometimes throw a "Permission denied" error when\n              // strict-comparing two documents; shallow comparisons work.\n              // eslint-disable-next-line eqeqeq\n              if (newContext != context || !support.scope) {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute("id")) {\n                  nid = jQuery.escapeSelector(nid);\n                } else {\n                  context.setAttribute("id", nid = expando);\n                }\n              }\n\n              // Prefix every selector in the list\n              groups = tokenize(selector);\n              i = groups.length;\n              while (i--) {\n                groups[i] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i]);\n              }\n              newSelector = groups.join(",");\n            }\n            try {\n              push.apply(results, newContext.querySelectorAll(newSelector));\n              return results;\n            } catch (qsaError) {\n              nonnativeSelectorCache(selector, true);\n            } finally {\n              if (nid === expando) {\n                context.removeAttribute("id");\n              }\n            }\n          }\n        }\n      }\n\n      // All others\n      return select(selector.replace(rtrimCSS, "$1"), context, results, seed);\n    }\n\n    /**\n     * Create key-value caches of limited size\n     * @returns {function(string, object)} Returns the Object data after storing it on itself with\n     *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n     *\tdeleting the oldest entry\n     */\n    function createCache() {\n      var keys = [];\n      function cache(key, value) {\n        // Use (key + " ") to avoid collision with native prototype properties\n        // (see https://github.com/jquery/sizzle/issues/157)\n        if (keys.push(key + " ") > Expr.cacheLength) {\n          // Only keep the most recent entries\n          delete cache[keys.shift()];\n        }\n        return cache[key + " "] = value;\n      }\n      return cache;\n    }\n\n    /**\n     * Mark a function for special use by jQuery selector module\n     * @param {Function} fn The function to mark\n     */\n    function markFunction(fn) {\n      fn[expando] = true;\n      return fn;\n    }\n\n    /**\n     * Support testing using an element\n     * @param {Function} fn Passed the created element and returns a boolean result\n     */\n    function assert(fn) {\n      var el = document.createElement("fieldset");\n      try {\n        return !!fn(el);\n      } catch (e) {\n        return false;\n      } finally {\n        // Remove from its parent by default\n        if (el.parentNode) {\n          el.parentNode.removeChild(el);\n        }\n\n        // release memory in IE\n        el = null;\n      }\n    }\n\n    /**\n     * Returns a function to use in pseudos for input types\n     * @param {String} type\n     */\n    function createInputPseudo(type) {\n      return function (elem) {\n        return nodeName(elem, "input") && elem.type === type;\n      };\n    }\n\n    /**\n     * Returns a function to use in pseudos for buttons\n     * @param {String} type\n     */\n    function createButtonPseudo(type) {\n      return function (elem) {\n        return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;\n      };\n    }\n\n    /**\n     * Returns a function to use in pseudos for :enabled/:disabled\n     * @param {Boolean} disabled true for :disabled; false for :enabled\n     */\n    function createDisabledPseudo(disabled) {\n      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n      return function (elem) {\n        // Only certain elements can match :enabled or :disabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n        if ("form" in elem) {\n          // Check for inherited disabledness on relevant non-disabled elements:\n          // * listed form-associated elements in a disabled fieldset\n          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n          // * option elements in a disabled optgroup\n          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n          // All such elements have a "form" property.\n          if (elem.parentNode && elem.disabled === false) {\n            // Option elements defer to a parent optgroup if present\n            if ("label" in elem) {\n              if ("label" in elem.parentNode) {\n                return elem.parentNode.disabled === disabled;\n              } else {\n                return elem.disabled === disabled;\n              }\n            }\n\n            // Support: IE 6 - 11+\n            // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n            return elem.isDisabled === disabled ||\n            // Where there is no isDisabled, check manually\n            elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n          }\n          return elem.disabled === disabled;\n\n          // Try to winnow out elements that can\'t be disabled before trusting the disabled property.\n          // Some victims get caught in our net (label, legend, menu, track), but it shouldn\'t\n          // even exist on them, let alone have a boolean value.\n        } else if ("label" in elem) {\n          return elem.disabled === disabled;\n        }\n\n        // Remaining elements are neither :enabled nor :disabled\n        return false;\n      };\n    }\n\n    /**\n     * Returns a function to use in pseudos for positionals\n     * @param {Function} fn\n     */\n    function createPositionalPseudo(fn) {\n      return markFunction(function (argument) {\n        argument = +argument;\n        return markFunction(function (seed, matches) {\n          var j,\n            matchIndexes = fn([], seed.length, argument),\n            i = matchIndexes.length;\n\n          // Match elements found at the specified indexes\n          while (i--) {\n            if (seed[j = matchIndexes[i]]) {\n              seed[j] = !(matches[j] = seed[j]);\n            }\n          }\n        });\n      });\n    }\n\n    /**\n     * Checks a node for validity as a jQuery selector context\n     * @param {Element|Object=} context\n     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n     */\n    function testContext(context) {\n      return context && typeof context.getElementsByTagName !== "undefined" && context;\n    }\n\n    /**\n     * Sets document-related variables once based on the current document\n     * @param {Element|Object} [node] An element or document object to use to set the document\n     * @returns {Object} Returns the current document\n     */\n    function setDocument(node) {\n      var subWindow,\n        doc = node ? node.ownerDocument || node : preferredDoc;\n\n      // Return early if doc is invalid or already selected\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {\n        return document;\n      }\n\n      // Update global variables\n      document = doc;\n      documentElement = document.documentElement;\n      documentIsHTML = !jQuery.isXMLDoc(document);\n\n      // Support: iOS 7 only, IE 9 - 11+\n      // Older browsers didn\'t support unprefixed `matches`.\n      matches = documentElement.matches || documentElement.webkitMatchesSelector || documentElement.msMatchesSelector;\n\n      // Support: IE 9 - 11+, Edge 12 - 18+\n      // Accessing iframe documents after unload throws "permission denied" errors (see trac-13936)\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if (preferredDoc != document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n        // Support: IE 9 - 11+, Edge 12 - 18+\n        subWindow.addEventListener("unload", unloadHandler);\n      }\n\n      // Support: IE <10\n      // Check if getElementById returns elements by name\n      // The broken getElementById methods don\'t pick up programmatically-set names,\n      // so use a roundabout getElementsByName test\n      support.getById = assert(function (el) {\n        documentElement.appendChild(el).id = jQuery.expando;\n        return !document.getElementsByName || !document.getElementsByName(jQuery.expando).length;\n      });\n\n      // Support: IE 9 only\n      // Check to see if it\'s possible to do matchesSelector\n      // on a disconnected node.\n      support.disconnectedMatch = assert(function (el) {\n        return matches.call(el, "*");\n      });\n\n      // Support: IE 9 - 11+, Edge 12 - 18+\n      // IE/Edge don\'t support the :scope pseudo-class.\n      support.scope = assert(function () {\n        return document.querySelectorAll(":scope");\n      });\n\n      // Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only\n      // Make sure the `:has()` argument is parsed unforgivingly.\n      // We include `*` in the test to detect buggy implementations that are\n      // _selectively_ forgiving (specifically when the list includes at least\n      // one valid selector).\n      // Note that we treat complete lack of support for `:has()` as if it were\n      // spec-compliant support, which is fine because use of `:has()` in such\n      // environments will fail in the qSA path and fall back to jQuery traversal\n      // anyway.\n      support.cssHas = assert(function () {\n        try {\n          document.querySelector(":has(*,:jqfake)");\n          return false;\n        } catch (e) {\n          return true;\n        }\n      });\n\n      // ID filter and find\n      if (support.getById) {\n        Expr.filter.ID = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            return elem.getAttribute("id") === attrId;\n          };\n        };\n        Expr.find.ID = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var elem = context.getElementById(id);\n            return elem ? [elem] : [];\n          }\n        };\n      } else {\n        Expr.filter.ID = function (id) {\n          var attrId = id.replace(runescape, funescape);\n          return function (elem) {\n            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");\n            return node && node.value === attrId;\n          };\n        };\n\n        // Support: IE 6 - 7 only\n        // getElementById is not reliable as a find shortcut\n        Expr.find.ID = function (id, context) {\n          if (typeof context.getElementById !== "undefined" && documentIsHTML) {\n            var node,\n              i,\n              elems,\n              elem = context.getElementById(id);\n            if (elem) {\n              // Verify the id attribute\n              node = elem.getAttributeNode("id");\n              if (node && node.value === id) {\n                return [elem];\n              }\n\n              // Fall back on getElementsByName\n              elems = context.getElementsByName(id);\n              i = 0;\n              while (elem = elems[i++]) {\n                node = elem.getAttributeNode("id");\n                if (node && node.value === id) {\n                  return [elem];\n                }\n              }\n            }\n            return [];\n          }\n        };\n      }\n\n      // Tag\n      Expr.find.TAG = function (tag, context) {\n        if (typeof context.getElementsByTagName !== "undefined") {\n          return context.getElementsByTagName(tag);\n\n          // DocumentFragment nodes don\'t have gEBTN\n        } else {\n          return context.querySelectorAll(tag);\n        }\n      };\n\n      // Class\n      Expr.find.CLASS = function (className, context) {\n        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {\n          return context.getElementsByClassName(className);\n        }\n      };\n\n      /* QSA/matchesSelector\n      ---------------------------------------------------------------------- */\n\n      // QSA and matchesSelector support\n\n      rbuggyQSA = [];\n\n      // Build QSA regex\n      // Regex strategy adopted from Diego Perini\n      assert(function (el) {\n        var input;\n        documentElement.appendChild(el).innerHTML = "<a id=\'" + expando + "\' href=\'\' disabled=\'disabled\'></a>" + "<select id=\'" + expando + "-\\r\\\\\' disabled=\'disabled\'>" + "<option selected=\'\'></option></select>";\n\n        // Support: iOS <=7 - 8 only\n        // Boolean attributes and "value" are not treated correctly in some XML documents\n        if (!el.querySelectorAll("[selected]").length) {\n          rbuggyQSA.push("\\\\[" + whitespace + "*(?:value|" + booleans + ")");\n        }\n\n        // Support: iOS <=7 - 8 only\n        if (!el.querySelectorAll("[id~=" + expando + "-]").length) {\n          rbuggyQSA.push("~=");\n        }\n\n        // Support: iOS 8 only\n        // https://bugs.webkit.org/show_bug.cgi?id=136851\n        // In-page `selector#id sibling-combinator selector` fails\n        if (!el.querySelectorAll("a#" + expando + "+*").length) {\n          rbuggyQSA.push(".#.+[+~]");\n        }\n\n        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n        // In some of the document kinds, these selectors wouldn\'t work natively.\n        // This is probably OK but for backwards compatibility we want to maintain\n        // handling them through jQuery traversal in jQuery 3.x.\n        if (!el.querySelectorAll(":checked").length) {\n          rbuggyQSA.push(":checked");\n        }\n\n        // Support: Windows 8 Native Apps\n        // The type and name attributes are restricted during .innerHTML assignment\n        input = document.createElement("input");\n        input.setAttribute("type", "hidden");\n        el.appendChild(input).setAttribute("name", "D");\n\n        // Support: IE 9 - 11+\n        // IE\'s :disabled selector does not pick up the children of disabled fieldsets\n        // Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+\n        // In some of the document kinds, these selectors wouldn\'t work natively.\n        // This is probably OK but for backwards compatibility we want to maintain\n        // handling them through jQuery traversal in jQuery 3.x.\n        documentElement.appendChild(el).disabled = true;\n        if (el.querySelectorAll(":disabled").length !== 2) {\n          rbuggyQSA.push(":enabled", ":disabled");\n        }\n\n        // Support: IE 11+, Edge 15 - 18+\n        // IE 11/Edge don\'t find elements on a `[name=\'\']` query in some cases.\n        // Adding a temporary attribute to the document before the selection works\n        // around the issue.\n        // Interestingly, IE 10 & older don\'t seem to have the issue.\n        input = document.createElement("input");\n        input.setAttribute("name", "");\n        el.appendChild(input);\n        if (!el.querySelectorAll("[name=\'\']").length) {\n          rbuggyQSA.push("\\\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + "*(?:\'\'|\\"\\")");\n        }\n      });\n      if (!support.cssHas) {\n        // Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n        // Our regular `try-catch` mechanism fails to detect natively-unsupported\n        // pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)\n        // in browsers that parse the `:has()` argument as a forgiving selector list.\n        // https://drafts.csswg.org/selectors/#relational now requires the argument\n        // to be parsed unforgivingly, but browsers have not yet fully adjusted.\n        rbuggyQSA.push(":has");\n      }\n      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));\n\n      /* Sorting\n      ---------------------------------------------------------------------- */\n\n      // Document order sorting\n      sortOrder = function sortOrder(a, b) {\n        // Flag for duplicate removal\n        if (a === b) {\n          hasDuplicate = true;\n          return 0;\n        }\n\n        // Sort on method existence if only one input has compareDocumentPosition\n        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n        if (compare) {\n          return compare;\n        }\n\n        // Calculate position if both inputs belong to the same document\n        // Support: IE 11+, Edge 17 - 18+\n        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n        // two documents; shallow comparisons work.\n        // eslint-disable-next-line eqeqeq\n        compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) :\n        // Otherwise we know they are disconnected\n        1;\n\n        // Disconnected nodes\n        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n          // Choose the first element that is related to our preferred document\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (a === document || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {\n            return -1;\n          }\n\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          if (b === document || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {\n            return 1;\n          }\n\n          // Maintain original order\n          return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;\n        }\n        return compare & 4 ? -1 : 1;\n      };\n      return document;\n    }\n    find.matches = function (expr, elements) {\n      return find(expr, null, null, elements);\n    };\n    find.matchesSelector = function (elem, expr) {\n      setDocument(elem);\n      if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n        try {\n          var ret = matches.call(elem, expr);\n\n          // IE 9\'s matchesSelector returns false on disconnected nodes\n          if (ret || support.disconnectedMatch ||\n          // As well, disconnected nodes are said to be in a document\n          // fragment in IE 9\n          elem.document && elem.document.nodeType !== 11) {\n            return ret;\n          }\n        } catch (e) {\n          nonnativeSelectorCache(expr, true);\n        }\n      }\n      return find(expr, document, null, [elem]).length > 0;\n    };\n    find.contains = function (context, elem) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((context.ownerDocument || context) != document) {\n        setDocument(context);\n      }\n      return jQuery.contains(context, elem);\n    };\n    find.attr = function (elem, name) {\n      // Set document vars if needed\n      // Support: IE 11+, Edge 17 - 18+\n      // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n      // two documents; shallow comparisons work.\n      // eslint-disable-next-line eqeqeq\n      if ((elem.ownerDocument || elem) != document) {\n        setDocument(elem);\n      }\n      var fn = Expr.attrHandle[name.toLowerCase()],\n        // Don\'t get fooled by Object.prototype properties (see trac-13807)\n        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n      if (val !== undefined) {\n        return val;\n      }\n      return elem.getAttribute(name);\n    };\n    find.error = function (msg) {\n      throw new Error("Syntax error, unrecognized expression: " + msg);\n    };\n\n    /**\n     * Document sorting and removing duplicates\n     * @param {ArrayLike} results\n     */\n    jQuery.uniqueSort = function (results) {\n      var elem,\n        duplicates = [],\n        j = 0,\n        i = 0;\n\n      // Unless we *know* we can detect duplicates, assume their presence\n      //\n      // Support: Android <=4.0+\n      // Testing for detecting duplicates is unpredictable so instead assume we can\'t\n      // depend on duplicate detection in all browsers without a stable sort.\n      hasDuplicate = !support.sortStable;\n      sortInput = !support.sortStable && _slice.call(results, 0);\n      sort.call(results, sortOrder);\n      if (hasDuplicate) {\n        while (elem = results[i++]) {\n          if (elem === results[i]) {\n            j = duplicates.push(i);\n          }\n        }\n        while (j--) {\n          splice.call(results, duplicates[j], 1);\n        }\n      }\n\n      // Clear input after sorting to release objects\n      // See https://github.com/jquery/sizzle/pull/225\n      sortInput = null;\n      return results;\n    };\n    jQuery.fn.uniqueSort = function () {\n      return this.pushStack(jQuery.uniqueSort(_slice.apply(this)));\n    };\n    Expr = jQuery.expr = {\n      // Can be adjusted by the user\n      cacheLength: 50,\n      createPseudo: markFunction,\n      match: matchExpr,\n      attrHandle: {},\n      find: {},\n      relative: {\n        ">": {\n          dir: "parentNode",\n          first: true\n        },\n        " ": {\n          dir: "parentNode"\n        },\n        "+": {\n          dir: "previousSibling",\n          first: true\n        },\n        "~": {\n          dir: "previousSibling"\n        }\n      },\n      preFilter: {\n        ATTR: function ATTR(match) {\n          match[1] = match[1].replace(runescape, funescape);\n\n          // Move the given value to match[3] whether quoted or unquoted\n          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);\n          if (match[2] === "~=") {\n            match[3] = " " + match[3] + " ";\n          }\n          return match.slice(0, 4);\n        },\n        CHILD: function CHILD(match) {\n          /* matches from matchExpr["CHILD"]\n          \t1 type (only|nth|...)\n          \t2 what (child|of-type)\n          \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n          \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n          \t5 sign of xn-component\n          \t6 x of xn-component\n          \t7 sign of y-component\n          \t8 y of y-component\n          */\n          match[1] = match[1].toLowerCase();\n          if (match[1].slice(0, 3) === "nth") {\n            // nth-* requires argument\n            if (!match[3]) {\n              find.error(match[0]);\n            }\n\n            // numeric x and y parameters for Expr.filter.CHILD\n            // remember that false/true cast respectively to 0/1\n            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));\n            match[5] = +(match[7] + match[8] || match[3] === "odd");\n\n            // other types prohibit arguments\n          } else if (match[3]) {\n            find.error(match[0]);\n          }\n          return match;\n        },\n        PSEUDO: function PSEUDO(match) {\n          var excess,\n            unquoted = !match[6] && match[2];\n          if (matchExpr.CHILD.test(match[0])) {\n            return null;\n          }\n\n          // Accept quoted arguments as-is\n          if (match[3]) {\n            match[2] = match[4] || match[5] || "";\n\n            // Strip excess characters from unquoted arguments\n          } else if (unquoted && rpseudo.test(unquoted) && (\n          // Get excess from tokenize (recursively)\n          excess = tokenize(unquoted, true)) && (\n          // advance to the next closing parenthesis\n          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {\n            // excess is a negative index\n            match[0] = match[0].slice(0, excess);\n            match[2] = unquoted.slice(0, excess);\n          }\n\n          // Return only captures needed by the pseudo filter method (type and argument)\n          return match.slice(0, 3);\n        }\n      },\n      filter: {\n        TAG: function TAG(nodeNameSelector) {\n          var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n          return nodeNameSelector === "*" ? function () {\n            return true;\n          } : function (elem) {\n            return nodeName(elem, expectedNodeName);\n          };\n        },\n        CLASS: function CLASS(className) {\n          var pattern = classCache[className + " "];\n          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {\n            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");\n          });\n        },\n        ATTR: function ATTR(name, operator, check) {\n          return function (elem) {\n            var result = find.attr(elem, name);\n            if (result == null) {\n              return operator === "!=";\n            }\n            if (!operator) {\n              return true;\n            }\n            result += "";\n            if (operator === "=") {\n              return result === check;\n            }\n            if (operator === "!=") {\n              return result !== check;\n            }\n            if (operator === "^=") {\n              return check && result.indexOf(check) === 0;\n            }\n            if (operator === "*=") {\n              return check && result.indexOf(check) > -1;\n            }\n            if (operator === "$=") {\n              return check && result.slice(-check.length) === check;\n            }\n            if (operator === "~=") {\n              return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;\n            }\n            if (operator === "|=") {\n              return result === check || result.slice(0, check.length + 1) === check + "-";\n            }\n            return false;\n          };\n        },\n        CHILD: function CHILD(type, what, _argument, first, last) {\n          var simple = type.slice(0, 3) !== "nth",\n            forward = type.slice(-4) !== "last",\n            ofType = what === "of-type";\n          return first === 1 && last === 0 ?\n          // Shortcut for :nth-*(n)\n          function (elem) {\n            return !!elem.parentNode;\n          } : function (elem, _context, xml) {\n            var cache,\n              outerCache,\n              node,\n              nodeIndex,\n              start,\n              dir = simple !== forward ? "nextSibling" : "previousSibling",\n              parent = elem.parentNode,\n              name = ofType && elem.nodeName.toLowerCase(),\n              useCache = !xml && !ofType,\n              diff = false;\n            if (parent) {\n              // :(first|last|only)-(child|of-type)\n              if (simple) {\n                while (dir) {\n                  node = elem;\n                  while (node = node[dir]) {\n                    if (ofType ? nodeName(node, name) : node.nodeType === 1) {\n                      return false;\n                    }\n                  }\n\n                  // Reverse direction for :only-* (if we haven\'t yet done so)\n                  start = dir = type === "only" && !start && "nextSibling";\n                }\n                return true;\n              }\n              start = [forward ? parent.firstChild : parent.lastChild];\n\n              // non-xml :nth-child(...) stores cache data on `parent`\n              if (forward && useCache) {\n                // Seek `elem` from a previously-cached index\n                outerCache = parent[expando] || (parent[expando] = {});\n                cache = outerCache[type] || [];\n                nodeIndex = cache[0] === dirruns && cache[1];\n                diff = nodeIndex && cache[2];\n                node = nodeIndex && parent.childNodes[nodeIndex];\n                while (node = ++nodeIndex && node && node[dir] || (\n                // Fallback to seeking `elem` from the start\n                diff = nodeIndex = 0) || start.pop()) {\n                  // When found, cache indexes on `parent` and break\n                  if (node.nodeType === 1 && ++diff && node === elem) {\n                    outerCache[type] = [dirruns, nodeIndex, diff];\n                    break;\n                  }\n                }\n              } else {\n                // Use previously-cached element index if available\n                if (useCache) {\n                  outerCache = elem[expando] || (elem[expando] = {});\n                  cache = outerCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex;\n                }\n\n                // xml :nth-child(...)\n                // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                if (diff === false) {\n                  // Use the same loop as above to seek `elem` from the start\n                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                    if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {\n                      // Cache the index of each encountered element\n                      if (useCache) {\n                        outerCache = node[expando] || (node[expando] = {});\n                        outerCache[type] = [dirruns, diff];\n                      }\n                      if (node === elem) {\n                        break;\n                      }\n                    }\n                  }\n                }\n              }\n\n              // Incorporate the offset, then check against cycle size\n              diff -= last;\n              return diff === first || diff % first === 0 && diff / first >= 0;\n            }\n          };\n        },\n        PSEUDO: function PSEUDO(pseudo, argument) {\n          // pseudo-class names are case-insensitive\n          // https://www.w3.org/TR/selectors/#pseudo-classes\n          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n          // Remember that setFilters inherits from pseudos\n          var args,\n            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);\n\n          // The user may use createPseudo to indicate that\n          // arguments are needed to create the filter function\n          // just as jQuery does\n          if (fn[expando]) {\n            return fn(argument);\n          }\n\n          // But maintain support for old signatures\n          if (fn.length > 1) {\n            args = [pseudo, pseudo, "", argument];\n            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n              var idx,\n                matched = fn(seed, argument),\n                i = matched.length;\n              while (i--) {\n                idx = indexOf.call(seed, matched[i]);\n                seed[idx] = !(matches[idx] = matched[i]);\n              }\n            }) : function (elem) {\n              return fn(elem, 0, args);\n            };\n          }\n          return fn;\n        }\n      },\n      pseudos: {\n        // Potentially complex pseudos\n        not: markFunction(function (selector) {\n          // Trim the selector passed to compile\n          // to avoid treating leading and trailing\n          // spaces as combinators\n          var input = [],\n            results = [],\n            matcher = compile(selector.replace(rtrimCSS, "$1"));\n          return matcher[expando] ? markFunction(function (seed, matches, _context, xml) {\n            var elem,\n              unmatched = matcher(seed, null, xml, []),\n              i = seed.length;\n\n            // Match elements unmatched by `matcher`\n            while (i--) {\n              if (elem = unmatched[i]) {\n                seed[i] = !(matches[i] = elem);\n              }\n            }\n          }) : function (elem, _context, xml) {\n            input[0] = elem;\n            matcher(input, null, xml, results);\n\n            // Don\'t keep the element\n            // (see https://github.com/jquery/sizzle/issues/299)\n            input[0] = null;\n            return !results.pop();\n          };\n        }),\n        has: markFunction(function (selector) {\n          return function (elem) {\n            return find(selector, elem).length > 0;\n          };\n        }),\n        contains: markFunction(function (text) {\n          text = text.replace(runescape, funescape);\n          return function (elem) {\n            return (elem.textContent || jQuery.text(elem)).indexOf(text) > -1;\n          };\n        }),\n        // "Whether an element is represented by a :lang() selector\n        // is based solely on the element\'s language value\n        // being equal to the identifier C,\n        // or beginning with the identifier C immediately followed by "-".\n        // The matching of C against the element\'s language value is performed case-insensitively.\n        // The identifier C does not have to be a valid language name."\n        // https://www.w3.org/TR/selectors/#lang-pseudo\n        lang: markFunction(function (lang) {\n          // lang value must be a valid identifier\n          if (!ridentifier.test(lang || "")) {\n            find.error("unsupported lang: " + lang);\n          }\n          lang = lang.replace(runescape, funescape).toLowerCase();\n          return function (elem) {\n            var elemLang;\n            do {\n              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {\n                elemLang = elemLang.toLowerCase();\n                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;\n              }\n            } while ((elem = elem.parentNode) && elem.nodeType === 1);\n            return false;\n          };\n        }),\n        // Miscellaneous\n        target: function target(elem) {\n          var hash = window.location && window.location.hash;\n          return hash && hash.slice(1) === elem.id;\n        },\n        root: function root(elem) {\n          return elem === documentElement;\n        },\n        focus: function focus(elem) {\n          return elem === safeActiveElement() && document.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);\n        },\n        // Boolean properties\n        enabled: createDisabledPseudo(false),\n        disabled: createDisabledPseudo(true),\n        checked: function checked(elem) {\n          // In CSS3, :checked should return both checked and selected elements\n          // https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n          return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;\n        },\n        selected: function selected(elem) {\n          // Support: IE <=11+\n          // Accessing the selectedIndex property\n          // forces the browser to treat the default option as\n          // selected when in an optgroup.\n          if (elem.parentNode) {\n            // eslint-disable-next-line no-unused-expressions\n            elem.parentNode.selectedIndex;\n          }\n          return elem.selected === true;\n        },\n        // Contents\n        empty: function empty(elem) {\n          // https://www.w3.org/TR/selectors/#empty-pseudo\n          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n          //   but not by others (comment: 8; processing instruction: 7; etc.)\n          // nodeType < 6 works because attributes (2) do not appear as children\n          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n            if (elem.nodeType < 6) {\n              return false;\n            }\n          }\n          return true;\n        },\n        parent: function parent(elem) {\n          return !Expr.pseudos.empty(elem);\n        },\n        // Element/input types\n        header: function header(elem) {\n          return rheader.test(elem.nodeName);\n        },\n        input: function input(elem) {\n          return rinputs.test(elem.nodeName);\n        },\n        button: function button(elem) {\n          return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");\n        },\n        text: function text(elem) {\n          var attr;\n          return nodeName(elem, "input") && elem.type === "text" && (\n          // Support: IE <10 only\n          // New HTML5 attribute values (e.g., "search") appear\n          // with elem.type === "text"\n          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");\n        },\n        // Position-in-collection\n        first: createPositionalPseudo(function () {\n          return [0];\n        }),\n        last: createPositionalPseudo(function (_matchIndexes, length) {\n          return [length - 1];\n        }),\n        eq: createPositionalPseudo(function (_matchIndexes, length, argument) {\n          return [argument < 0 ? argument + length : argument];\n        }),\n        even: createPositionalPseudo(function (matchIndexes, length) {\n          var i = 0;\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        }),\n        odd: createPositionalPseudo(function (matchIndexes, length) {\n          var i = 1;\n          for (; i < length; i += 2) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        }),\n        lt: createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i;\n          if (argument < 0) {\n            i = argument + length;\n          } else if (argument > length) {\n            i = length;\n          } else {\n            i = argument;\n          }\n          for (; --i >= 0;) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        }),\n        gt: createPositionalPseudo(function (matchIndexes, length, argument) {\n          var i = argument < 0 ? argument + length : argument;\n          for (; ++i < length;) {\n            matchIndexes.push(i);\n          }\n          return matchIndexes;\n        })\n      }\n    };\n    Expr.pseudos.nth = Expr.pseudos.eq;\n\n    // Add button/input type pseudos\n    for (i in {\n      radio: true,\n      checkbox: true,\n      file: true,\n      password: true,\n      image: true\n    }) {\n      Expr.pseudos[i] = createInputPseudo(i);\n    }\n    for (i in {\n      submit: true,\n      reset: true\n    }) {\n      Expr.pseudos[i] = createButtonPseudo(i);\n    }\n\n    // Easy API for creating new setFilters\n    function setFilters() {}\n    setFilters.prototype = Expr.filters = Expr.pseudos;\n    Expr.setFilters = new setFilters();\n    function tokenize(selector, parseOnly) {\n      var matched,\n        match,\n        tokens,\n        type,\n        soFar,\n        groups,\n        preFilters,\n        cached = tokenCache[selector + " "];\n      if (cached) {\n        return parseOnly ? 0 : cached.slice(0);\n      }\n      soFar = selector;\n      groups = [];\n      preFilters = Expr.preFilter;\n      while (soFar) {\n        // Comma and first run\n        if (!matched || (match = rcomma.exec(soFar))) {\n          if (match) {\n            // Don\'t consume trailing commas as valid\n            soFar = soFar.slice(match[0].length) || soFar;\n          }\n          groups.push(tokens = []);\n        }\n        matched = false;\n\n        // Combinators\n        if (match = rleadingCombinator.exec(soFar)) {\n          matched = match.shift();\n          tokens.push({\n            value: matched,\n            // Cast descendant combinators to space\n            type: match[0].replace(rtrimCSS, " ")\n          });\n          soFar = soFar.slice(matched.length);\n        }\n\n        // Filters\n        for (type in Expr.filter) {\n          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              type: type,\n              matches: match\n            });\n            soFar = soFar.slice(matched.length);\n          }\n        }\n        if (!matched) {\n          break;\n        }\n      }\n\n      // Return the length of the invalid excess\n      // if we\'re just parsing\n      // Otherwise, throw an error or return tokens\n      if (parseOnly) {\n        return soFar.length;\n      }\n      return soFar ? find.error(selector) :\n      // Cache the tokens\n      tokenCache(selector, groups).slice(0);\n    }\n    function toSelector(tokens) {\n      var i = 0,\n        len = tokens.length,\n        selector = "";\n      for (; i < len; i++) {\n        selector += tokens[i].value;\n      }\n      return selector;\n    }\n    function addCombinator(matcher, combinator, base) {\n      var dir = combinator.dir,\n        skip = combinator.next,\n        key = skip || dir,\n        checkNonElements = base && key === "parentNode",\n        doneName = done++;\n      return combinator.first ?\n      // Check against closest ancestor/preceding element\n      function (elem, context, xml) {\n        while (elem = elem[dir]) {\n          if (elem.nodeType === 1 || checkNonElements) {\n            return matcher(elem, context, xml);\n          }\n        }\n        return false;\n      } :\n      // Check against all ancestor/preceding elements\n      function (elem, context, xml) {\n        var oldCache,\n          outerCache,\n          newCache = [dirruns, doneName];\n\n        // We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n        if (xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              if (matcher(elem, context, xml)) {\n                return true;\n              }\n            }\n          }\n        } else {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              outerCache = elem[expando] || (elem[expando] = {});\n              if (skip && nodeName(elem, skip)) {\n                elem = elem[dir] || elem;\n              } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                // Assign to newCache so results back-propagate to previous elements\n                return newCache[2] = oldCache[2];\n              } else {\n                // Reuse newcache so results back-propagate to previous elements\n                outerCache[key] = newCache;\n\n                // A match means we\'re done; a fail means we have to keep checking\n                if (newCache[2] = matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          }\n        }\n        return false;\n      };\n    }\n    function elementMatcher(matchers) {\n      return matchers.length > 1 ? function (elem, context, xml) {\n        var i = matchers.length;\n        while (i--) {\n          if (!matchers[i](elem, context, xml)) {\n            return false;\n          }\n        }\n        return true;\n      } : matchers[0];\n    }\n    function multipleContexts(selector, contexts, results) {\n      var i = 0,\n        len = contexts.length;\n      for (; i < len; i++) {\n        find(selector, contexts[i], results);\n      }\n      return results;\n    }\n    function condense(unmatched, map, filter, context, xml) {\n      var elem,\n        newUnmatched = [],\n        i = 0,\n        len = unmatched.length,\n        mapped = map != null;\n      for (; i < len; i++) {\n        if (elem = unmatched[i]) {\n          if (!filter || filter(elem, context, xml)) {\n            newUnmatched.push(elem);\n            if (mapped) {\n              map.push(i);\n            }\n          }\n        }\n      }\n      return newUnmatched;\n    }\n    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n      if (postFilter && !postFilter[expando]) {\n        postFilter = setMatcher(postFilter);\n      }\n      if (postFinder && !postFinder[expando]) {\n        postFinder = setMatcher(postFinder, postSelector);\n      }\n      return markFunction(function (seed, results, context, xml) {\n        var temp,\n          i,\n          elem,\n          matcherOut,\n          preMap = [],\n          postMap = [],\n          preexisting = results.length,\n          // Get initial elements from seed or context\n          elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),\n          // Prefilter to get matcher input, preserving a map for seed-results synchronization\n          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;\n        if (matcher) {\n          // If we have a postFinder, or filtered seed, or non-seed postFilter\n          // or preexisting results,\n          matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ?\n          // ...intermediate processing is necessary\n          [] :\n          // ...otherwise use results directly\n          results;\n\n          // Find primary matches\n          matcher(matcherIn, matcherOut, context, xml);\n        } else {\n          matcherOut = matcherIn;\n        }\n\n        // Apply postFilter\n        if (postFilter) {\n          temp = condense(matcherOut, postMap);\n          postFilter(temp, [], context, xml);\n\n          // Un-match failing elements by moving them back to matcherIn\n          i = temp.length;\n          while (i--) {\n            if (elem = temp[i]) {\n              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n            }\n          }\n        }\n        if (seed) {\n          if (postFinder || preFilter) {\n            if (postFinder) {\n              // Get the final matcherOut by condensing this intermediate into postFinder contexts\n              temp = [];\n              i = matcherOut.length;\n              while (i--) {\n                if (elem = matcherOut[i]) {\n                  // Restore matcherIn since elem is not yet a final match\n                  temp.push(matcherIn[i] = elem);\n                }\n              }\n              postFinder(null, matcherOut = [], temp, xml);\n            }\n\n            // Move matched elements from seed to results to keep them synchronized\n            i = matcherOut.length;\n            while (i--) {\n              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {\n                seed[temp] = !(results[temp] = elem);\n              }\n            }\n          }\n\n          // Add elements to results, through postFinder if defined\n        } else {\n          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n          if (postFinder) {\n            postFinder(null, results, matcherOut, xml);\n          } else {\n            push.apply(results, matcherOut);\n          }\n        }\n      });\n    }\n    function matcherFromTokens(tokens) {\n      var checkContext,\n        matcher,\n        j,\n        len = tokens.length,\n        leadingRelative = Expr.relative[tokens[0].type],\n        implicitRelative = leadingRelative || Expr.relative[" "],\n        i = leadingRelative ? 1 : 0,\n        // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator(function (elem) {\n          return elem === checkContext;\n        }, implicitRelative, true),\n        matchAnyContext = addCombinator(function (elem) {\n          return indexOf.call(checkContext, elem) > -1;\n        }, implicitRelative, true),\n        matchers = [function (elem, context, xml) {\n          // Support: IE 11+, Edge 17 - 18+\n          // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n          // two documents; shallow comparisons work.\n          // eslint-disable-next-line eqeqeq\n          var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));\n\n          // Avoid hanging onto element\n          // (see https://github.com/jquery/sizzle/issues/299)\n          checkContext = null;\n          return ret;\n        }];\n      for (; i < len; i++) {\n        if (matcher = Expr.relative[tokens[i].type]) {\n          matchers = [addCombinator(elementMatcher(matchers), matcher)];\n        } else {\n          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);\n\n          // Return special upon seeing a positional matcher\n          if (matcher[expando]) {\n            // Find the next relative operator (if any) for proper handling\n            j = ++i;\n            for (; j < len; j++) {\n              if (Expr.relative[tokens[j].type]) {\n                break;\n              }\n            }\n            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(\n            // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n            tokens.slice(0, i - 1).concat({\n              value: tokens[i - 2].type === " " ? "*" : ""\n            })).replace(rtrimCSS, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n          }\n          matchers.push(matcher);\n        }\n      }\n      return elementMatcher(matchers);\n    }\n    function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n      var bySet = setMatchers.length > 0,\n        byElement = elementMatchers.length > 0,\n        superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n          var elem,\n            j,\n            matcher,\n            matchedCount = 0,\n            i = "0",\n            unmatched = seed && [],\n            setMatched = [],\n            contextBackup = outermostContext,\n            // We must always have either seed elements or outermost context\n            elems = seed || byElement && Expr.find.TAG("*", outermost),\n            // Use integer dirruns iff this is the outermost matcher\n            dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n            len = elems.length;\n          if (outermost) {\n            // Support: IE 11+, Edge 17 - 18+\n            // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n            // two documents; shallow comparisons work.\n            // eslint-disable-next-line eqeqeq\n            outermostContext = context == document || context || outermost;\n          }\n\n          // Add elements passing elementMatchers directly to results\n          // Support: iOS <=7 - 9 only\n          // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching\n          // elements by id. (see trac-14142)\n          for (; i !== len && (elem = elems[i]) != null; i++) {\n            if (byElement && elem) {\n              j = 0;\n\n              // Support: IE 11+, Edge 17 - 18+\n              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing\n              // two documents; shallow comparisons work.\n              // eslint-disable-next-line eqeqeq\n              if (!context && elem.ownerDocument != document) {\n                setDocument(elem);\n                xml = !documentIsHTML;\n              }\n              while (matcher = elementMatchers[j++]) {\n                if (matcher(elem, context || document, xml)) {\n                  push.call(results, elem);\n                  break;\n                }\n              }\n              if (outermost) {\n                dirruns = dirrunsUnique;\n              }\n            }\n\n            // Track unmatched elements for set filters\n            if (bySet) {\n              // They will have gone through all possible matchers\n              if (elem = !matcher && elem) {\n                matchedCount--;\n              }\n\n              // Lengthen the array for every element, matched or not\n              if (seed) {\n                unmatched.push(elem);\n              }\n            }\n          }\n\n          // `i` is now the count of elements visited above, and adding it to `matchedCount`\n          // makes the latter nonnegative.\n          matchedCount += i;\n\n          // Apply set filters to unmatched elements\n          // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n          // equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n          // no element matchers and no seed.\n          // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n          // case, which will result in a "00" `matchedCount` that differs from `i` but is also\n          // numerically zero.\n          if (bySet && i !== matchedCount) {\n            j = 0;\n            while (matcher = setMatchers[j++]) {\n              matcher(unmatched, setMatched, context, xml);\n            }\n            if (seed) {\n              // Reintegrate element matches to eliminate the need for sorting\n              if (matchedCount > 0) {\n                while (i--) {\n                  if (!(unmatched[i] || setMatched[i])) {\n                    setMatched[i] = pop.call(results);\n                  }\n                }\n              }\n\n              // Discard index placeholder values to get only actual matches\n              setMatched = condense(setMatched);\n            }\n\n            // Add matches to results\n            push.apply(results, setMatched);\n\n            // Seedless set matches succeeding multiple successful matchers stipulate sorting\n            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n              jQuery.uniqueSort(results);\n            }\n          }\n\n          // Override manipulation of globals by nested matchers\n          if (outermost) {\n            dirruns = dirrunsUnique;\n            outermostContext = contextBackup;\n          }\n          return unmatched;\n        };\n      return bySet ? markFunction(superMatcher) : superMatcher;\n    }\n    function compile(selector, match /* Internal Use Only */) {\n      var i,\n        setMatchers = [],\n        elementMatchers = [],\n        cached = compilerCache[selector + " "];\n      if (!cached) {\n        // Generate a function of recursive functions that can be used to check each element\n        if (!match) {\n          match = tokenize(selector);\n        }\n        i = match.length;\n        while (i--) {\n          cached = matcherFromTokens(match[i]);\n          if (cached[expando]) {\n            setMatchers.push(cached);\n          } else {\n            elementMatchers.push(cached);\n          }\n        }\n\n        // Cache the compiled function\n        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));\n\n        // Save selector and tokenization\n        cached.selector = selector;\n      }\n      return cached;\n    }\n\n    /**\n     * A low-level selection function that works with jQuery\'s compiled\n     *  selector functions\n     * @param {String|Function} selector A selector or a pre-compiled\n     *  selector function built with jQuery selector compile\n     * @param {Element} context\n     * @param {Array} [results]\n     * @param {Array} [seed] A set of elements to match against\n     */\n    function select(selector, context, results, seed) {\n      var i,\n        tokens,\n        token,\n        type,\n        find,\n        compiled = typeof selector === "function" && selector,\n        match = !seed && tokenize(selector = compiled.selector || selector);\n      results = results || [];\n\n      // Try to minimize operations if there is only one selector in the list and no seed\n      // (the latter of which guarantees us context)\n      if (match.length === 1) {\n        // Reduce context if the leading compound selector is an ID\n        tokens = match[0] = match[0].slice(0);\n        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n          context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];\n          if (!context) {\n            return results;\n\n            // Precompiled matchers will still verify ancestry, so step up a level\n          } else if (compiled) {\n            context = context.parentNode;\n          }\n          selector = selector.slice(tokens.shift().value.length);\n        }\n\n        // Fetch a seed set for right-to-left matching\n        i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;\n        while (i--) {\n          token = tokens[i];\n\n          // Abort if we hit a combinator\n          if (Expr.relative[type = token.type]) {\n            break;\n          }\n          if (find = Expr.find[type]) {\n            // Search, expanding context for leading sibling combinators\n            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n              // If seed is empty or no tokens remain, we can return early\n              tokens.splice(i, 1);\n              selector = seed.length && toSelector(tokens);\n              if (!selector) {\n                push.apply(results, seed);\n                return results;\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      // Compile and execute a filtering function if one is not provided\n      // Provide `match` to avoid retokenization if we modified the selector above\n      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n      return results;\n    }\n\n    // One-time assignments\n\n    // Support: Android <=4.0 - 4.1+\n    // Sort stability\n    support.sortStable = expando.split("").sort(sortOrder).join("") === expando;\n\n    // Initialize against the default document\n    setDocument();\n\n    // Support: Android <=4.0 - 4.1+\n    // Detached nodes confoundingly follow *each other*\n    support.sortDetached = assert(function (el) {\n      // Should return 1, but returns 4 (following)\n      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;\n    });\n    jQuery.find = find;\n\n    // Deprecated\n    jQuery.expr[":"] = jQuery.expr.pseudos;\n    jQuery.unique = jQuery.uniqueSort;\n\n    // These have always been private, but they used to be documented\n    // as part of Sizzle so let\'s maintain them in the 3.x line\n    // for backwards compatibility purposes.\n    find.compile = compile;\n    find.select = select;\n    find.setDocument = setDocument;\n    find.escape = jQuery.escapeSelector;\n    find.getText = jQuery.text;\n    find.isXML = jQuery.isXMLDoc;\n    find.selectors = jQuery.expr;\n    find.support = jQuery.support;\n    find.uniqueSort = jQuery.uniqueSort;\n\n    /* eslint-enable */\n  })();\n\n  var dir = function dir(elem, _dir, until) {\n    var matched = [],\n      truncate = until !== undefined;\n    while ((elem = elem[_dir]) && elem.nodeType !== 9) {\n      if (elem.nodeType === 1) {\n        if (truncate && jQuery(elem).is(until)) {\n          break;\n        }\n        matched.push(elem);\n      }\n    }\n    return matched;\n  };\n  var _siblings = function siblings(n, elem) {\n    var matched = [];\n    for (; n; n = n.nextSibling) {\n      if (n.nodeType === 1 && n !== elem) {\n        matched.push(n);\n      }\n    }\n    return matched;\n  };\n  var rneedsContext = jQuery.expr.match.needsContext;\n  var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n\n  // Implement the identical functionality for filter and not\n  function winnow(elements, qualifier, not) {\n    if (isFunction(qualifier)) {\n      return jQuery.grep(elements, function (elem, i) {\n        return !!qualifier.call(elem, i, elem) !== not;\n      });\n    }\n\n    // Single element\n    if (qualifier.nodeType) {\n      return jQuery.grep(elements, function (elem) {\n        return elem === qualifier !== not;\n      });\n    }\n\n    // Arraylike of elements (jQuery, arguments, Array)\n    if (typeof qualifier !== "string") {\n      return jQuery.grep(elements, function (elem) {\n        return indexOf.call(qualifier, elem) > -1 !== not;\n      });\n    }\n\n    // Filtered directly for both simple and complex selectors\n    return jQuery.filter(qualifier, elements, not);\n  }\n  jQuery.filter = function (expr, elems, not) {\n    var elem = elems[0];\n    if (not) {\n      expr = ":not(" + expr + ")";\n    }\n    if (elems.length === 1 && elem.nodeType === 1) {\n      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n    }\n    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n      return elem.nodeType === 1;\n    }));\n  };\n  jQuery.fn.extend({\n    find: function find(selector) {\n      var i,\n        ret,\n        len = this.length,\n        self = this;\n      if (typeof selector !== "string") {\n        return this.pushStack(jQuery(selector).filter(function () {\n          for (i = 0; i < len; i++) {\n            if (jQuery.contains(self[i], this)) {\n              return true;\n            }\n          }\n        }));\n      }\n      ret = this.pushStack([]);\n      for (i = 0; i < len; i++) {\n        jQuery.find(selector, self[i], ret);\n      }\n      return len > 1 ? jQuery.uniqueSort(ret) : ret;\n    },\n    filter: function filter(selector) {\n      return this.pushStack(winnow(this, selector || [], false));\n    },\n    not: function not(selector) {\n      return this.pushStack(winnow(this, selector || [], true));\n    },\n    is: function is(selector) {\n      return !!winnow(this,\n      // If this is a positional/relative selector, check membership in the returned set\n      // so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n    }\n  });\n\n  // Initialize a jQuery object\n\n  // A central reference to the root jQuery(document)\n  var rootjQuery,\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n    // Strict HTML recognition (trac-11290: must start with <)\n    // Shortcut simple #id case for speed\n    rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n    init = jQuery.fn.init = function (selector, context, root) {\n      var match, elem;\n\n      // HANDLE: $(""), $(null), $(undefined), $(false)\n      if (!selector) {\n        return this;\n      }\n\n      // Method init() accepts an alternate rootjQuery\n      // so migrate can support jQuery.sub (gh-2101)\n      root = root || rootjQuery;\n\n      // Handle HTML strings\n      if (typeof selector === "string") {\n        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {\n          // Assume that strings that start and end with <> are HTML and skip the regex check\n          match = [null, selector, null];\n        } else {\n          match = rquickExpr.exec(selector);\n        }\n\n        // Match html or make sure no context is specified for #id\n        if (match && (match[1] || !context)) {\n          // HANDLE: $(html) -> $(array)\n          if (match[1]) {\n            context = context instanceof jQuery ? context[0] : context;\n\n            // Option to run scripts is true for back-compat\n            // Intentionally let the error be thrown if parseHTML is not present\n            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));\n\n            // HANDLE: $(html, props)\n            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n              for (match in context) {\n                // Properties of context are called as methods if possible\n                if (isFunction(this[match])) {\n                  this[match](context[match]);\n\n                  // ...and otherwise set as attributes\n                } else {\n                  this.attr(match, context[match]);\n                }\n              }\n            }\n            return this;\n\n            // HANDLE: $(#id)\n          } else {\n            elem = document.getElementById(match[2]);\n            if (elem) {\n              // Inject the element directly into the jQuery object\n              this[0] = elem;\n              this.length = 1;\n            }\n            return this;\n          }\n\n          // HANDLE: $(expr, $(...))\n        } else if (!context || context.jquery) {\n          return (context || root).find(selector);\n\n          // HANDLE: $(expr, context)\n          // (which is just equivalent to: $(context).find(expr)\n        } else {\n          return this.constructor(context).find(selector);\n        }\n\n        // HANDLE: $(DOMElement)\n      } else if (selector.nodeType) {\n        this[0] = selector;\n        this.length = 1;\n        return this;\n\n        // HANDLE: $(function)\n        // Shortcut for document ready\n      } else if (isFunction(selector)) {\n        return root.ready !== undefined ? root.ready(selector) :\n        // Execute immediately if ready is not present\n        selector(jQuery);\n      }\n      return jQuery.makeArray(selector, this);\n    };\n\n  // Give the init function the jQuery prototype for later instantiation\n  init.prototype = jQuery.fn;\n\n  // Initialize central reference\n  rootjQuery = jQuery(document);\n  var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n    // Methods guaranteed to produce a unique set when starting from a unique set\n    guaranteedUnique = {\n      children: true,\n      contents: true,\n      next: true,\n      prev: true\n    };\n  jQuery.fn.extend({\n    has: function has(target) {\n      var targets = jQuery(target, this),\n        l = targets.length;\n      return this.filter(function () {\n        var i = 0;\n        for (; i < l; i++) {\n          if (jQuery.contains(this, targets[i])) {\n            return true;\n          }\n        }\n      });\n    },\n    closest: function closest(selectors, context) {\n      var cur,\n        i = 0,\n        l = this.length,\n        matched = [],\n        targets = typeof selectors !== "string" && jQuery(selectors);\n\n      // Positional selectors never match, since there\'s no _selection_ context\n      if (!rneedsContext.test(selectors)) {\n        for (; i < l; i++) {\n          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n            // Always skip document fragments\n            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :\n            // Don\'t pass non-elements to jQuery#find\n            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n              matched.push(cur);\n              break;\n            }\n          }\n        }\n      }\n      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n    },\n    // Determine the position of an element within the set\n    index: function index(elem) {\n      // No argument, return index in parent\n      if (!elem) {\n        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n      }\n\n      // Index in selector\n      if (typeof elem === "string") {\n        return indexOf.call(jQuery(elem), this[0]);\n      }\n\n      // Locate the position of the desired element\n      return indexOf.call(this,\n      // If it receives a jQuery object, the first element is used\n      elem.jquery ? elem[0] : elem);\n    },\n    add: function add(selector, context) {\n      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n    },\n    addBack: function addBack(selector) {\n      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n    }\n  });\n  function sibling(cur, dir) {\n    while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n    return cur;\n  }\n  jQuery.each({\n    parent: function parent(elem) {\n      var parent = elem.parentNode;\n      return parent && parent.nodeType !== 11 ? parent : null;\n    },\n    parents: function parents(elem) {\n      return dir(elem, "parentNode");\n    },\n    parentsUntil: function parentsUntil(elem, _i, until) {\n      return dir(elem, "parentNode", until);\n    },\n    next: function next(elem) {\n      return sibling(elem, "nextSibling");\n    },\n    prev: function prev(elem) {\n      return sibling(elem, "previousSibling");\n    },\n    nextAll: function nextAll(elem) {\n      return dir(elem, "nextSibling");\n    },\n    prevAll: function prevAll(elem) {\n      return dir(elem, "previousSibling");\n    },\n    nextUntil: function nextUntil(elem, _i, until) {\n      return dir(elem, "nextSibling", until);\n    },\n    prevUntil: function prevUntil(elem, _i, until) {\n      return dir(elem, "previousSibling", until);\n    },\n    siblings: function siblings(elem) {\n      return _siblings((elem.parentNode || {}).firstChild, elem);\n    },\n    children: function children(elem) {\n      return _siblings(elem.firstChild);\n    },\n    contents: function contents(elem) {\n      if (elem.contentDocument != null &&\n      // Support: IE 11+\n      // <object> elements with no `data` attribute has an object\n      // `contentDocument` with a `null` prototype.\n      getProto(elem.contentDocument)) {\n        return elem.contentDocument;\n      }\n\n      // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n      // Treat the template element as a regular one in browsers that\n      // don\'t support it.\n      if (nodeName(elem, "template")) {\n        elem = elem.content || elem;\n      }\n      return jQuery.merge([], elem.childNodes);\n    }\n  }, function (name, fn) {\n    jQuery.fn[name] = function (until, selector) {\n      var matched = jQuery.map(this, fn, until);\n      if (name.slice(-5) !== "Until") {\n        selector = until;\n      }\n      if (selector && typeof selector === "string") {\n        matched = jQuery.filter(selector, matched);\n      }\n      if (this.length > 1) {\n        // Remove duplicates\n        if (!guaranteedUnique[name]) {\n          jQuery.uniqueSort(matched);\n        }\n\n        // Reverse order for parents* and prev-derivatives\n        if (rparentsprev.test(name)) {\n          matched.reverse();\n        }\n      }\n      return this.pushStack(matched);\n    };\n  });\n  var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\n\n  // Convert String-formatted options into Object-formatted ones\n  function createOptions(options) {\n    var object = {};\n    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n      object[flag] = true;\n    });\n    return object;\n  }\n\n  /*\n   * Create a callback list using the following parameters:\n   *\n   *\toptions: an optional list of space-separated options that will change how\n   *\t\t\tthe callback list behaves or a more traditional option object\n   *\n   * By default a callback list will act like an event callback list and can be\n   * "fired" multiple times.\n   *\n   * Possible options:\n   *\n   *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n   *\n   *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n   *\t\t\t\t\tafter the list has been fired right away with the latest "memorized"\n   *\t\t\t\t\tvalues (like a Deferred)\n   *\n   *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n   *\n   *\tstopOnFalse:\tinterrupt callings when a callback returns false\n   *\n   */\n  jQuery.Callbacks = function (options) {\n    // Convert options from String-formatted to Object-formatted if needed\n    // (we check in cache first)\n    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);\n    var\n      // Flag to know if list is currently firing\n      firing,\n      // Last fire value for non-forgettable lists\n      memory,\n      // Flag to know if list was already fired\n      _fired,\n      // Flag to prevent firing\n      _locked,\n      // Actual callback list\n      list = [],\n      // Queue of execution data for repeatable lists\n      queue = [],\n      // Index of currently firing callback (modified by add/remove as needed)\n      firingIndex = -1,\n      // Fire callbacks\n      fire = function fire() {\n        // Enforce single-firing\n        _locked = _locked || options.once;\n\n        // Execute callbacks for all pending executions,\n        // respecting firingIndex overrides and runtime changes\n        _fired = firing = true;\n        for (; queue.length; firingIndex = -1) {\n          memory = queue.shift();\n          while (++firingIndex < list.length) {\n            // Run callback and check for early termination\n            if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n              // Jump to end and forget the data so .add doesn\'t re-fire\n              firingIndex = list.length;\n              memory = false;\n            }\n          }\n        }\n\n        // Forget the data if we\'re done with it\n        if (!options.memory) {\n          memory = false;\n        }\n        firing = false;\n\n        // Clean up if we\'re done firing for good\n        if (_locked) {\n          // Keep an empty list if we have data for future add calls\n          if (memory) {\n            list = [];\n\n            // Otherwise, this object is spent\n          } else {\n            list = "";\n          }\n        }\n      },\n      // Actual Callbacks object\n      self = {\n        // Add a callback or a collection of callbacks to the list\n        add: function add() {\n          if (list) {\n            // If we have memory from a past run, we should fire after adding\n            if (memory && !firing) {\n              firingIndex = list.length - 1;\n              queue.push(memory);\n            }\n            (function add(args) {\n              jQuery.each(args, function (_, arg) {\n                if (isFunction(arg)) {\n                  if (!options.unique || !self.has(arg)) {\n                    list.push(arg);\n                  }\n                } else if (arg && arg.length && toType(arg) !== "string") {\n                  // Inspect recursively\n                  add(arg);\n                }\n              });\n            })(arguments);\n            if (memory && !firing) {\n              fire();\n            }\n          }\n          return this;\n        },\n        // Remove a callback from the list\n        remove: function remove() {\n          jQuery.each(arguments, function (_, arg) {\n            var index;\n            while ((index = jQuery.inArray(arg, list, index)) > -1) {\n              list.splice(index, 1);\n\n              // Handle firing indexes\n              if (index <= firingIndex) {\n                firingIndex--;\n              }\n            }\n          });\n          return this;\n        },\n        // Check if a given callback is in the list.\n        // If no argument is given, return whether or not list has callbacks attached.\n        has: function has(fn) {\n          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n        },\n        // Remove all callbacks from the list\n        empty: function empty() {\n          if (list) {\n            list = [];\n          }\n          return this;\n        },\n        // Disable .fire and .add\n        // Abort any current/pending executions\n        // Clear all callbacks and values\n        disable: function disable() {\n          _locked = queue = [];\n          list = memory = "";\n          return this;\n        },\n        disabled: function disabled() {\n          return !list;\n        },\n        // Disable .fire\n        // Also disable .add unless we have memory (since it would have no effect)\n        // Abort any pending executions\n        lock: function lock() {\n          _locked = queue = [];\n          if (!memory && !firing) {\n            list = memory = "";\n          }\n          return this;\n        },\n        locked: function locked() {\n          return !!_locked;\n        },\n        // Call all callbacks with the given context and arguments\n        fireWith: function fireWith(context, args) {\n          if (!_locked) {\n            args = args || [];\n            args = [context, args.slice ? args.slice() : args];\n            queue.push(args);\n            if (!firing) {\n              fire();\n            }\n          }\n          return this;\n        },\n        // Call all the callbacks with the given arguments\n        fire: function fire() {\n          self.fireWith(this, arguments);\n          return this;\n        },\n        // To know if the callbacks have already been called at least once\n        fired: function fired() {\n          return !!_fired;\n        }\n      };\n    return self;\n  };\n  function Identity(v) {\n    return v;\n  }\n  function Thrower(ex) {\n    throw ex;\n  }\n  function adoptValue(value, resolve, reject, noValue) {\n    var method;\n    try {\n      // Check for promise aspect first to privilege synchronous behavior\n      if (value && isFunction(method = value.promise)) {\n        method.call(value).done(resolve).fail(reject);\n\n        // Other thenables\n      } else if (value && isFunction(method = value.then)) {\n        method.call(value, resolve, reject);\n\n        // Other non-thenables\n      } else {\n        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n        // * false: [ value ].slice( 0 ) => resolve( value )\n        // * true: [ value ].slice( 1 ) => resolve()\n        resolve.apply(undefined, [value].slice(noValue));\n      }\n\n      // For Promises/A+, convert exceptions into rejections\n      // Since jQuery.when doesn\'t unwrap thenables, we can skip the extra checks appearing in\n      // Deferred#then to conditionally suppress rejection.\n    } catch (value) {\n      // Support: Android 4.0 only\n      // Strict mode functions invoked without .call/.apply get global-object context\n      reject.apply(undefined, [value]);\n    }\n  }\n  jQuery.extend({\n    Deferred: function Deferred(func) {\n      var tuples = [\n        // action, add listener, callbacks,\n        // ... .then handlers, argument index, [final state]\n        ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],\n        _state = "pending",\n        _promise = {\n          state: function state() {\n            return _state;\n          },\n          always: function always() {\n            deferred.done(arguments).fail(arguments);\n            return this;\n          },\n          "catch": function _catch(fn) {\n            return _promise.then(null, fn);\n          },\n          // Keep pipe for back-compat\n          pipe: function pipe( /* fnDone, fnFail, fnProgress */\n          ) {\n            var fns = arguments;\n            return jQuery.Deferred(function (newDefer) {\n              jQuery.each(tuples, function (_i, tuple) {\n                // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n                var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];\n\n                // deferred.progress(function() { bind to newDefer or newDefer.notify })\n                // deferred.done(function() { bind to newDefer or newDefer.resolve })\n                // deferred.fail(function() { bind to newDefer or newDefer.reject })\n                deferred[tuple[1]](function () {\n                  var returned = fn && fn.apply(this, arguments);\n                  if (returned && isFunction(returned.promise)) {\n                    returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                  } else {\n                    newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);\n                  }\n                });\n              });\n              fns = null;\n            }).promise();\n          },\n          then: function then(onFulfilled, onRejected, onProgress) {\n            var maxDepth = 0;\n            function resolve(depth, deferred, handler, special) {\n              return function () {\n                var that = this,\n                  args = arguments,\n                  mightThrow = function mightThrow() {\n                    var returned, then;\n\n                    // Support: Promises/A+ section 2.3.3.3.3\n                    // https://promisesaplus.com/#point-59\n                    // Ignore double-resolution attempts\n                    if (depth < maxDepth) {\n                      return;\n                    }\n                    returned = handler.apply(that, args);\n\n                    // Support: Promises/A+ section 2.3.1\n                    // https://promisesaplus.com/#point-48\n                    if (returned === deferred.promise()) {\n                      throw new TypeError("Thenable self-resolution");\n                    }\n\n                    // Support: Promises/A+ sections 2.3.3.1, 3.5\n                    // https://promisesaplus.com/#point-54\n                    // https://promisesaplus.com/#point-75\n                    // Retrieve `then` only once\n                    then = returned && (\n                    // Support: Promises/A+ section 2.3.4\n                    // https://promisesaplus.com/#point-64\n                    // Only check objects and functions for thenability\n                    _typeof(returned) === "object" || typeof returned === "function") && returned.then;\n\n                    // Handle a returned thenable\n                    if (isFunction(then)) {\n                      // Special processors (notify) just wait for resolution\n                      if (special) {\n                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));\n\n                        // Normal processors (resolve) also hook into progress\n                      } else {\n                        // ...and disregard older resolution values\n                        maxDepth++;\n                        then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                      }\n\n                      // Handle all other returned values\n                    } else {\n                      // Only substitute handlers pass on context\n                      // and multiple values (non-spec behavior)\n                      if (handler !== Identity) {\n                        that = undefined;\n                        args = [returned];\n                      }\n\n                      // Process the value(s)\n                      // Default process is resolve\n                      (special || deferred.resolveWith)(that, args);\n                    }\n                  },\n                  // Only normal processors (resolve) catch and reject exceptions\n                  process = special ? mightThrow : function () {\n                    try {\n                      mightThrow();\n                    } catch (e) {\n                      if (jQuery.Deferred.exceptionHook) {\n                        jQuery.Deferred.exceptionHook(e, process.error);\n                      }\n\n                      // Support: Promises/A+ section 2.3.3.3.4.1\n                      // https://promisesaplus.com/#point-61\n                      // Ignore post-resolution exceptions\n                      if (depth + 1 >= maxDepth) {\n                        // Only substitute handlers pass on context\n                        // and multiple values (non-spec behavior)\n                        if (handler !== Thrower) {\n                          that = undefined;\n                          args = [e];\n                        }\n                        deferred.rejectWith(that, args);\n                      }\n                    }\n                  };\n\n                // Support: Promises/A+ section 2.3.3.3.1\n                // https://promisesaplus.com/#point-57\n                // Re-resolve promises immediately to dodge false rejection from\n                // subsequent errors\n                if (depth) {\n                  process();\n                } else {\n                  // Call an optional hook to record the error, in case of exception\n                  // since it\'s otherwise lost when execution goes async\n                  if (jQuery.Deferred.getErrorHook) {\n                    process.error = jQuery.Deferred.getErrorHook();\n\n                    // The deprecated alias of the above. While the name suggests\n                    // returning the stack, not an error instance, jQuery just passes\n                    // it directly to `console.warn` so both will work; an instance\n                    // just better cooperates with source maps.\n                  } else if (jQuery.Deferred.getStackHook) {\n                    process.error = jQuery.Deferred.getStackHook();\n                  }\n                  window.setTimeout(process);\n                }\n              };\n            }\n            return jQuery.Deferred(function (newDefer) {\n              // progress_handlers.add( ... )\n              tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));\n\n              // fulfilled_handlers.add( ... )\n              tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity));\n\n              // rejected_handlers.add( ... )\n              tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));\n            }).promise();\n          },\n          // Get a promise for this deferred\n          // If obj is provided, the promise aspect is added to the object\n          promise: function promise(obj) {\n            return obj != null ? jQuery.extend(obj, _promise) : _promise;\n          }\n        },\n        deferred = {};\n\n      // Add list-specific methods\n      jQuery.each(tuples, function (i, tuple) {\n        var list = tuple[2],\n          stateString = tuple[5];\n\n        // promise.progress = list.add\n        // promise.done = list.add\n        // promise.fail = list.add\n        _promise[tuple[1]] = list.add;\n\n        // Handle state\n        if (stateString) {\n          list.add(function () {\n            // state = "resolved" (i.e., fulfilled)\n            // state = "rejected"\n            _state = stateString;\n          },\n          // rejected_callbacks.disable\n          // fulfilled_callbacks.disable\n          tuples[3 - i][2].disable,\n          // rejected_handlers.disable\n          // fulfilled_handlers.disable\n          tuples[3 - i][3].disable,\n          // progress_callbacks.lock\n          tuples[0][2].lock,\n          // progress_handlers.lock\n          tuples[0][3].lock);\n        }\n\n        // progress_handlers.fire\n        // fulfilled_handlers.fire\n        // rejected_handlers.fire\n        list.add(tuple[3].fire);\n\n        // deferred.notify = function() { deferred.notifyWith(...) }\n        // deferred.resolve = function() { deferred.resolveWith(...) }\n        // deferred.reject = function() { deferred.rejectWith(...) }\n        deferred[tuple[0]] = function () {\n          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);\n          return this;\n        };\n\n        // deferred.notifyWith = list.fireWith\n        // deferred.resolveWith = list.fireWith\n        // deferred.rejectWith = list.fireWith\n        deferred[tuple[0] + "With"] = list.fireWith;\n      });\n\n      // Make the deferred a promise\n      _promise.promise(deferred);\n\n      // Call given func if any\n      if (func) {\n        func.call(deferred, deferred);\n      }\n\n      // All done!\n      return deferred;\n    },\n    // Deferred helper\n    when: function when(singleValue) {\n      var\n        // count of uncompleted subordinates\n        remaining = arguments.length,\n        // count of unprocessed arguments\n        i = remaining,\n        // subordinate fulfillment data\n        resolveContexts = Array(i),\n        resolveValues = _slice.call(arguments),\n        // the primary Deferred\n        primary = jQuery.Deferred(),\n        // subordinate callback factory\n        updateFunc = function updateFunc(i) {\n          return function (value) {\n            resolveContexts[i] = this;\n            resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n            if (! --remaining) {\n              primary.resolveWith(resolveContexts, resolveValues);\n            }\n          };\n        };\n\n      // Single- and empty arguments are adopted like Promise.resolve\n      if (remaining <= 1) {\n        adoptValue(singleValue, primary.done(updateFunc(i)).resolve, primary.reject, !remaining);\n\n        // Use .then() to unwrap secondary thenables (cf. gh-3000)\n        if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {\n          return primary.then();\n        }\n      }\n\n      // Multiple arguments are aggregated like Promise.all array elements\n      while (i--) {\n        adoptValue(resolveValues[i], updateFunc(i), primary.reject);\n      }\n      return primary.promise();\n    }\n  });\n\n  // These usually indicate a programmer mistake during development,\n  // warn about them ASAP rather than swallowing them by default.\n  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n  // If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error\n  // captured before the async barrier to get the original error cause\n  // which may otherwise be hidden.\n  jQuery.Deferred.exceptionHook = function (error, asyncError) {\n    // Support: IE 8 - 9 only\n    // Console exists when dev tools are open, which can happen at any time\n    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, asyncError);\n    }\n  };\n  jQuery.readyException = function (error) {\n    window.setTimeout(function () {\n      throw error;\n    });\n  };\n\n  // The deferred used on DOM ready\n  var readyList = jQuery.Deferred();\n  jQuery.fn.ready = function (fn) {\n    readyList.then(fn)\n\n    // Wrap jQuery.readyException in a function so that the lookup\n    // happens at the time of error handling instead of callback\n    // registration.\n    .catch(function (error) {\n      jQuery.readyException(error);\n    });\n    return this;\n  };\n  jQuery.extend({\n    // Is the DOM ready to be used? Set to true once it occurs.\n    isReady: false,\n    // A counter to track how many items to wait for before\n    // the ready event fires. See trac-6781\n    readyWait: 1,\n    // Handle when the DOM is ready\n    ready: function ready(wait) {\n      // Abort if there are pending holds or we\'re already ready\n      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n        return;\n      }\n\n      // Remember that the DOM is ready\n      jQuery.isReady = true;\n\n      // If a normal DOM Ready event fired, decrement, and wait if need be\n      if (wait !== true && --jQuery.readyWait > 0) {\n        return;\n      }\n\n      // If there are functions bound, to execute\n      readyList.resolveWith(document, [jQuery]);\n    }\n  });\n  jQuery.ready.then = readyList.then;\n\n  // The ready event handler and self cleanup method\n  function completed() {\n    document.removeEventListener("DOMContentLoaded", completed);\n    window.removeEventListener("load", completed);\n    jQuery.ready();\n  }\n\n  // Catch cases where $(document).ready() is called\n  // after the browser event has already occurred.\n  // Support: IE <=9 - 10 only\n  // Older IE sometimes signals "interactive" too soon\n  if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {\n    // Handle it asynchronously to allow scripts the opportunity to delay ready\n    window.setTimeout(jQuery.ready);\n  } else {\n    // Use the handy event callback\n    document.addEventListener("DOMContentLoaded", completed);\n\n    // A fallback to window.onload, that will always work\n    window.addEventListener("load", completed);\n  }\n\n  // Multifunctional method to get and set values of a collection\n  // The value/s can optionally be executed if it\'s a function\n  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n    var i = 0,\n      len = elems.length,\n      bulk = key == null;\n\n    // Sets many values\n    if (toType(key) === "object") {\n      chainable = true;\n      for (i in key) {\n        access(elems, fn, i, key[i], true, emptyGet, raw);\n      }\n\n      // Sets one value\n    } else if (value !== undefined) {\n      chainable = true;\n      if (!isFunction(value)) {\n        raw = true;\n      }\n      if (bulk) {\n        // Bulk operations run against the entire set\n        if (raw) {\n          fn.call(elems, value);\n          fn = null;\n\n          // ...except when executing function values\n        } else {\n          bulk = fn;\n          fn = function fn(elem, _key, value) {\n            return bulk.call(jQuery(elem), value);\n          };\n        }\n      }\n      if (fn) {\n        for (; i < len; i++) {\n          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n        }\n      }\n    }\n    if (chainable) {\n      return elems;\n    }\n\n    // Gets\n    if (bulk) {\n      return fn.call(elems);\n    }\n    return len ? fn(elems[0], key) : emptyGet;\n  };\n\n  // Matches dashed string for camelizing\n  var rmsPrefix = /^-ms-/,\n    rdashAlpha = /-([a-z])/g;\n\n  // Used by camelCase as callback to replace()\n  function fcamelCase(_all, letter) {\n    return letter.toUpperCase();\n  }\n\n  // Convert dashed to camelCase; used by the css and data modules\n  // Support: IE <=9 - 11, Edge 12 - 15\n  // Microsoft forgot to hump their vendor prefix (trac-9572)\n  function camelCase(string) {\n    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);\n  }\n  var acceptData = function acceptData(owner) {\n    // Accepts only:\n    //  - Node\n    //    - Node.ELEMENT_NODE\n    //    - Node.DOCUMENT_NODE\n    //  - Object\n    //    - Any\n    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n  };\n  function Data() {\n    this.expando = jQuery.expando + Data.uid++;\n  }\n  Data.uid = 1;\n  Data.prototype = {\n    cache: function cache(owner) {\n      // Check if the owner object already has a cache\n      var value = owner[this.expando];\n\n      // If not, create one\n      if (!value) {\n        value = {};\n\n        // We can accept data for non-element nodes in modern browsers,\n        // but we should not, see trac-8335.\n        // Always return an empty object.\n        if (acceptData(owner)) {\n          // If it is a node unlikely to be stringify-ed or looped over\n          // use plain assignment\n          if (owner.nodeType) {\n            owner[this.expando] = value;\n\n            // Otherwise secure it in a non-enumerable property\n            // configurable must be true to allow the property to be\n            // deleted when data is removed\n          } else {\n            Object.defineProperty(owner, this.expando, {\n              value: value,\n              configurable: true\n            });\n          }\n        }\n      }\n      return value;\n    },\n    set: function set(owner, data, value) {\n      var prop,\n        cache = this.cache(owner);\n\n      // Handle: [ owner, key, value ] args\n      // Always use camelCase key (gh-2257)\n      if (typeof data === "string") {\n        cache[camelCase(data)] = value;\n\n        // Handle: [ owner, { properties } ] args\n      } else {\n        // Copy the properties one-by-one to the cache object\n        for (prop in data) {\n          cache[camelCase(prop)] = data[prop];\n        }\n      }\n      return cache;\n    },\n    get: function get(owner, key) {\n      return key === undefined ? this.cache(owner) :\n      // Always use camelCase key (gh-2257)\n      owner[this.expando] && owner[this.expando][camelCase(key)];\n    },\n    access: function access(owner, key, value) {\n      // In cases where either:\n      //\n      //   1. No key was specified\n      //   2. A string key was specified, but no value provided\n      //\n      // Take the "read" path and allow the get method to determine\n      // which value to return, respectively either:\n      //\n      //   1. The entire cache object\n      //   2. The data stored at the key\n      //\n      if (key === undefined || key && typeof key === "string" && value === undefined) {\n        return this.get(owner, key);\n      }\n\n      // When the key is not a string, or both a key and value\n      // are specified, set or extend (existing objects) with either:\n      //\n      //   1. An object of properties\n      //   2. A key and value\n      //\n      this.set(owner, key, value);\n\n      // Since the "set" path can have two possible entry points\n      // return the expected data based on which path was taken[*]\n      return value !== undefined ? value : key;\n    },\n    remove: function remove(owner, key) {\n      var i,\n        cache = owner[this.expando];\n      if (cache === undefined) {\n        return;\n      }\n      if (key !== undefined) {\n        // Support array or space separated string of keys\n        if (Array.isArray(key)) {\n          // If key is an array of keys...\n          // We always set camelCase keys, so remove that.\n          key = key.map(camelCase);\n        } else {\n          key = camelCase(key);\n\n          // If a key with the spaces exists, use it.\n          // Otherwise, create an array by matching non-whitespace\n          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n        }\n        i = key.length;\n        while (i--) {\n          delete cache[key[i]];\n        }\n      }\n\n      // Remove the expando if there\'s no more data\n      if (key === undefined || jQuery.isEmptyObject(cache)) {\n        // Support: Chrome <=35 - 45\n        // Webkit & Blink performance suffers when deleting properties\n        // from DOM nodes, so set to undefined instead\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n        if (owner.nodeType) {\n          owner[this.expando] = undefined;\n        } else {\n          delete owner[this.expando];\n        }\n      }\n    },\n    hasData: function hasData(owner) {\n      var cache = owner[this.expando];\n      return cache !== undefined && !jQuery.isEmptyObject(cache);\n    }\n  };\n  var dataPriv = new Data();\n  var dataUser = new Data();\n\n  //\tImplementation Summary\n  //\n  //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n  //\t2. Improve the module\'s maintainability by reducing the storage\n  //\t\tpaths to a single mechanism.\n  //\t3. Use the same single mechanism to support "private" and "user" data.\n  //\t4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n  //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n  //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n  var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n    rmultiDash = /[A-Z]/g;\n  function getData(data) {\n    if (data === "true") {\n      return true;\n    }\n    if (data === "false") {\n      return false;\n    }\n    if (data === "null") {\n      return null;\n    }\n\n    // Only convert to a number if it doesn\'t change the string\n    if (data === +data + "") {\n      return +data;\n    }\n    if (rbrace.test(data)) {\n      return JSON.parse(data);\n    }\n    return data;\n  }\n  function dataAttr(elem, key, data) {\n    var name;\n\n    // If nothing was found internally, try to fetch any\n    // data from the HTML5 data-* attribute\n    if (data === undefined && elem.nodeType === 1) {\n      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();\n      data = elem.getAttribute(name);\n      if (typeof data === "string") {\n        try {\n          data = getData(data);\n        } catch (e) {}\n\n        // Make sure we set the data so it isn\'t changed later\n        dataUser.set(elem, key, data);\n      } else {\n        data = undefined;\n      }\n    }\n    return data;\n  }\n  jQuery.extend({\n    hasData: function hasData(elem) {\n      return dataUser.hasData(elem) || dataPriv.hasData(elem);\n    },\n    data: function data(elem, name, _data) {\n      return dataUser.access(elem, name, _data);\n    },\n    removeData: function removeData(elem, name) {\n      dataUser.remove(elem, name);\n    },\n    // TODO: Now that all calls to _data and _removeData have been replaced\n    // with direct calls to dataPriv methods, these can be deprecated.\n    _data: function _data(elem, name, data) {\n      return dataPriv.access(elem, name, data);\n    },\n    _removeData: function _removeData(elem, name) {\n      dataPriv.remove(elem, name);\n    }\n  });\n  jQuery.fn.extend({\n    data: function data(key, value) {\n      var i,\n        name,\n        data,\n        elem = this[0],\n        attrs = elem && elem.attributes;\n\n      // Gets all values\n      if (key === undefined) {\n        if (this.length) {\n          data = dataUser.get(elem);\n          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {\n            i = attrs.length;\n            while (i--) {\n              // Support: IE 11 only\n              // The attrs elements can be null (trac-14894)\n              if (attrs[i]) {\n                name = attrs[i].name;\n                if (name.indexOf("data-") === 0) {\n                  name = camelCase(name.slice(5));\n                  dataAttr(elem, name, data[name]);\n                }\n              }\n            }\n            dataPriv.set(elem, "hasDataAttrs", true);\n          }\n        }\n        return data;\n      }\n\n      // Sets multiple values\n      if (_typeof(key) === "object") {\n        return this.each(function () {\n          dataUser.set(this, key);\n        });\n      }\n      return access(this, function (value) {\n        var data;\n\n        // The calling jQuery object (element matches) is not empty\n        // (and therefore has an element appears at this[ 0 ]) and the\n        // `value` parameter was not undefined. An empty jQuery object\n        // will result in `undefined` for elem = this[ 0 ] which will\n        // throw an exception if an attempt to read a data cache is made.\n        if (elem && value === undefined) {\n          // Attempt to get data from the cache\n          // The key will always be camelCased in Data\n          data = dataUser.get(elem, key);\n          if (data !== undefined) {\n            return data;\n          }\n\n          // Attempt to "discover" the data in\n          // HTML5 custom data-* attrs\n          data = dataAttr(elem, key);\n          if (data !== undefined) {\n            return data;\n          }\n\n          // We tried really hard, but the data doesn\'t exist.\n          return;\n        }\n\n        // Set the data...\n        this.each(function () {\n          // We always store the camelCased key\n          dataUser.set(this, key, value);\n        });\n      }, null, value, arguments.length > 1, null, true);\n    },\n    removeData: function removeData(key) {\n      return this.each(function () {\n        dataUser.remove(this, key);\n      });\n    }\n  });\n  jQuery.extend({\n    queue: function queue(elem, type, data) {\n      var queue;\n      if (elem) {\n        type = (type || "fx") + "queue";\n        queue = dataPriv.get(elem, type);\n\n        // Speed up dequeue by getting out quickly if this is just a lookup\n        if (data) {\n          if (!queue || Array.isArray(data)) {\n            queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n          } else {\n            queue.push(data);\n          }\n        }\n        return queue || [];\n      }\n    },\n    dequeue: function dequeue(elem, type) {\n      type = type || "fx";\n      var queue = jQuery.queue(elem, type),\n        startLength = queue.length,\n        fn = queue.shift(),\n        hooks = jQuery._queueHooks(elem, type),\n        next = function next() {\n          jQuery.dequeue(elem, type);\n        };\n\n      // If the fx queue is dequeued, always remove the progress sentinel\n      if (fn === "inprogress") {\n        fn = queue.shift();\n        startLength--;\n      }\n      if (fn) {\n        // Add a progress sentinel to prevent the fx queue from being\n        // automatically dequeued\n        if (type === "fx") {\n          queue.unshift("inprogress");\n        }\n\n        // Clear up the last queue stop function\n        delete hooks.stop;\n        fn.call(elem, next, hooks);\n      }\n      if (!startLength && hooks) {\n        hooks.empty.fire();\n      }\n    },\n    // Not public - generate a queueHooks object, or return the current one\n    _queueHooks: function _queueHooks(elem, type) {\n      var key = type + "queueHooks";\n      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n        empty: jQuery.Callbacks("once memory").add(function () {\n          dataPriv.remove(elem, [type + "queue", key]);\n        })\n      });\n    }\n  });\n  jQuery.fn.extend({\n    queue: function queue(type, data) {\n      var setter = 2;\n      if (typeof type !== "string") {\n        data = type;\n        type = "fx";\n        setter--;\n      }\n      if (arguments.length < setter) {\n        return jQuery.queue(this[0], type);\n      }\n      return data === undefined ? this : this.each(function () {\n        var queue = jQuery.queue(this, type, data);\n\n        // Ensure a hooks for this queue\n        jQuery._queueHooks(this, type);\n        if (type === "fx" && queue[0] !== "inprogress") {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    dequeue: function dequeue(type) {\n      return this.each(function () {\n        jQuery.dequeue(this, type);\n      });\n    },\n    clearQueue: function clearQueue(type) {\n      return this.queue(type || "fx", []);\n    },\n    // Get a promise resolved when queues of a certain type\n    // are emptied (fx is the type by default)\n    promise: function promise(type, obj) {\n      var tmp,\n        count = 1,\n        defer = jQuery.Deferred(),\n        elements = this,\n        i = this.length,\n        resolve = function resolve() {\n          if (! --count) {\n            defer.resolveWith(elements, [elements]);\n          }\n        };\n      if (typeof type !== "string") {\n        obj = type;\n        type = undefined;\n      }\n      type = type || "fx";\n      while (i--) {\n        tmp = dataPriv.get(elements[i], type + "queueHooks");\n        if (tmp && tmp.empty) {\n          count++;\n          tmp.empty.add(resolve);\n        }\n      }\n      resolve();\n      return defer.promise(obj);\n    }\n  });\n  var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");\n  var cssExpand = ["Top", "Right", "Bottom", "Left"];\n  var documentElement = document.documentElement;\n  var isAttached = function isAttached(elem) {\n      return jQuery.contains(elem.ownerDocument, elem);\n    },\n    composed = {\n      composed: true\n    };\n\n  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n  // Check attachment across shadow DOM boundaries when possible (gh-3504)\n  // Support: iOS 10.0-10.2 only\n  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n  // leading to errors. We need to check for `getRootNode`.\n  if (documentElement.getRootNode) {\n    isAttached = function isAttached(elem) {\n      return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;\n    };\n  }\n  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\n    // isHiddenWithinTree might be called from jQuery#filter function;\n    // in that case, element will be second argument\n    elem = el || elem;\n\n    // Inline style trumps all\n    return elem.style.display === "none" || elem.style.display === "" &&\n    // Otherwise, check computed style\n    // Support: Firefox <=43 - 45\n    // Disconnected elements can have computed display: none, so first confirm that elem is\n    // in the document.\n    isAttached(elem) && jQuery.css(elem, "display") === "none";\n  };\n  function adjustCSS(elem, prop, valueParts, tween) {\n    var adjusted,\n      scale,\n      maxIterations = 20,\n      currentValue = tween ? function () {\n        return tween.cur();\n      } : function () {\n        return jQuery.css(elem, prop, "");\n      },\n      initial = currentValue(),\n      unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),\n      // Starting value computation is required for potential unit mismatches\n      initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n    if (initialInUnit && initialInUnit[3] !== unit) {\n      // Support: Firefox <=54\n      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n      initial = initial / 2;\n\n      // Trust units reported by jQuery.css\n      unit = unit || initialInUnit[3];\n\n      // Iteratively approximate from a nonzero starting point\n      initialInUnit = +initial || 1;\n      while (maxIterations--) {\n        // Evaluate and update our best guess (doubling guesses that zero out).\n        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n        jQuery.style(elem, prop, initialInUnit + unit);\n        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {\n          maxIterations = 0;\n        }\n        initialInUnit = initialInUnit / scale;\n      }\n      initialInUnit = initialInUnit * 2;\n      jQuery.style(elem, prop, initialInUnit + unit);\n\n      // Make sure we update the tween properties later on\n      valueParts = valueParts || [];\n    }\n    if (valueParts) {\n      initialInUnit = +initialInUnit || +initial || 0;\n\n      // Apply relative offset (+=/-=) if specified\n      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n      if (tween) {\n        tween.unit = unit;\n        tween.start = initialInUnit;\n        tween.end = adjusted;\n      }\n    }\n    return adjusted;\n  }\n  var defaultDisplayMap = {};\n  function getDefaultDisplay(elem) {\n    var temp,\n      doc = elem.ownerDocument,\n      nodeName = elem.nodeName,\n      display = defaultDisplayMap[nodeName];\n    if (display) {\n      return display;\n    }\n    temp = doc.body.appendChild(doc.createElement(nodeName));\n    display = jQuery.css(temp, "display");\n    temp.parentNode.removeChild(temp);\n    if (display === "none") {\n      display = "block";\n    }\n    defaultDisplayMap[nodeName] = display;\n    return display;\n  }\n  function showHide(elements, show) {\n    var display,\n      elem,\n      values = [],\n      index = 0,\n      length = elements.length;\n\n    // Determine new display value for elements that need to change\n    for (; index < length; index++) {\n      elem = elements[index];\n      if (!elem.style) {\n        continue;\n      }\n      display = elem.style.display;\n      if (show) {\n        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n        // check is required in this first loop unless we have a nonempty display value (either\n        // inline or about-to-be-restored)\n        if (display === "none") {\n          values[index] = dataPriv.get(elem, "display") || null;\n          if (!values[index]) {\n            elem.style.display = "";\n          }\n        }\n        if (elem.style.display === "" && isHiddenWithinTree(elem)) {\n          values[index] = getDefaultDisplay(elem);\n        }\n      } else {\n        if (display !== "none") {\n          values[index] = "none";\n\n          // Remember what we\'re overwriting\n          dataPriv.set(elem, "display", display);\n        }\n      }\n    }\n\n    // Set the display of the elements in a second loop to avoid constant reflow\n    for (index = 0; index < length; index++) {\n      if (values[index] != null) {\n        elements[index].style.display = values[index];\n      }\n    }\n    return elements;\n  }\n  jQuery.fn.extend({\n    show: function show() {\n      return showHide(this, true);\n    },\n    hide: function hide() {\n      return showHide(this);\n    },\n    toggle: function toggle(state) {\n      if (typeof state === "boolean") {\n        return state ? this.show() : this.hide();\n      }\n      return this.each(function () {\n        if (isHiddenWithinTree(this)) {\n          jQuery(this).show();\n        } else {\n          jQuery(this).hide();\n        }\n      });\n    }\n  });\n  var rcheckableType = /^(?:checkbox|radio)$/i;\n  var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;\n  var rscriptType = /^$|^module$|\\/(?:java|ecma)script/i;\n  (function () {\n    var fragment = document.createDocumentFragment(),\n      div = fragment.appendChild(document.createElement("div")),\n      input = document.createElement("input");\n\n    // Support: Android 4.0 - 4.3 only\n    // Check state lost if the name is set (trac-11217)\n    // Support: Windows Web Apps (WWA)\n    // `name` and `type` must use .setAttribute for WWA (trac-14901)\n    input.setAttribute("type", "radio");\n    input.setAttribute("checked", "checked");\n    input.setAttribute("name", "t");\n    div.appendChild(input);\n\n    // Support: Android <=4.1 only\n    // Older WebKit doesn\'t clone checked state correctly in fragments\n    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;\n\n    // Support: IE <=11 only\n    // Make sure textarea (and checkbox) defaultValue is properly cloned\n    div.innerHTML = "<textarea>x</textarea>";\n    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n\n    // Support: IE <=9 only\n    // IE <=9 replaces <option> tags with their contents when inserted outside of\n    // the select element.\n    div.innerHTML = "<option></option>";\n    support.option = !!div.lastChild;\n  })();\n\n  // We have to close these tags to support XHTML (trac-13200)\n  var wrapMap = {\n    // XHTML parsers do not magically insert elements in the\n    // same way that tag soup parsers do. So we cannot shorten\n    // this by omitting <tbody> or other required elements.\n    thead: [1, "<table>", "</table>"],\n    col: [2, "<table><colgroup>", "</colgroup></table>"],\n    tr: [2, "<table><tbody>", "</tbody></table>"],\n    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],\n    _default: [0, "", ""]\n  };\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td;\n\n  // Support: IE <=9 only\n  if (!support.option) {\n    wrapMap.optgroup = wrapMap.option = [1, "<select multiple=\'multiple\'>", "</select>"];\n  }\n  function getAll(context, tag) {\n    // Support: IE <=9 - 11 only\n    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n    var ret;\n    if (typeof context.getElementsByTagName !== "undefined") {\n      ret = context.getElementsByTagName(tag || "*");\n    } else if (typeof context.querySelectorAll !== "undefined") {\n      ret = context.querySelectorAll(tag || "*");\n    } else {\n      ret = [];\n    }\n    if (tag === undefined || tag && nodeName(context, tag)) {\n      return jQuery.merge([context], ret);\n    }\n    return ret;\n  }\n\n  // Mark scripts as having already been evaluated\n  function setGlobalEval(elems, refElements) {\n    var i = 0,\n      l = elems.length;\n    for (; i < l; i++) {\n      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));\n    }\n  }\n  var rhtml = /<|&#?\\w+;/;\n  function buildFragment(elems, context, scripts, selection, ignored) {\n    var elem,\n      tmp,\n      tag,\n      wrap,\n      attached,\n      j,\n      fragment = context.createDocumentFragment(),\n      nodes = [],\n      i = 0,\n      l = elems.length;\n    for (; i < l; i++) {\n      elem = elems[i];\n      if (elem || elem === 0) {\n        // Add nodes directly\n        if (toType(elem) === "object") {\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);\n\n          // Convert non-html into a text node\n        } else if (!rhtml.test(elem)) {\n          nodes.push(context.createTextNode(elem));\n\n          // Convert html into DOM nodes\n        } else {\n          tmp = tmp || fragment.appendChild(context.createElement("div"));\n\n          // Deserialize a standard representation\n          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();\n          wrap = wrapMap[tag] || wrapMap._default;\n          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];\n\n          // Descend through wrappers to the right content\n          j = wrap[0];\n          while (j--) {\n            tmp = tmp.lastChild;\n          }\n\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          jQuery.merge(nodes, tmp.childNodes);\n\n          // Remember the top-level container\n          tmp = fragment.firstChild;\n\n          // Ensure the created nodes are orphaned (trac-12392)\n          tmp.textContent = "";\n        }\n      }\n    }\n\n    // Remove wrapper from fragment\n    fragment.textContent = "";\n    i = 0;\n    while (elem = nodes[i++]) {\n      // Skip elements already in the context collection (trac-4087)\n      if (selection && jQuery.inArray(elem, selection) > -1) {\n        if (ignored) {\n          ignored.push(elem);\n        }\n        continue;\n      }\n      attached = isAttached(elem);\n\n      // Append to fragment\n      tmp = getAll(fragment.appendChild(elem), "script");\n\n      // Preserve script evaluation history\n      if (attached) {\n        setGlobalEval(tmp);\n      }\n\n      // Capture executables\n      if (scripts) {\n        j = 0;\n        while (elem = tmp[j++]) {\n          if (rscriptType.test(elem.type || "")) {\n            scripts.push(elem);\n          }\n        }\n      }\n    }\n    return fragment;\n  }\n  var rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n  function returnTrue() {\n    return true;\n  }\n  function returnFalse() {\n    return false;\n  }\n  function _on(elem, types, selector, data, fn, one) {\n    var origFn, type;\n\n    // Types can be a map of types/handlers\n    if (_typeof(types) === "object") {\n      // ( types-Object, selector, data )\n      if (typeof selector !== "string") {\n        // ( types-Object, data )\n        data = data || selector;\n        selector = undefined;\n      }\n      for (type in types) {\n        _on(elem, type, selector, data, types[type], one);\n      }\n      return elem;\n    }\n    if (data == null && fn == null) {\n      // ( types, fn )\n      fn = selector;\n      data = selector = undefined;\n    } else if (fn == null) {\n      if (typeof selector === "string") {\n        // ( types, selector, fn )\n        fn = data;\n        data = undefined;\n      } else {\n        // ( types, data, fn )\n        fn = data;\n        data = selector;\n        selector = undefined;\n      }\n    }\n    if (fn === false) {\n      fn = returnFalse;\n    } else if (!fn) {\n      return elem;\n    }\n    if (one === 1) {\n      origFn = fn;\n      fn = function fn(event) {\n        // Can use an empty set, since event contains the info\n        jQuery().off(event);\n        return origFn.apply(this, arguments);\n      };\n\n      // Use same guid so caller can remove using origFn\n      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n    }\n    return elem.each(function () {\n      jQuery.event.add(this, types, fn, data, selector);\n    });\n  }\n\n  /*\n   * Helper functions for managing events -- not part of the public interface.\n   * Props to Dean Edwards\' addEvent library for many of the ideas.\n   */\n  jQuery.event = {\n    global: {},\n    add: function add(elem, types, handler, data, selector) {\n      var handleObjIn,\n        eventHandle,\n        tmp,\n        events,\n        t,\n        handleObj,\n        special,\n        handlers,\n        type,\n        namespaces,\n        origType,\n        elemData = dataPriv.get(elem);\n\n      // Only attach events to objects that accept data\n      if (!acceptData(elem)) {\n        return;\n      }\n\n      // Caller can pass in an object of custom data in lieu of the handler\n      if (handler.handler) {\n        handleObjIn = handler;\n        handler = handleObjIn.handler;\n        selector = handleObjIn.selector;\n      }\n\n      // Ensure that invalid selectors throw exceptions at attach time\n      // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n      if (selector) {\n        jQuery.find.matchesSelector(documentElement, selector);\n      }\n\n      // Make sure that the handler has a unique ID, used to find/remove it later\n      if (!handler.guid) {\n        handler.guid = jQuery.guid++;\n      }\n\n      // Init the element\'s event structure and main handler, if this is the first\n      if (!(events = elemData.events)) {\n        events = elemData.events = Object.create(null);\n      }\n      if (!(eventHandle = elemData.handle)) {\n        eventHandle = elemData.handle = function (e) {\n          // Discard the second event of a jQuery.event.trigger() and\n          // when an event is called after a page has unloaded\n          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n        };\n      }\n\n      // Handle multiple events separated by a space\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort();\n\n        // There *must* be a type, no attaching namespace-only handlers\n        if (!type) {\n          continue;\n        }\n\n        // If event changes its type, use the special event handlers for the changed type\n        special = jQuery.event.special[type] || {};\n\n        // If selector defined, determine special event api type, otherwise given type\n        type = (selector ? special.delegateType : special.bindType) || type;\n\n        // Update special based on newly reset type\n        special = jQuery.event.special[type] || {};\n\n        // handleObj is passed to all event handlers\n        handleObj = jQuery.extend({\n          type: type,\n          origType: origType,\n          data: data,\n          handler: handler,\n          guid: handler.guid,\n          selector: selector,\n          needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n          namespace: namespaces.join(".")\n        }, handleObjIn);\n\n        // Init the event handler queue if we\'re the first\n        if (!(handlers = events[type])) {\n          handlers = events[type] = [];\n          handlers.delegateCount = 0;\n\n          // Only use addEventListener if the special events handler returns false\n          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n            if (elem.addEventListener) {\n              elem.addEventListener(type, eventHandle);\n            }\n          }\n        }\n        if (special.add) {\n          special.add.call(elem, handleObj);\n          if (!handleObj.handler.guid) {\n            handleObj.handler.guid = handler.guid;\n          }\n        }\n\n        // Add to the element\'s handler list, delegates in front\n        if (selector) {\n          handlers.splice(handlers.delegateCount++, 0, handleObj);\n        } else {\n          handlers.push(handleObj);\n        }\n\n        // Keep track of which events have ever been used, for event optimization\n        jQuery.event.global[type] = true;\n      }\n    },\n    // Detach an event or set of events from an element\n    remove: function remove(elem, types, handler, selector, mappedTypes) {\n      var j,\n        origCount,\n        tmp,\n        events,\n        t,\n        handleObj,\n        special,\n        handlers,\n        type,\n        namespaces,\n        origType,\n        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n      if (!elemData || !(events = elemData.events)) {\n        return;\n      }\n\n      // Once for each type.namespace in types; type may be omitted\n      types = (types || "").match(rnothtmlwhite) || [""];\n      t = types.length;\n      while (t--) {\n        tmp = rtypenamespace.exec(types[t]) || [];\n        type = origType = tmp[1];\n        namespaces = (tmp[2] || "").split(".").sort();\n\n        // Unbind all events (on this namespace, if provided) for the element\n        if (!type) {\n          for (type in events) {\n            jQuery.event.remove(elem, type + types[t], handler, selector, true);\n          }\n          continue;\n        }\n        special = jQuery.event.special[type] || {};\n        type = (selector ? special.delegateType : special.bindType) || type;\n        handlers = events[type] || [];\n        tmp = tmp[2] && new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)");\n\n        // Remove matching events\n        origCount = j = handlers.length;\n        while (j--) {\n          handleObj = handlers[j];\n          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {\n            handlers.splice(j, 1);\n            if (handleObj.selector) {\n              handlers.delegateCount--;\n            }\n            if (special.remove) {\n              special.remove.call(elem, handleObj);\n            }\n          }\n        }\n\n        // Remove generic event handler if we removed something and no more handlers exist\n        // (avoids potential for endless recursion during removal of special event handlers)\n        if (origCount && !handlers.length) {\n          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n            jQuery.removeEvent(elem, type, elemData.handle);\n          }\n          delete events[type];\n        }\n      }\n\n      // Remove data and the expando if it\'s no longer used\n      if (jQuery.isEmptyObject(events)) {\n        dataPriv.remove(elem, "handle events");\n      }\n    },\n    dispatch: function dispatch(nativeEvent) {\n      var i,\n        j,\n        ret,\n        matched,\n        handleObj,\n        handlerQueue,\n        args = new Array(arguments.length),\n        // Make a writable jQuery.Event from the native event object\n        event = jQuery.event.fix(nativeEvent),\n        handlers = (dataPriv.get(this, "events") || Object.create(null))[event.type] || [],\n        special = jQuery.event.special[event.type] || {};\n\n      // Use the fix-ed jQuery.Event rather than the (read-only) native event\n      args[0] = event;\n      for (i = 1; i < arguments.length; i++) {\n        args[i] = arguments[i];\n      }\n      event.delegateTarget = this;\n\n      // Call the preDispatch hook for the mapped type, and let it bail if desired\n      if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n        return;\n      }\n\n      // Determine handlers\n      handlerQueue = jQuery.event.handlers.call(this, event, handlers);\n\n      // Run delegates first; they may want to stop propagation beneath us\n      i = 0;\n      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n        event.currentTarget = matched.elem;\n        j = 0;\n        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n          // If the event is namespaced, then each handler is only invoked if it is\n          // specially universal or its namespaces are a superset of the event\'s.\n          if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {\n            event.handleObj = handleObj;\n            event.data = handleObj.data;\n            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n            if (ret !== undefined) {\n              if ((event.result = ret) === false) {\n                event.preventDefault();\n                event.stopPropagation();\n              }\n            }\n          }\n        }\n      }\n\n      // Call the postDispatch hook for the mapped type\n      if (special.postDispatch) {\n        special.postDispatch.call(this, event);\n      }\n      return event.result;\n    },\n    handlers: function handlers(event, _handlers) {\n      var i,\n        handleObj,\n        sel,\n        matchedHandlers,\n        matchedSelectors,\n        handlerQueue = [],\n        delegateCount = _handlers.delegateCount,\n        cur = event.target;\n\n      // Find delegate handlers\n      if (delegateCount &&\n      // Support: IE <=9\n      // Black-hole SVG <use> instance trees (trac-13180)\n      cur.nodeType &&\n      // Support: Firefox <=42\n      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n      // Support: IE 11 only\n      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)\n      !(event.type === "click" && event.button >= 1)) {\n        for (; cur !== this; cur = cur.parentNode || this) {\n          // Don\'t check non-elements (trac-13208)\n          // Don\'t process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {\n            matchedHandlers = [];\n            matchedSelectors = {};\n            for (i = 0; i < delegateCount; i++) {\n              handleObj = _handlers[i];\n\n              // Don\'t conflict with Object.prototype properties (trac-13203)\n              sel = handleObj.selector + " ";\n              if (matchedSelectors[sel] === undefined) {\n                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n              }\n              if (matchedSelectors[sel]) {\n                matchedHandlers.push(handleObj);\n              }\n            }\n            if (matchedHandlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: matchedHandlers\n              });\n            }\n          }\n        }\n      }\n\n      // Add the remaining (directly-bound) handlers\n      cur = this;\n      if (delegateCount < _handlers.length) {\n        handlerQueue.push({\n          elem: cur,\n          handlers: _handlers.slice(delegateCount)\n        });\n      }\n      return handlerQueue;\n    },\n    addProp: function addProp(name, hook) {\n      Object.defineProperty(jQuery.Event.prototype, name, {\n        enumerable: true,\n        configurable: true,\n        get: isFunction(hook) ? function () {\n          if (this.originalEvent) {\n            return hook(this.originalEvent);\n          }\n        } : function () {\n          if (this.originalEvent) {\n            return this.originalEvent[name];\n          }\n        },\n        set: function set(value) {\n          Object.defineProperty(this, name, {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n      });\n    },\n    fix: function fix(originalEvent) {\n      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n    },\n    special: {\n      load: {\n        // Prevent triggered image.load events from bubbling to window.load\n        noBubble: true\n      },\n      click: {\n        // Utilize native event to ensure correct state for checkable inputs\n        setup: function setup(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data;\n\n          // Claim the first handler\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            // dataPriv.set( el, "click", ... )\n            leverageNative(el, "click", true);\n          }\n\n          // Return false to allow normal processing in the caller\n          return false;\n        },\n        trigger: function trigger(data) {\n          // For mutual compressibility with _default, replace `this` access with a local var.\n          // `|| data` is dead code meant only to preserve the variable through minification.\n          var el = this || data;\n\n          // Force setup before triggering a click\n          if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {\n            leverageNative(el, "click");\n          }\n\n          // Return non-false to allow normal event-path propagation\n          return true;\n        },\n        // For cross-browser consistency, suppress native .click() on links\n        // Also prevent it if we\'re currently inside a leveraged native-event stack\n        _default: function _default(event) {\n          var target = event.target;\n          return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");\n        }\n      },\n      beforeunload: {\n        postDispatch: function postDispatch(event) {\n          // Support: Firefox 20+\n          // Firefox doesn\'t alert if the returnValue field is not set.\n          if (event.result !== undefined && event.originalEvent) {\n            event.originalEvent.returnValue = event.result;\n          }\n        }\n      }\n    }\n  };\n\n  // Ensure the presence of an event listener that handles manually-triggered\n  // synthetic events by interrupting progress until reinvoked in response to\n  // *native* events that it fires directly, ensuring that state changes have\n  // already occurred before other listeners are invoked.\n  function leverageNative(el, type, isSetup) {\n    // Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add\n    if (!isSetup) {\n      if (dataPriv.get(el, type) === undefined) {\n        jQuery.event.add(el, type, returnTrue);\n      }\n      return;\n    }\n\n    // Register the controller as a special universal handler for all event namespaces\n    dataPriv.set(el, type, false);\n    jQuery.event.add(el, type, {\n      namespace: false,\n      handler: function handler(event) {\n        var result,\n          saved = dataPriv.get(this, type);\n        if (event.isTrigger & 1 && this[type]) {\n          // Interrupt processing of the outer synthetic .trigger()ed event\n          if (!saved) {\n            // Store arguments for use when handling the inner native event\n            // There will always be at least one argument (an event object), so this array\n            // will not be confused with a leftover capture object.\n            saved = _slice.call(arguments);\n            dataPriv.set(this, type, saved);\n\n            // Trigger the native event and capture its result\n            this[type]();\n            result = dataPriv.get(this, type);\n            dataPriv.set(this, type, false);\n            if (saved !== result) {\n              // Cancel the outer synthetic event\n              event.stopImmediatePropagation();\n              event.preventDefault();\n              return result;\n            }\n\n            // If this is an inner synthetic event for an event with a bubbling surrogate\n            // (focus or blur), assume that the surrogate already propagated from triggering\n            // the native event and prevent that from happening again here.\n            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n            // bubbling surrogate propagates *after* the non-bubbling base), but that seems\n            // less bad than duplication.\n          } else if ((jQuery.event.special[type] || {}).delegateType) {\n            event.stopPropagation();\n          }\n\n          // If this is a native event triggered above, everything is now in order\n          // Fire an inner synthetic event with the original arguments\n        } else if (saved) {\n          // ...and capture the result\n          dataPriv.set(this, type, jQuery.event.trigger(saved[0], saved.slice(1), this));\n\n          // Abort handling of the native event by all jQuery handlers while allowing\n          // native handlers on the same element to run. On target, this is achieved\n          // by stopping immediate propagation just on the jQuery event. However,\n          // the native event is re-wrapped by a jQuery one on each level of the\n          // propagation so the only way to stop it for jQuery is to stop it for\n          // everyone via native `stopPropagation()`. This is not a problem for\n          // focus/blur which don\'t bubble, but it does also stop click on checkboxes\n          // and radios. We accept this limitation.\n          event.stopPropagation();\n          event.isImmediatePropagationStopped = returnTrue;\n        }\n      }\n    });\n  }\n  jQuery.removeEvent = function (elem, type, handle) {\n    // This "if" is needed for plain objects\n    if (elem.removeEventListener) {\n      elem.removeEventListener(type, handle);\n    }\n  };\n  jQuery.Event = function (src, props) {\n    // Allow instantiation without the \'new\' keyword\n    if (!(this instanceof jQuery.Event)) {\n      return new jQuery.Event(src, props);\n    }\n\n    // Event object\n    if (src && src.type) {\n      this.originalEvent = src;\n      this.type = src.type;\n\n      // Events bubbling up the document may have been marked as prevented\n      // by a handler lower down the tree; reflect the correct value.\n      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&\n      // Support: Android <=2.3 only\n      src.returnValue === false ? returnTrue : returnFalse;\n\n      // Create target properties\n      // Support: Safari <=6 - 7 only\n      // Target should not be a text node (trac-504, trac-13143)\n      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n      this.currentTarget = src.currentTarget;\n      this.relatedTarget = src.relatedTarget;\n\n      // Event type\n    } else {\n      this.type = src;\n    }\n\n    // Put explicitly provided properties onto the event object\n    if (props) {\n      jQuery.extend(this, props);\n    }\n\n    // Create a timestamp if incoming event doesn\'t have one\n    this.timeStamp = src && src.timeStamp || Date.now();\n\n    // Mark it as fixed\n    this[jQuery.expando] = true;\n  };\n\n  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n  jQuery.Event.prototype = {\n    constructor: jQuery.Event,\n    isDefaultPrevented: returnFalse,\n    isPropagationStopped: returnFalse,\n    isImmediatePropagationStopped: returnFalse,\n    isSimulated: false,\n    preventDefault: function preventDefault() {\n      var e = this.originalEvent;\n      this.isDefaultPrevented = returnTrue;\n      if (e && !this.isSimulated) {\n        e.preventDefault();\n      }\n    },\n    stopPropagation: function stopPropagation() {\n      var e = this.originalEvent;\n      this.isPropagationStopped = returnTrue;\n      if (e && !this.isSimulated) {\n        e.stopPropagation();\n      }\n    },\n    stopImmediatePropagation: function stopImmediatePropagation() {\n      var e = this.originalEvent;\n      this.isImmediatePropagationStopped = returnTrue;\n      if (e && !this.isSimulated) {\n        e.stopImmediatePropagation();\n      }\n      this.stopPropagation();\n    }\n  };\n\n  // Includes all common event props including KeyEvent and MouseEvent specific props\n  jQuery.each({\n    altKey: true,\n    bubbles: true,\n    cancelable: true,\n    changedTouches: true,\n    ctrlKey: true,\n    detail: true,\n    eventPhase: true,\n    metaKey: true,\n    pageX: true,\n    pageY: true,\n    shiftKey: true,\n    view: true,\n    "char": true,\n    code: true,\n    charCode: true,\n    key: true,\n    keyCode: true,\n    button: true,\n    buttons: true,\n    clientX: true,\n    clientY: true,\n    offsetX: true,\n    offsetY: true,\n    pointerId: true,\n    pointerType: true,\n    screenX: true,\n    screenY: true,\n    targetTouches: true,\n    toElement: true,\n    touches: true,\n    which: true\n  }, jQuery.event.addProp);\n  jQuery.each({\n    focus: "focusin",\n    blur: "focusout"\n  }, function (type, delegateType) {\n    function focusMappedHandler(nativeEvent) {\n      if (document.documentMode) {\n        // Support: IE 11+\n        // Attach a single focusin/focusout handler on the document while someone wants\n        // focus/blur. This is because the former are synchronous in IE while the latter\n        // are async. In other browsers, all those handlers are invoked synchronously.\n\n        // `handle` from private data would already wrap the event, but we need\n        // to change the `type` here.\n        var handle = dataPriv.get(this, "handle"),\n          event = jQuery.event.fix(nativeEvent);\n        event.type = nativeEvent.type === "focusin" ? "focus" : "blur";\n        event.isSimulated = true;\n\n        // First, handle focusin/focusout\n        handle(nativeEvent);\n\n        // ...then, handle focus/blur\n        //\n        // focus/blur don\'t bubble while focusin/focusout do; simulate the former by only\n        // invoking the handler at the lower level.\n        if (event.target === event.currentTarget) {\n          // The setup part calls `leverageNative`, which, in turn, calls\n          // `jQuery.event.add`, so event handle will already have been set\n          // by this point.\n          handle(event);\n        }\n      } else {\n        // For non-IE browsers, attach a single capturing handler on the document\n        // while someone wants focusin/focusout.\n        jQuery.event.simulate(delegateType, nativeEvent.target, jQuery.event.fix(nativeEvent));\n      }\n    }\n    jQuery.event.special[type] = {\n      // Utilize native event if possible so blur/focus sequence is correct\n      setup: function setup() {\n        var attaches;\n\n        // Claim the first handler\n        // dataPriv.set( this, "focus", ... )\n        // dataPriv.set( this, "blur", ... )\n        leverageNative(this, type, true);\n        if (document.documentMode) {\n          // Support: IE 9 - 11+\n          // We use the same native handler for focusin & focus (and focusout & blur)\n          // so we need to coordinate setup & teardown parts between those events.\n          // Use `delegateType` as the key as `type` is already used by `leverageNative`.\n          attaches = dataPriv.get(this, delegateType);\n          if (!attaches) {\n            this.addEventListener(delegateType, focusMappedHandler);\n          }\n          dataPriv.set(this, delegateType, (attaches || 0) + 1);\n        } else {\n          // Return false to allow normal processing in the caller\n          return false;\n        }\n      },\n      trigger: function trigger() {\n        // Force setup before trigger\n        leverageNative(this, type);\n\n        // Return non-false to allow normal event-path propagation\n        return true;\n      },\n      teardown: function teardown() {\n        var attaches;\n        if (document.documentMode) {\n          attaches = dataPriv.get(this, delegateType) - 1;\n          if (!attaches) {\n            this.removeEventListener(delegateType, focusMappedHandler);\n            dataPriv.remove(this, delegateType);\n          } else {\n            dataPriv.set(this, delegateType, attaches);\n          }\n        } else {\n          // Return false to indicate standard teardown should be applied\n          return false;\n        }\n      },\n      // Suppress native focus or blur if we\'re currently inside\n      // a leveraged native-event stack\n      _default: function _default(event) {\n        return dataPriv.get(event.target, type);\n      },\n      delegateType: delegateType\n    };\n\n    // Support: Firefox <=44\n    // Firefox doesn\'t have focus(in | out) events\n    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n    //\n    // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n    // focus(in | out) events fire after focus & blur events,\n    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n    // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n    //\n    // Support: IE 9 - 11+\n    // To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,\n    // attach a single handler for both events in IE.\n    jQuery.event.special[delegateType] = {\n      setup: function setup() {\n        // Handle: regular nodes (via `this.ownerDocument`), window\n        // (via `this.document`) & document (via `this`).\n        var doc = this.ownerDocument || this.document || this,\n          dataHolder = document.documentMode ? this : doc,\n          attaches = dataPriv.get(dataHolder, delegateType);\n\n        // Support: IE 9 - 11+\n        // We use the same native handler for focusin & focus (and focusout & blur)\n        // so we need to coordinate setup & teardown parts between those events.\n        // Use `delegateType` as the key as `type` is already used by `leverageNative`.\n        if (!attaches) {\n          if (document.documentMode) {\n            this.addEventListener(delegateType, focusMappedHandler);\n          } else {\n            doc.addEventListener(type, focusMappedHandler, true);\n          }\n        }\n        dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);\n      },\n      teardown: function teardown() {\n        var doc = this.ownerDocument || this.document || this,\n          dataHolder = document.documentMode ? this : doc,\n          attaches = dataPriv.get(dataHolder, delegateType) - 1;\n        if (!attaches) {\n          if (document.documentMode) {\n            this.removeEventListener(delegateType, focusMappedHandler);\n          } else {\n            doc.removeEventListener(type, focusMappedHandler, true);\n          }\n          dataPriv.remove(dataHolder, delegateType);\n        } else {\n          dataPriv.set(dataHolder, delegateType, attaches);\n        }\n      }\n    };\n  });\n\n  // Create mouseenter/leave events using mouseover/out and event-time checks\n  // so that event delegation works in jQuery.\n  // Do the same for pointerenter/pointerleave and pointerover/pointerout\n  //\n  // Support: Safari 7 only\n  // Safari sends mouseenter too often; see:\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n  // for the description of the bug (it existed in older Chrome versions as well).\n  jQuery.each({\n    mouseenter: "mouseover",\n    mouseleave: "mouseout",\n    pointerenter: "pointerover",\n    pointerleave: "pointerout"\n  }, function (orig, fix) {\n    jQuery.event.special[orig] = {\n      delegateType: fix,\n      bindType: fix,\n      handle: function handle(event) {\n        var ret,\n          target = this,\n          related = event.relatedTarget,\n          handleObj = event.handleObj;\n\n        // For mouseenter/leave call the handler if related is outside the target.\n        // NB: No relatedTarget if the mouse left/entered the browser window\n        if (!related || related !== target && !jQuery.contains(target, related)) {\n          event.type = handleObj.origType;\n          ret = handleObj.handler.apply(this, arguments);\n          event.type = fix;\n        }\n        return ret;\n      }\n    };\n  });\n  jQuery.fn.extend({\n    on: function on(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn);\n    },\n    one: function one(types, selector, data, fn) {\n      return _on(this, types, selector, data, fn, 1);\n    },\n    off: function off(types, selector, fn) {\n      var handleObj, type;\n      if (types && types.preventDefault && types.handleObj) {\n        // ( event )  dispatched jQuery.Event\n        handleObj = types.handleObj;\n        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n        return this;\n      }\n      if (_typeof(types) === "object") {\n        // ( types-object [, selector] )\n        for (type in types) {\n          this.off(type, selector, types[type]);\n        }\n        return this;\n      }\n      if (selector === false || typeof selector === "function") {\n        // ( types [, fn] )\n        fn = selector;\n        selector = undefined;\n      }\n      if (fn === false) {\n        fn = returnFalse;\n      }\n      return this.each(function () {\n        jQuery.event.remove(this, types, fn, selector);\n      });\n    }\n  });\n  var\n    // Support: IE <=10 - 11, Edge 12 - 13 only\n    // In IE/Edge using regex groups here causes severe slowdowns.\n    // See https://connect.microsoft.com/IE/feedback/details/1736512/\n    rnoInnerhtml = /<script|<style|<link/i,\n    // checked="checked" or checked\n    rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n    rcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n  // Prefer a tbody over its parent table for containing new rows\n  function manipulationTarget(elem, content) {\n    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {\n      return jQuery(elem).children("tbody")[0] || elem;\n    }\n    return elem;\n  }\n\n  // Replace/restore the type attribute of script elements for safe DOM manipulation\n  function disableScript(elem) {\n    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;\n    return elem;\n  }\n  function restoreScript(elem) {\n    if ((elem.type || "").slice(0, 5) === "true/") {\n      elem.type = elem.type.slice(5);\n    } else {\n      elem.removeAttribute("type");\n    }\n    return elem;\n  }\n  function cloneCopyEvent(src, dest) {\n    var i, l, type, pdataOld, udataOld, udataCur, events;\n    if (dest.nodeType !== 1) {\n      return;\n    }\n\n    // 1. Copy private data: events, handlers, etc.\n    if (dataPriv.hasData(src)) {\n      pdataOld = dataPriv.get(src);\n      events = pdataOld.events;\n      if (events) {\n        dataPriv.remove(dest, "handle events");\n        for (type in events) {\n          for (i = 0, l = events[type].length; i < l; i++) {\n            jQuery.event.add(dest, type, events[type][i]);\n          }\n        }\n      }\n    }\n\n    // 2. Copy user data\n    if (dataUser.hasData(src)) {\n      udataOld = dataUser.access(src);\n      udataCur = jQuery.extend({}, udataOld);\n      dataUser.set(dest, udataCur);\n    }\n  }\n\n  // Fix IE bugs, see support tests\n  function fixInput(src, dest) {\n    var nodeName = dest.nodeName.toLowerCase();\n\n    // Fails to persist the checked state of a cloned checkbox or radio button.\n    if (nodeName === "input" && rcheckableType.test(src.type)) {\n      dest.checked = src.checked;\n\n      // Fails to return the selected option to the default selected state when cloning options\n    } else if (nodeName === "input" || nodeName === "textarea") {\n      dest.defaultValue = src.defaultValue;\n    }\n  }\n  function domManip(collection, args, callback, ignored) {\n    // Flatten any nested arrays\n    args = flat(args);\n    var fragment,\n      first,\n      scripts,\n      hasScripts,\n      node,\n      doc,\n      i = 0,\n      l = collection.length,\n      iNoClone = l - 1,\n      value = args[0],\n      valueIsFunction = isFunction(value);\n\n    // We can\'t cloneNode fragments that contain checked, in WebKit\n    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {\n      return collection.each(function (index) {\n        var self = collection.eq(index);\n        if (valueIsFunction) {\n          args[0] = value.call(this, index, self.html());\n        }\n        domManip(self, args, callback, ignored);\n      });\n    }\n    if (l) {\n      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n      first = fragment.firstChild;\n      if (fragment.childNodes.length === 1) {\n        fragment = first;\n      }\n\n      // Require either new content or an interest in ignored elements to invoke the callback\n      if (first || ignored) {\n        scripts = jQuery.map(getAll(fragment, "script"), disableScript);\n        hasScripts = scripts.length;\n\n        // Use the original fragment for the last item\n        // instead of the first because it can end up\n        // being emptied incorrectly in certain situations (trac-8070).\n        for (; i < l; i++) {\n          node = fragment;\n          if (i !== iNoClone) {\n            node = jQuery.clone(node, true, true);\n\n            // Keep references to cloned scripts for later restoration\n            if (hasScripts) {\n              // Support: Android <=4.0 only, PhantomJS 1 only\n              // push.apply(_, arraylike) throws on ancient WebKit\n              jQuery.merge(scripts, getAll(node, "script"));\n            }\n          }\n          callback.call(collection[i], node, i);\n        }\n        if (hasScripts) {\n          doc = scripts[scripts.length - 1].ownerDocument;\n\n          // Reenable scripts\n          jQuery.map(scripts, restoreScript);\n\n          // Evaluate executable scripts on first document insertion\n          for (i = 0; i < hasScripts; i++) {\n            node = scripts[i];\n            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {\n              if (node.src && (node.type || "").toLowerCase() !== "module") {\n                // Optional AJAX dependency, but won\'t run scripts if not present\n                if (jQuery._evalUrl && !node.noModule) {\n                  jQuery._evalUrl(node.src, {\n                    nonce: node.nonce || node.getAttribute("nonce")\n                  }, doc);\n                }\n              } else {\n                // Unwrap a CDATA section containing script contents. This shouldn\'t be\n                // needed as in XML documents they\'re already not visible when\n                // inspecting element contents and in HTML documents they have no\n                // meaning but we\'re preserving that logic for backwards compatibility.\n                // This will be removed completely in 4.0. See gh-4904.\n                DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);\n              }\n            }\n          }\n        }\n      }\n    }\n    return collection;\n  }\n  function _remove(elem, selector, keepData) {\n    var node,\n      nodes = selector ? jQuery.filter(selector, elem) : elem,\n      i = 0;\n    for (; (node = nodes[i]) != null; i++) {\n      if (!keepData && node.nodeType === 1) {\n        jQuery.cleanData(getAll(node));\n      }\n      if (node.parentNode) {\n        if (keepData && isAttached(node)) {\n          setGlobalEval(getAll(node, "script"));\n        }\n        node.parentNode.removeChild(node);\n      }\n    }\n    return elem;\n  }\n  jQuery.extend({\n    htmlPrefilter: function htmlPrefilter(html) {\n      return html;\n    },\n    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n      var i,\n        l,\n        srcElements,\n        destElements,\n        clone = elem.cloneNode(true),\n        inPage = isAttached(elem);\n\n      // Fix IE cloning issues\n      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n        // We eschew jQuery#find here for performance reasons:\n        // https://jsperf.com/getall-vs-sizzle/2\n        destElements = getAll(clone);\n        srcElements = getAll(elem);\n        for (i = 0, l = srcElements.length; i < l; i++) {\n          fixInput(srcElements[i], destElements[i]);\n        }\n      }\n\n      // Copy the events from the original to the clone\n      if (dataAndEvents) {\n        if (deepDataAndEvents) {\n          srcElements = srcElements || getAll(elem);\n          destElements = destElements || getAll(clone);\n          for (i = 0, l = srcElements.length; i < l; i++) {\n            cloneCopyEvent(srcElements[i], destElements[i]);\n          }\n        } else {\n          cloneCopyEvent(elem, clone);\n        }\n      }\n\n      // Preserve script evaluation history\n      destElements = getAll(clone, "script");\n      if (destElements.length > 0) {\n        setGlobalEval(destElements, !inPage && getAll(elem, "script"));\n      }\n\n      // Return the cloned set\n      return clone;\n    },\n    cleanData: function cleanData(elems) {\n      var data,\n        elem,\n        type,\n        special = jQuery.event.special,\n        i = 0;\n      for (; (elem = elems[i]) !== undefined; i++) {\n        if (acceptData(elem)) {\n          if (data = elem[dataPriv.expando]) {\n            if (data.events) {\n              for (type in data.events) {\n                if (special[type]) {\n                  jQuery.event.remove(elem, type);\n\n                  // This is a shortcut to avoid jQuery.event.remove\'s overhead\n                } else {\n                  jQuery.removeEvent(elem, type, data.handle);\n                }\n              }\n            }\n\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataPriv.expando] = undefined;\n          }\n          if (elem[dataUser.expando]) {\n            // Support: Chrome <=35 - 45+\n            // Assign undefined instead of using delete, see Data#remove\n            elem[dataUser.expando] = undefined;\n          }\n        }\n      }\n    }\n  });\n  jQuery.fn.extend({\n    detach: function detach(selector) {\n      return _remove(this, selector, true);\n    },\n    remove: function remove(selector) {\n      return _remove(this, selector);\n    },\n    text: function text(value) {\n      return access(this, function (value) {\n        return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n            this.textContent = value;\n          }\n        });\n      }, null, value, arguments.length);\n    },\n    append: function append() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.appendChild(elem);\n        }\n      });\n    },\n    prepend: function prepend() {\n      return domManip(this, arguments, function (elem) {\n        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n          var target = manipulationTarget(this, elem);\n          target.insertBefore(elem, target.firstChild);\n        }\n      });\n    },\n    before: function before() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this);\n        }\n      });\n    },\n    after: function after() {\n      return domManip(this, arguments, function (elem) {\n        if (this.parentNode) {\n          this.parentNode.insertBefore(elem, this.nextSibling);\n        }\n      });\n    },\n    empty: function empty() {\n      var elem,\n        i = 0;\n      for (; (elem = this[i]) != null; i++) {\n        if (elem.nodeType === 1) {\n          // Prevent memory leaks\n          jQuery.cleanData(getAll(elem, false));\n\n          // Remove any remaining nodes\n          elem.textContent = "";\n        }\n      }\n      return this;\n    },\n    clone: function clone(dataAndEvents, deepDataAndEvents) {\n      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n      return this.map(function () {\n        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n      });\n    },\n    html: function html(value) {\n      return access(this, function (value) {\n        var elem = this[0] || {},\n          i = 0,\n          l = this.length;\n        if (value === undefined && elem.nodeType === 1) {\n          return elem.innerHTML;\n        }\n\n        // See if we can take a shortcut and just use innerHTML\n        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {\n          value = jQuery.htmlPrefilter(value);\n          try {\n            for (; i < l; i++) {\n              elem = this[i] || {};\n\n              // Remove element nodes and prevent memory leaks\n              if (elem.nodeType === 1) {\n                jQuery.cleanData(getAll(elem, false));\n                elem.innerHTML = value;\n              }\n            }\n            elem = 0;\n\n            // If using innerHTML throws an exception, use the fallback method\n          } catch (e) {}\n        }\n        if (elem) {\n          this.empty().append(value);\n        }\n      }, null, value, arguments.length);\n    },\n    replaceWith: function replaceWith() {\n      var ignored = [];\n\n      // Make the changes, replacing each non-ignored context element with the new content\n      return domManip(this, arguments, function (elem) {\n        var parent = this.parentNode;\n        if (jQuery.inArray(this, ignored) < 0) {\n          jQuery.cleanData(getAll(this));\n          if (parent) {\n            parent.replaceChild(elem, this);\n          }\n        }\n\n        // Force callback invocation\n      }, ignored);\n    }\n  });\n  jQuery.each({\n    appendTo: "append",\n    prependTo: "prepend",\n    insertBefore: "before",\n    insertAfter: "after",\n    replaceAll: "replaceWith"\n  }, function (name, original) {\n    jQuery.fn[name] = function (selector) {\n      var elems,\n        ret = [],\n        insert = jQuery(selector),\n        last = insert.length - 1,\n        i = 0;\n      for (; i <= last; i++) {\n        elems = i === last ? this : this.clone(true);\n        jQuery(insert[i])[original](elems);\n\n        // Support: Android <=4.0 only, PhantomJS 1 only\n        // .get() because push.apply(_, arraylike) throws on ancient WebKit\n        push.apply(ret, elems.get());\n      }\n      return this.pushStack(ret);\n    };\n  });\n  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");\n  var rcustomProp = /^--/;\n  var getStyles = function getStyles(elem) {\n    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n    // IE throws on elements created in popups\n    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n    var view = elem.ownerDocument.defaultView;\n    if (!view || !view.opener) {\n      view = window;\n    }\n    return view.getComputedStyle(elem);\n  };\n  var swap = function swap(elem, options, callback) {\n    var ret,\n      name,\n      old = {};\n\n    // Remember the old values, and insert the new ones\n    for (name in options) {\n      old[name] = elem.style[name];\n      elem.style[name] = options[name];\n    }\n    ret = callback.call(elem);\n\n    // Revert the old values\n    for (name in options) {\n      elem.style[name] = old[name];\n    }\n    return ret;\n  };\n  var rboxStyle = new RegExp(cssExpand.join("|"), "i");\n  (function () {\n    // Executing both pixelPosition & boxSizingReliable tests require only one layout\n    // so they\'re executed at the same time to save the second computation.\n    function computeStyleTests() {\n      // This is a singleton, we need to execute it only once\n      if (!div) {\n        return;\n      }\n      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";\n      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";\n      documentElement.appendChild(container).appendChild(div);\n      var divStyle = window.getComputedStyle(div);\n      pixelPositionVal = divStyle.top !== "1%";\n\n      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;\n\n      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n      // Some styles come back with percentage values, even though they shouldn\'t\n      div.style.right = "60%";\n      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;\n\n      // Support: IE 9 - 11 only\n      // Detect misreporting of content dimensions for box-sizing:border-box elements\n      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;\n\n      // Support: IE 9 only\n      // Detect overflow:scroll screwiness (gh-3699)\n      // Support: Chrome <=64\n      // Don\'t get tricked when zoom affects offsetWidth (gh-4029)\n      div.style.position = "absolute";\n      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;\n      documentElement.removeChild(container);\n\n      // Nullify the div so it wouldn\'t be stored in the memory and\n      // it will also be a sign that checks already performed\n      div = null;\n    }\n    function roundPixelMeasures(measure) {\n      return Math.round(parseFloat(measure));\n    }\n    var pixelPositionVal,\n      boxSizingReliableVal,\n      scrollboxSizeVal,\n      pixelBoxStylesVal,\n      reliableTrDimensionsVal,\n      reliableMarginLeftVal,\n      container = document.createElement("div"),\n      div = document.createElement("div");\n\n    // Finish early in limited (non-browser) environments\n    if (!div.style) {\n      return;\n    }\n\n    // Support: IE <=9 - 11 only\n    // Style of cloned element affects source element cloned (trac-8908)\n    div.style.backgroundClip = "content-box";\n    div.cloneNode(true).style.backgroundClip = "";\n    support.clearCloneStyle = div.style.backgroundClip === "content-box";\n    jQuery.extend(support, {\n      boxSizingReliable: function boxSizingReliable() {\n        computeStyleTests();\n        return boxSizingReliableVal;\n      },\n      pixelBoxStyles: function pixelBoxStyles() {\n        computeStyleTests();\n        return pixelBoxStylesVal;\n      },\n      pixelPosition: function pixelPosition() {\n        computeStyleTests();\n        return pixelPositionVal;\n      },\n      reliableMarginLeft: function reliableMarginLeft() {\n        computeStyleTests();\n        return reliableMarginLeftVal;\n      },\n      scrollboxSize: function scrollboxSize() {\n        computeStyleTests();\n        return scrollboxSizeVal;\n      },\n      // Support: IE 9 - 11+, Edge 15 - 18+\n      // IE/Edge misreport `getComputedStyle` of table rows with width/height\n      // set in CSS while `offset*` properties report correct values.\n      // Behavior in IE 9 is more subtle than in newer versions & it passes\n      // some versions of this test; make sure not to make it pass there!\n      //\n      // Support: Firefox 70+\n      // Only Firefox includes border widths\n      // in computed dimensions. (gh-4529)\n      reliableTrDimensions: function reliableTrDimensions() {\n        var table, tr, trChild, trStyle;\n        if (reliableTrDimensionsVal == null) {\n          table = document.createElement("table");\n          tr = document.createElement("tr");\n          trChild = document.createElement("div");\n          table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";\n          tr.style.cssText = "border:1px solid";\n\n          // Support: Chrome 86+\n          // Height set through cssText does not get applied.\n          // Computed height then comes back as 0.\n          tr.style.height = "1px";\n          trChild.style.height = "9px";\n\n          // Support: Android 8 Chrome 86+\n          // In our bodyBackground.html iframe,\n          // display for all div elements is set to "inline",\n          // which causes a problem only in Android 8 Chrome 86.\n          // Ensuring the div is display: block\n          // gets around this issue.\n          trChild.style.display = "block";\n          documentElement.appendChild(table).appendChild(tr).appendChild(trChild);\n          trStyle = window.getComputedStyle(tr);\n          reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;\n          documentElement.removeChild(table);\n        }\n        return reliableTrDimensionsVal;\n      }\n    });\n  })();\n  function curCSS(elem, name, computed) {\n    var width,\n      minWidth,\n      maxWidth,\n      ret,\n      isCustomProp = rcustomProp.test(name),\n      // Support: Firefox 51+\n      // Retrieving style before computed somehow\n      // fixes an issue with getting wrong values\n      // on detached elements\n      style = elem.style;\n    computed = computed || getStyles(elem);\n\n    // getPropertyValue is needed for:\n    //   .css(\'filter\') (IE 9 only, trac-12537)\n    //   .css(\'--customProperty) (gh-3144)\n    if (computed) {\n      // Support: IE <=9 - 11+\n      // IE only supports `"float"` in `getPropertyValue`; in computed styles\n      // it\'s only available as `"cssFloat"`. We no longer modify properties\n      // sent to `.css()` apart from camelCasing, so we need to check both.\n      // Normally, this would create difference in behavior: if\n      // `getPropertyValue` returns an empty string, the value returned\n      // by `.css()` would be `undefined`. This is usually the case for\n      // disconnected elements. However, in IE even disconnected elements\n      // with no styles return `"none"` for `getPropertyValue( "float" )`\n      ret = computed.getPropertyValue(name) || computed[name];\n      if (isCustomProp && ret) {\n        // Support: Firefox 105+, Chrome <=105+\n        // Spec requires trimming whitespace for custom properties (gh-4926).\n        // Firefox only trims leading whitespace. Chrome just collapses\n        // both leading & trailing whitespace to a single space.\n        //\n        // Fall back to `undefined` if empty string returned.\n        // This collapses a missing definition with property defined\n        // and set to an empty string but there\'s no standard API\n        // allowing us to differentiate them without a performance penalty\n        // and returning `undefined` aligns with older jQuery.\n        //\n        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n        // as whitespace while CSS does not, but this is not a problem\n        // because CSS preprocessing replaces them with U+000A LINE FEED\n        // (which *is* CSS whitespace)\n        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n        ret = ret.replace(rtrimCSS, "$1") || undefined;\n      }\n      if (ret === "" && !isAttached(elem)) {\n        ret = jQuery.style(elem, name);\n      }\n\n      // A tribute to the "awesome hack by Dean Edwards"\n      // Android Browser returns percentage for some values,\n      // but width seems to be reliably pixels.\n      // This is against the CSSOM draft spec:\n      // https://drafts.csswg.org/cssom/#resolved-values\n      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {\n        // Remember the original values\n        width = style.width;\n        minWidth = style.minWidth;\n        maxWidth = style.maxWidth;\n\n        // Put in the new values to get a computed value out\n        style.minWidth = style.maxWidth = style.width = ret;\n        ret = computed.width;\n\n        // Revert the changed values\n        style.width = width;\n        style.minWidth = minWidth;\n        style.maxWidth = maxWidth;\n      }\n    }\n    return ret !== undefined ?\n    // Support: IE <=9 - 11 only\n    // IE returns zIndex value as an integer.\n    ret + "" : ret;\n  }\n  function addGetHookIf(conditionFn, hookFn) {\n    // Define the hook, we\'ll check on the first run if it\'s really needed.\n    return {\n      get: function get() {\n        if (conditionFn()) {\n          // Hook not needed (or it\'s not possible to use it due\n          // to missing dependency), remove it.\n          delete this.get;\n          return;\n        }\n\n        // Hook needed; redefine it so that the support test is not executed again.\n        return (this.get = hookFn).apply(this, arguments);\n      }\n    };\n  }\n  var cssPrefixes = ["Webkit", "Moz", "ms"],\n    emptyStyle = document.createElement("div").style,\n    vendorProps = {};\n\n  // Return a vendor-prefixed property or undefined\n  function vendorPropName(name) {\n    // Check for vendor prefixed names\n    var capName = name[0].toUpperCase() + name.slice(1),\n      i = cssPrefixes.length;\n    while (i--) {\n      name = cssPrefixes[i] + capName;\n      if (name in emptyStyle) {\n        return name;\n      }\n    }\n  }\n\n  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property\n  function finalPropName(name) {\n    var final = jQuery.cssProps[name] || vendorProps[name];\n    if (final) {\n      return final;\n    }\n    if (name in emptyStyle) {\n      return name;\n    }\n    return vendorProps[name] = vendorPropName(name) || name;\n  }\n  var\n    // Swappable if display is none or starts with table\n    // except "table", "table-cell", or "table-caption"\n    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n    rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n    cssShow = {\n      position: "absolute",\n      visibility: "hidden",\n      display: "block"\n    },\n    cssNormalTransform = {\n      letterSpacing: "0",\n      fontWeight: "400"\n    };\n  function setPositiveNumber(_elem, value, subtract) {\n    // Any relative (+/-) values have already been\n    // normalized at this point\n    var matches = rcssNum.exec(value);\n    return matches ?\n    // Guard against undefined "subtract", e.g., when used as in cssHooks\n    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;\n  }\n  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {\n    var i = dimension === "width" ? 1 : 0,\n      extra = 0,\n      delta = 0,\n      marginDelta = 0;\n\n    // Adjustment may not be necessary\n    if (box === (isBorderBox ? "border" : "content")) {\n      return 0;\n    }\n    for (; i < 4; i += 2) {\n      // Both box models exclude margin\n      // Count margin delta separately to only add it after scroll gutter adjustment.\n      // This is needed to make negative margins work with `outerHeight( true )` (gh-3982).\n      if (box === "margin") {\n        marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles);\n      }\n\n      // If we get here with a content-box, we\'re seeking "padding" or "border" or "margin"\n      if (!isBorderBox) {\n        // Add padding\n        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n\n        // For "border" or "margin", add border\n        if (box !== "padding") {\n          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n\n          // But still keep track of it otherwise\n        } else {\n          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        }\n\n        // If we get here with a border-box (content + padding + border), we\'re seeking "content" or\n        // "padding" or "margin"\n      } else {\n        // For "content", subtract padding\n        if (box === "content") {\n          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);\n        }\n\n        // For "content" or "padding", subtract border\n        if (box !== "margin") {\n          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);\n        }\n      }\n    }\n\n    // Account for positive content-box scroll gutter when requested by providing computedVal\n    if (!isBorderBox && computedVal >= 0) {\n      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n      // Assuming integer scroll gutter, subtract the rest and round down\n      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5\n\n      // If offsetWidth/offsetHeight is unknown, then we can\'t determine content-box scroll gutter\n      // Use an explicit zero to avoid NaN (gh-3964)\n      )) || 0;\n    }\n    return delta + marginDelta;\n  }\n  function getWidthOrHeight(elem, dimension, extra) {\n    // Start with computed style\n    var styles = getStyles(elem),\n      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n      // Fake content-box until we know it\'s needed to know the true value.\n      boxSizingNeeded = !support.boxSizingReliable() || extra,\n      isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n      valueIsBorderBox = isBorderBox,\n      val = curCSS(elem, dimension, styles),\n      offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);\n\n    // Support: Firefox <=54\n    // Return a confounding non-pixel value or feign ignorance, as appropriate.\n    if (rnumnonpx.test(val)) {\n      if (!extra) {\n        return val;\n      }\n      val = "auto";\n    }\n\n    // Support: IE 9 - 11 only\n    // Use offsetWidth/offsetHeight for when box sizing is unreliable.\n    // In those cases, the computed value can be trusted to be border-box.\n    if ((!support.boxSizingReliable() && isBorderBox ||\n    // Support: IE 10 - 11+, Edge 15 - 18+\n    // IE/Edge misreport `getComputedStyle` of table rows with width/height\n    // set in CSS while `offset*` properties report correct values.\n    // Interestingly, in some cases IE 9 doesn\'t suffer from this issue.\n    !support.reliableTrDimensions() && nodeName(elem, "tr") ||\n    // Fall back to offsetWidth/offsetHeight when value is "auto"\n    // This happens for inline elements with no explicit setting (gh-3571)\n    val === "auto" ||\n    // Support: Android <=4.1 - 4.3 only\n    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n    !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") &&\n    // Make sure the element is visible & connected\n    elem.getClientRects().length) {\n      isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";\n\n      // Where available, offsetWidth/offsetHeight approximate border box dimensions.\n      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n      // retrieved value as a content box dimension.\n      valueIsBorderBox = offsetProp in elem;\n      if (valueIsBorderBox) {\n        val = elem[offsetProp];\n      }\n    }\n\n    // Normalize "" and auto\n    val = parseFloat(val) || 0;\n\n    // Adjust for the element\'s box model\n    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles,\n    // Provide the current computed size to request scroll gutter calculation (gh-3589)\n    val) + "px";\n  }\n  jQuery.extend({\n    // Add in style property hooks for overriding the default\n    // behavior of getting and setting a style property\n    cssHooks: {\n      opacity: {\n        get: function get(elem, computed) {\n          if (computed) {\n            // We should always get a number back from opacity\n            var ret = curCSS(elem, "opacity");\n            return ret === "" ? "1" : ret;\n          }\n        }\n      }\n    },\n    // Don\'t automatically add "px" to these possibly-unitless properties\n    cssNumber: {\n      animationIterationCount: true,\n      aspectRatio: true,\n      borderImageSlice: true,\n      columnCount: true,\n      flexGrow: true,\n      flexShrink: true,\n      fontWeight: true,\n      gridArea: true,\n      gridColumn: true,\n      gridColumnEnd: true,\n      gridColumnStart: true,\n      gridRow: true,\n      gridRowEnd: true,\n      gridRowStart: true,\n      lineHeight: true,\n      opacity: true,\n      order: true,\n      orphans: true,\n      scale: true,\n      widows: true,\n      zIndex: true,\n      zoom: true,\n      // SVG-related\n      fillOpacity: true,\n      floodOpacity: true,\n      stopOpacity: true,\n      strokeMiterlimit: true,\n      strokeOpacity: true\n    },\n    // Add in properties whose names you wish to fix before\n    // setting or getting the value\n    cssProps: {},\n    // Get and set the style property on a DOM Node\n    style: function style(elem, name, value, extra) {\n      // Don\'t set styles on text and comment nodes\n      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n        return;\n      }\n\n      // Make sure that we\'re working with the right name\n      var ret,\n        type,\n        hooks,\n        origName = camelCase(name),\n        isCustomProp = rcustomProp.test(name),\n        style = elem.style;\n\n      // Make sure that we\'re working with the right name. We don\'t\n      // want to query the value if it is a CSS custom property\n      // since they are user-defined.\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      }\n\n      // Gets hook for the prefixed version, then unprefixed version\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n      // Check if we\'re setting a value\n      if (value !== undefined) {\n        type = _typeof(value);\n\n        // Convert "+=" or "-=" to relative numbers (trac-7345)\n        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {\n          value = adjustCSS(elem, name, ret);\n\n          // Fixes bug trac-9237\n          type = "number";\n        }\n\n        // Make sure that null and NaN values aren\'t set (trac-7116)\n        if (value == null || value !== value) {\n          return;\n        }\n\n        // If a number was passed in, add the unit (except for certain CSS properties)\n        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n        // "px" to a few hardcoded values.\n        if (type === "number" && !isCustomProp) {\n          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");\n        }\n\n        // background-* props affect original clone\'s values\n        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {\n          style[name] = "inherit";\n        }\n\n        // If a hook was provided, use that value, otherwise just set the specified value\n        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n          if (isCustomProp) {\n            style.setProperty(name, value);\n          } else {\n            style[name] = value;\n          }\n        }\n      } else {\n        // If a hook was provided get the non-computed value from there\n        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n          return ret;\n        }\n\n        // Otherwise just get the value from the style object\n        return style[name];\n      }\n    },\n    css: function css(elem, name, extra, styles) {\n      var val,\n        num,\n        hooks,\n        origName = camelCase(name),\n        isCustomProp = rcustomProp.test(name);\n\n      // Make sure that we\'re working with the right name. We don\'t\n      // want to modify the value if it is a CSS custom property\n      // since they are user-defined.\n      if (!isCustomProp) {\n        name = finalPropName(origName);\n      }\n\n      // Try prefixed name followed by the unprefixed name\n      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];\n\n      // If a hook was provided get the computed value from there\n      if (hooks && "get" in hooks) {\n        val = hooks.get(elem, true, extra);\n      }\n\n      // Otherwise, if a way to get the computed value exists, use that\n      if (val === undefined) {\n        val = curCSS(elem, name, styles);\n      }\n\n      // Convert "normal" to computed value\n      if (val === "normal" && name in cssNormalTransform) {\n        val = cssNormalTransform[name];\n      }\n\n      // Make numeric if forced or a qualifier was provided and val looks numeric\n      if (extra === "" || extra) {\n        num = parseFloat(val);\n        return extra === true || isFinite(num) ? num || 0 : val;\n      }\n      return val;\n    }\n  });\n  jQuery.each(["height", "width"], function (_i, dimension) {\n    jQuery.cssHooks[dimension] = {\n      get: function get(elem, computed, extra) {\n        if (computed) {\n          // Certain elements can have dimension info if we invisibly show them\n          // but it must have a current display style that would benefit\n          return rdisplayswap.test(jQuery.css(elem, "display")) && (\n          // Support: Safari 8+\n          // Table columns in Safari have non-zero offsetWidth & zero\n          // getBoundingClientRect().width unless display is changed.\n          // Support: IE <=11 only\n          // Running getBoundingClientRect on a disconnected node\n          // in IE throws an error.\n          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n            return getWidthOrHeight(elem, dimension, extra);\n          }) : getWidthOrHeight(elem, dimension, extra);\n        }\n      },\n      set: function set(elem, value, extra) {\n        var matches,\n          styles = getStyles(elem),\n          // Only read styles.position if the test has a chance to fail\n          // to avoid forcing a reflow.\n          scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute",\n          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n          boxSizingNeeded = scrollboxSizeBuggy || extra,\n          isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box",\n          subtract = extra ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles) : 0;\n\n        // Account for unreliable border-box dimensions by comparing offset* to computed and\n        // faking a content-box to get border and padding (gh-3699)\n        if (isBorderBox && scrollboxSizeBuggy) {\n          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);\n        }\n\n        // Convert to pixels if value adjustment is needed\n        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {\n          elem.style[dimension] = value;\n          value = jQuery.css(elem, dimension);\n        }\n        return setPositiveNumber(elem, value, subtract);\n      }\n    };\n  });\n  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n    if (computed) {\n      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {\n        marginLeft: 0\n      }, function () {\n        return elem.getBoundingClientRect().left;\n      })) + "px";\n    }\n  });\n\n  // These hooks are used by animate to expand properties\n  jQuery.each({\n    margin: "",\n    padding: "",\n    border: "Width"\n  }, function (prefix, suffix) {\n    jQuery.cssHooks[prefix + suffix] = {\n      expand: function expand(value) {\n        var i = 0,\n          expanded = {},\n          // Assumes a single number if not a string\n          parts = typeof value === "string" ? value.split(" ") : [value];\n        for (; i < 4; i++) {\n          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n        }\n        return expanded;\n      }\n    };\n    if (prefix !== "margin") {\n      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n    }\n  });\n  jQuery.fn.extend({\n    css: function css(name, value) {\n      return access(this, function (elem, name, value) {\n        var styles,\n          len,\n          map = {},\n          i = 0;\n        if (Array.isArray(name)) {\n          styles = getStyles(elem);\n          len = name.length;\n          for (; i < len; i++) {\n            map[name[i]] = jQuery.css(elem, name[i], false, styles);\n          }\n          return map;\n        }\n        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n      }, name, value, arguments.length > 1);\n    }\n  });\n  function Tween(elem, options, prop, end, easing) {\n    return new Tween.prototype.init(elem, options, prop, end, easing);\n  }\n  jQuery.Tween = Tween;\n  Tween.prototype = {\n    constructor: Tween,\n    init: function init(elem, options, prop, end, easing, unit) {\n      this.elem = elem;\n      this.prop = prop;\n      this.easing = easing || jQuery.easing._default;\n      this.options = options;\n      this.start = this.now = this.cur();\n      this.end = end;\n      this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");\n    },\n    cur: function cur() {\n      var hooks = Tween.propHooks[this.prop];\n      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n    },\n    run: function run(percent) {\n      var eased,\n        hooks = Tween.propHooks[this.prop];\n      if (this.options.duration) {\n        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n      } else {\n        this.pos = eased = percent;\n      }\n      this.now = (this.end - this.start) * eased + this.start;\n      if (this.options.step) {\n        this.options.step.call(this.elem, this.now, this);\n      }\n      if (hooks && hooks.set) {\n        hooks.set(this);\n      } else {\n        Tween.propHooks._default.set(this);\n      }\n      return this;\n    }\n  };\n  Tween.prototype.init.prototype = Tween.prototype;\n  Tween.propHooks = {\n    _default: {\n      get: function get(tween) {\n        var result;\n\n        // Use a property on the element directly when it is not a DOM element,\n        // or when there is no matching style property that exists.\n        if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n          return tween.elem[tween.prop];\n        }\n\n        // Passing an empty string as a 3rd parameter to .css will automatically\n        // attempt a parseFloat and fallback to a string if the parse fails.\n        // Simple values such as "10px" are parsed to Float;\n        // complex values such as "rotate(1rad)" are returned as-is.\n        result = jQuery.css(tween.elem, tween.prop, "");\n\n        // Empty strings, null, undefined and "auto" are converted to 0.\n        return !result || result === "auto" ? 0 : result;\n      },\n      set: function set(tween) {\n        // Use step hook for back compat.\n        // Use cssHook if its there.\n        // Use .style if available and use plain properties where available.\n        if (jQuery.fx.step[tween.prop]) {\n          jQuery.fx.step[tween.prop](tween);\n        } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {\n          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n        } else {\n          tween.elem[tween.prop] = tween.now;\n        }\n      }\n    }\n  };\n\n  // Support: IE <=9 only\n  // Panic based approach to setting things on disconnected nodes\n  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n    set: function set(tween) {\n      if (tween.elem.nodeType && tween.elem.parentNode) {\n        tween.elem[tween.prop] = tween.now;\n      }\n    }\n  };\n  jQuery.easing = {\n    linear: function linear(p) {\n      return p;\n    },\n    swing: function swing(p) {\n      return 0.5 - Math.cos(p * Math.PI) / 2;\n    },\n    _default: "swing"\n  };\n  jQuery.fx = Tween.prototype.init;\n\n  // Back compat <1.8 extension point\n  jQuery.fx.step = {};\n  var fxNow,\n    inProgress,\n    rfxtypes = /^(?:toggle|show|hide)$/,\n    rrun = /queueHooks$/;\n  function schedule() {\n    if (inProgress) {\n      if (document.hidden === false && window.requestAnimationFrame) {\n        window.requestAnimationFrame(schedule);\n      } else {\n        window.setTimeout(schedule, jQuery.fx.interval);\n      }\n      jQuery.fx.tick();\n    }\n  }\n\n  // Animations created synchronously will run synchronously\n  function createFxNow() {\n    window.setTimeout(function () {\n      fxNow = undefined;\n    });\n    return fxNow = Date.now();\n  }\n\n  // Generate parameters to create a standard animation\n  function genFx(type, includeWidth) {\n    var which,\n      i = 0,\n      attrs = {\n        height: type\n      };\n\n    // If we include width, step value is 1 to do all cssExpand values,\n    // otherwise step value is 2 to skip over Left and Right\n    includeWidth = includeWidth ? 1 : 0;\n    for (; i < 4; i += 2 - includeWidth) {\n      which = cssExpand[i];\n      attrs["margin" + which] = attrs["padding" + which] = type;\n    }\n    if (includeWidth) {\n      attrs.opacity = attrs.width = type;\n    }\n    return attrs;\n  }\n  function createTween(value, prop, animation) {\n    var tween,\n      collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),\n      index = 0,\n      length = collection.length;\n    for (; index < length; index++) {\n      if (tween = collection[index].call(animation, prop, value)) {\n        // We\'re done with this property\n        return tween;\n      }\n    }\n  }\n  function defaultPrefilter(elem, props, opts) {\n    var prop,\n      value,\n      toggle,\n      hooks,\n      oldfire,\n      propTween,\n      restoreDisplay,\n      display,\n      isBox = "width" in props || "height" in props,\n      anim = this,\n      orig = {},\n      style = elem.style,\n      hidden = elem.nodeType && isHiddenWithinTree(elem),\n      dataShow = dataPriv.get(elem, "fxshow");\n\n    // Queue-skipping animations hijack the fx hooks\n    if (!opts.queue) {\n      hooks = jQuery._queueHooks(elem, "fx");\n      if (hooks.unqueued == null) {\n        hooks.unqueued = 0;\n        oldfire = hooks.empty.fire;\n        hooks.empty.fire = function () {\n          if (!hooks.unqueued) {\n            oldfire();\n          }\n        };\n      }\n      hooks.unqueued++;\n      anim.always(function () {\n        // Ensure the complete handler is called before this completes\n        anim.always(function () {\n          hooks.unqueued--;\n          if (!jQuery.queue(elem, "fx").length) {\n            hooks.empty.fire();\n          }\n        });\n      });\n    }\n\n    // Detect show/hide animations\n    for (prop in props) {\n      value = props[prop];\n      if (rfxtypes.test(value)) {\n        delete props[prop];\n        toggle = toggle || value === "toggle";\n        if (value === (hidden ? "hide" : "show")) {\n          // Pretend to be hidden if this is a "show" and\n          // there is still data from a stopped show/hide\n          if (value === "show" && dataShow && dataShow[prop] !== undefined) {\n            hidden = true;\n\n            // Ignore all other no-op show/hide data\n          } else {\n            continue;\n          }\n        }\n        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n      }\n    }\n\n    // Bail out if this is a no-op like .hide().hide()\n    propTween = !jQuery.isEmptyObject(props);\n    if (!propTween && jQuery.isEmptyObject(orig)) {\n      return;\n    }\n\n    // Restrict "overflow" and "display" styles during box animations\n    if (isBox && elem.nodeType === 1) {\n      // Support: IE <=9 - 11, Edge 12 - 15\n      // Record all 3 overflow attributes because IE does not infer the shorthand\n      // from identically-valued overflowX and overflowY and Edge just mirrors\n      // the overflowX value there.\n      opts.overflow = [style.overflow, style.overflowX, style.overflowY];\n\n      // Identify a display type, preferring old show/hide data over the CSS cascade\n      restoreDisplay = dataShow && dataShow.display;\n      if (restoreDisplay == null) {\n        restoreDisplay = dataPriv.get(elem, "display");\n      }\n      display = jQuery.css(elem, "display");\n      if (display === "none") {\n        if (restoreDisplay) {\n          display = restoreDisplay;\n        } else {\n          // Get nonempty value(s) by temporarily forcing visibility\n          showHide([elem], true);\n          restoreDisplay = elem.style.display || restoreDisplay;\n          display = jQuery.css(elem, "display");\n          showHide([elem]);\n        }\n      }\n\n      // Animate inline elements as inline-block\n      if (display === "inline" || display === "inline-block" && restoreDisplay != null) {\n        if (jQuery.css(elem, "float") === "none") {\n          // Restore the original display value at the end of pure show/hide animations\n          if (!propTween) {\n            anim.done(function () {\n              style.display = restoreDisplay;\n            });\n            if (restoreDisplay == null) {\n              display = style.display;\n              restoreDisplay = display === "none" ? "" : display;\n            }\n          }\n          style.display = "inline-block";\n        }\n      }\n    }\n    if (opts.overflow) {\n      style.overflow = "hidden";\n      anim.always(function () {\n        style.overflow = opts.overflow[0];\n        style.overflowX = opts.overflow[1];\n        style.overflowY = opts.overflow[2];\n      });\n    }\n\n    // Implement show/hide animations\n    propTween = false;\n    for (prop in orig) {\n      // General show/hide setup for this element animation\n      if (!propTween) {\n        if (dataShow) {\n          if ("hidden" in dataShow) {\n            hidden = dataShow.hidden;\n          }\n        } else {\n          dataShow = dataPriv.access(elem, "fxshow", {\n            display: restoreDisplay\n          });\n        }\n\n        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"\n        if (toggle) {\n          dataShow.hidden = !hidden;\n        }\n\n        // Show elements before animating them\n        if (hidden) {\n          showHide([elem], true);\n        }\n\n        /* eslint-disable no-loop-func */\n\n        anim.done(function () {\n          /* eslint-enable no-loop-func */\n\n          // The final step of a "hide" animation is actually hiding the element\n          if (!hidden) {\n            showHide([elem]);\n          }\n          dataPriv.remove(elem, "fxshow");\n          for (prop in orig) {\n            jQuery.style(elem, prop, orig[prop]);\n          }\n        });\n      }\n\n      // Per-property setup\n      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n      if (!(prop in dataShow)) {\n        dataShow[prop] = propTween.start;\n        if (hidden) {\n          propTween.end = propTween.start;\n          propTween.start = 0;\n        }\n      }\n    }\n  }\n  function propFilter(props, specialEasing) {\n    var index, name, easing, value, hooks;\n\n    // camelCase, specialEasing and expand cssHook pass\n    for (index in props) {\n      name = camelCase(index);\n      easing = specialEasing[name];\n      value = props[index];\n      if (Array.isArray(value)) {\n        easing = value[1];\n        value = props[index] = value[0];\n      }\n      if (index !== name) {\n        props[name] = value;\n        delete props[index];\n      }\n      hooks = jQuery.cssHooks[name];\n      if (hooks && "expand" in hooks) {\n        value = hooks.expand(value);\n        delete props[name];\n\n        // Not quite $.extend, this won\'t overwrite existing keys.\n        // Reusing \'index\' because we have the correct "name"\n        for (index in value) {\n          if (!(index in props)) {\n            props[index] = value[index];\n            specialEasing[index] = easing;\n          }\n        }\n      } else {\n        specialEasing[name] = easing;\n      }\n    }\n  }\n  function Animation(elem, properties, options) {\n    var result,\n      stopped,\n      index = 0,\n      length = Animation.prefilters.length,\n      deferred = jQuery.Deferred().always(function () {\n        // Don\'t match elem in the :animated selector\n        delete tick.elem;\n      }),\n      tick = function tick() {\n        if (stopped) {\n          return false;\n        }\n        var currentTime = fxNow || createFxNow(),\n          remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n          // Support: Android 2.3 only\n          // Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n          temp = remaining / animation.duration || 0,\n          percent = 1 - temp,\n          index = 0,\n          length = animation.tweens.length;\n        for (; index < length; index++) {\n          animation.tweens[index].run(percent);\n        }\n        deferred.notifyWith(elem, [animation, percent, remaining]);\n\n        // If there\'s more to do, yield\n        if (percent < 1 && length) {\n          return remaining;\n        }\n\n        // If this was an empty animation, synthesize a final progress notification\n        if (!length) {\n          deferred.notifyWith(elem, [animation, 1, 0]);\n        }\n\n        // Resolve the animation and report its conclusion\n        deferred.resolveWith(elem, [animation]);\n        return false;\n      },\n      animation = deferred.promise({\n        elem: elem,\n        props: jQuery.extend({}, properties),\n        opts: jQuery.extend(true, {\n          specialEasing: {},\n          easing: jQuery.easing._default\n        }, options),\n        originalProperties: properties,\n        originalOptions: options,\n        startTime: fxNow || createFxNow(),\n        duration: options.duration,\n        tweens: [],\n        createTween: function createTween(prop, end) {\n          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n          animation.tweens.push(tween);\n          return tween;\n        },\n        stop: function stop(gotoEnd) {\n          var index = 0,\n            // If we are going to the end, we want to run all the tweens\n            // otherwise we skip this part\n            length = gotoEnd ? animation.tweens.length : 0;\n          if (stopped) {\n            return this;\n          }\n          stopped = true;\n          for (; index < length; index++) {\n            animation.tweens[index].run(1);\n          }\n\n          // Resolve when we played the last frame; otherwise, reject\n          if (gotoEnd) {\n            deferred.notifyWith(elem, [animation, 1, 0]);\n            deferred.resolveWith(elem, [animation, gotoEnd]);\n          } else {\n            deferred.rejectWith(elem, [animation, gotoEnd]);\n          }\n          return this;\n        }\n      }),\n      props = animation.props;\n    propFilter(props, animation.opts.specialEasing);\n    for (; index < length; index++) {\n      result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n      if (result) {\n        if (isFunction(result.stop)) {\n          jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);\n        }\n        return result;\n      }\n    }\n    jQuery.map(props, createTween, animation);\n    if (isFunction(animation.opts.start)) {\n      animation.opts.start.call(elem, animation);\n    }\n\n    // Attach callbacks from options\n    animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n    jQuery.fx.timer(jQuery.extend(tick, {\n      elem: elem,\n      anim: animation,\n      queue: animation.opts.queue\n    }));\n    return animation;\n  }\n  jQuery.Animation = jQuery.extend(Animation, {\n    tweeners: {\n      "*": [function (prop, value) {\n        var tween = this.createTween(prop, value);\n        adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n        return tween;\n      }]\n    },\n    tweener: function tweener(props, callback) {\n      if (isFunction(props)) {\n        callback = props;\n        props = ["*"];\n      } else {\n        props = props.match(rnothtmlwhite);\n      }\n      var prop,\n        index = 0,\n        length = props.length;\n      for (; index < length; index++) {\n        prop = props[index];\n        Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n        Animation.tweeners[prop].unshift(callback);\n      }\n    },\n    prefilters: [defaultPrefilter],\n    prefilter: function prefilter(callback, prepend) {\n      if (prepend) {\n        Animation.prefilters.unshift(callback);\n      } else {\n        Animation.prefilters.push(callback);\n      }\n    }\n  });\n  jQuery.speed = function (speed, easing, fn) {\n    var opt = speed && _typeof(speed) === "object" ? jQuery.extend({}, speed) : {\n      complete: fn || !fn && easing || isFunction(speed) && speed,\n      duration: speed,\n      easing: fn && easing || easing && !isFunction(easing) && easing\n    };\n\n    // Go to the end state if fx are off\n    if (jQuery.fx.off) {\n      opt.duration = 0;\n    } else {\n      if (typeof opt.duration !== "number") {\n        if (opt.duration in jQuery.fx.speeds) {\n          opt.duration = jQuery.fx.speeds[opt.duration];\n        } else {\n          opt.duration = jQuery.fx.speeds._default;\n        }\n      }\n    }\n\n    // Normalize opt.queue - true/undefined/null -> "fx"\n    if (opt.queue == null || opt.queue === true) {\n      opt.queue = "fx";\n    }\n\n    // Queueing\n    opt.old = opt.complete;\n    opt.complete = function () {\n      if (isFunction(opt.old)) {\n        opt.old.call(this);\n      }\n      if (opt.queue) {\n        jQuery.dequeue(this, opt.queue);\n      }\n    };\n    return opt;\n  };\n  jQuery.fn.extend({\n    fadeTo: function fadeTo(speed, to, easing, callback) {\n      // Show any hidden elements after setting opacity to 0\n      return this.filter(isHiddenWithinTree).css("opacity", 0).show()\n\n      // Animate to the value specified\n      .end().animate({\n        opacity: to\n      }, speed, easing, callback);\n    },\n    animate: function animate(prop, speed, easing, callback) {\n      var empty = jQuery.isEmptyObject(prop),\n        optall = jQuery.speed(speed, easing, callback),\n        doAnimation = function doAnimation() {\n          // Operate on a copy of prop so per-property easing won\'t be lost\n          var anim = Animation(this, jQuery.extend({}, prop), optall);\n\n          // Empty animations, or finishing resolves immediately\n          if (empty || dataPriv.get(this, "finish")) {\n            anim.stop(true);\n          }\n        };\n      doAnimation.finish = doAnimation;\n      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n    },\n    stop: function stop(type, clearQueue, gotoEnd) {\n      var stopQueue = function stopQueue(hooks) {\n        var stop = hooks.stop;\n        delete hooks.stop;\n        stop(gotoEnd);\n      };\n      if (typeof type !== "string") {\n        gotoEnd = clearQueue;\n        clearQueue = type;\n        type = undefined;\n      }\n      if (clearQueue) {\n        this.queue(type || "fx", []);\n      }\n      return this.each(function () {\n        var dequeue = true,\n          index = type != null && type + "queueHooks",\n          timers = jQuery.timers,\n          data = dataPriv.get(this);\n        if (index) {\n          if (data[index] && data[index].stop) {\n            stopQueue(data[index]);\n          }\n        } else {\n          for (index in data) {\n            if (data[index] && data[index].stop && rrun.test(index)) {\n              stopQueue(data[index]);\n            }\n          }\n        }\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n            timers[index].anim.stop(gotoEnd);\n            dequeue = false;\n            timers.splice(index, 1);\n          }\n        }\n\n        // Start the next in the queue if the last step wasn\'t forced.\n        // Timers currently will call their complete callbacks, which\n        // will dequeue but only if they were gotoEnd.\n        if (dequeue || !gotoEnd) {\n          jQuery.dequeue(this, type);\n        }\n      });\n    },\n    finish: function finish(type) {\n      if (type !== false) {\n        type = type || "fx";\n      }\n      return this.each(function () {\n        var index,\n          data = dataPriv.get(this),\n          queue = data[type + "queue"],\n          hooks = data[type + "queueHooks"],\n          timers = jQuery.timers,\n          length = queue ? queue.length : 0;\n\n        // Enable finishing flag on private data\n        data.finish = true;\n\n        // Empty the queue first\n        jQuery.queue(this, type, []);\n        if (hooks && hooks.stop) {\n          hooks.stop.call(this, true);\n        }\n\n        // Look for any active animations, and finish them\n        for (index = timers.length; index--;) {\n          if (timers[index].elem === this && timers[index].queue === type) {\n            timers[index].anim.stop(true);\n            timers.splice(index, 1);\n          }\n        }\n\n        // Look for any animations in the old queue and finish them\n        for (index = 0; index < length; index++) {\n          if (queue[index] && queue[index].finish) {\n            queue[index].finish.call(this);\n          }\n        }\n\n        // Turn off finishing flag\n        delete data.finish;\n      });\n    }\n  });\n  jQuery.each(["toggle", "show", "hide"], function (_i, name) {\n    var cssFn = jQuery.fn[name];\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n    };\n  });\n\n  // Generate shortcuts for custom animations\n  jQuery.each({\n    slideDown: genFx("show"),\n    slideUp: genFx("hide"),\n    slideToggle: genFx("toggle"),\n    fadeIn: {\n      opacity: "show"\n    },\n    fadeOut: {\n      opacity: "hide"\n    },\n    fadeToggle: {\n      opacity: "toggle"\n    }\n  }, function (name, props) {\n    jQuery.fn[name] = function (speed, easing, callback) {\n      return this.animate(props, speed, easing, callback);\n    };\n  });\n  jQuery.timers = [];\n  jQuery.fx.tick = function () {\n    var timer,\n      i = 0,\n      timers = jQuery.timers;\n    fxNow = Date.now();\n    for (; i < timers.length; i++) {\n      timer = timers[i];\n\n      // Run the timer and safely remove it when done (allowing for external removal)\n      if (!timer() && timers[i] === timer) {\n        timers.splice(i--, 1);\n      }\n    }\n    if (!timers.length) {\n      jQuery.fx.stop();\n    }\n    fxNow = undefined;\n  };\n  jQuery.fx.timer = function (timer) {\n    jQuery.timers.push(timer);\n    jQuery.fx.start();\n  };\n  jQuery.fx.interval = 13;\n  jQuery.fx.start = function () {\n    if (inProgress) {\n      return;\n    }\n    inProgress = true;\n    schedule();\n  };\n  jQuery.fx.stop = function () {\n    inProgress = null;\n  };\n  jQuery.fx.speeds = {\n    slow: 600,\n    fast: 200,\n    // Default speed\n    _default: 400\n  };\n\n  // Based off of the plugin by Clint Helfers, with permission.\n  jQuery.fn.delay = function (time, type) {\n    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n    type = type || "fx";\n    return this.queue(type, function (next, hooks) {\n      var timeout = window.setTimeout(next, time);\n      hooks.stop = function () {\n        window.clearTimeout(timeout);\n      };\n    });\n  };\n  (function () {\n    var input = document.createElement("input"),\n      select = document.createElement("select"),\n      opt = select.appendChild(document.createElement("option"));\n    input.type = "checkbox";\n\n    // Support: Android <=4.3 only\n    // Default value for a checkbox should be "on"\n    support.checkOn = input.value !== "";\n\n    // Support: IE <=11 only\n    // Must access selectedIndex to make default options select\n    support.optSelected = opt.selected;\n\n    // Support: IE <=11 only\n    // An input loses its value after becoming a radio\n    input = document.createElement("input");\n    input.value = "t";\n    input.type = "radio";\n    support.radioValue = input.value === "t";\n  })();\n  var boolHook,\n    attrHandle = jQuery.expr.attrHandle;\n  jQuery.fn.extend({\n    attr: function attr(name, value) {\n      return access(this, jQuery.attr, name, value, arguments.length > 1);\n    },\n    removeAttr: function removeAttr(name) {\n      return this.each(function () {\n        jQuery.removeAttr(this, name);\n      });\n    }\n  });\n  jQuery.extend({\n    attr: function attr(elem, name, value) {\n      var ret,\n        hooks,\n        nType = elem.nodeType;\n\n      // Don\'t get/set attributes on text, comment and attribute nodes\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n\n      // Fallback to prop when attributes are not supported\n      if (typeof elem.getAttribute === "undefined") {\n        return jQuery.prop(elem, name, value);\n      }\n\n      // Attribute hooks are determined by the lowercase version\n      // Grab necessary hook if one is defined\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n      }\n      if (value !== undefined) {\n        if (value === null) {\n          jQuery.removeAttr(elem, name);\n          return;\n        }\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n        elem.setAttribute(name, value + "");\n        return value;\n      }\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n      ret = jQuery.find.attr(elem, name);\n\n      // Non-existent attributes return null, we normalize to undefined\n      return ret == null ? undefined : ret;\n    },\n    attrHooks: {\n      type: {\n        set: function set(elem, value) {\n          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {\n            var val = elem.value;\n            elem.setAttribute("type", value);\n            if (val) {\n              elem.value = val;\n            }\n            return value;\n          }\n        }\n      }\n    },\n    removeAttr: function removeAttr(elem, value) {\n      var name,\n        i = 0,\n        // Attribute names can contain non-HTML whitespace characters\n        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n        attrNames = value && value.match(rnothtmlwhite);\n      if (attrNames && elem.nodeType === 1) {\n        while (name = attrNames[i++]) {\n          elem.removeAttribute(name);\n        }\n      }\n    }\n  });\n\n  // Hooks for boolean attributes\n  boolHook = {\n    set: function set(elem, value, name) {\n      if (value === false) {\n        // Remove boolean attributes when set to false\n        jQuery.removeAttr(elem, name);\n      } else {\n        elem.setAttribute(name, name);\n      }\n      return name;\n    }\n  };\n  jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (_i, name) {\n    var getter = attrHandle[name] || jQuery.find.attr;\n    attrHandle[name] = function (elem, name, isXML) {\n      var ret,\n        handle,\n        lowercaseName = name.toLowerCase();\n      if (!isXML) {\n        // Avoid an infinite loop by temporarily removing this function from the getter\n        handle = attrHandle[lowercaseName];\n        attrHandle[lowercaseName] = ret;\n        ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n        attrHandle[lowercaseName] = handle;\n      }\n      return ret;\n    };\n  });\n  var rfocusable = /^(?:input|select|textarea|button)$/i,\n    rclickable = /^(?:a|area)$/i;\n  jQuery.fn.extend({\n    prop: function prop(name, value) {\n      return access(this, jQuery.prop, name, value, arguments.length > 1);\n    },\n    removeProp: function removeProp(name) {\n      return this.each(function () {\n        delete this[jQuery.propFix[name] || name];\n      });\n    }\n  });\n  jQuery.extend({\n    prop: function prop(elem, name, value) {\n      var ret,\n        hooks,\n        nType = elem.nodeType;\n\n      // Don\'t get/set properties on text, comment and attribute nodes\n      if (nType === 3 || nType === 8 || nType === 2) {\n        return;\n      }\n      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n        // Fix name and attach hooks\n        name = jQuery.propFix[name] || name;\n        hooks = jQuery.propHooks[name];\n      }\n      if (value !== undefined) {\n        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n          return ret;\n        }\n        return elem[name] = value;\n      }\n      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {\n        return ret;\n      }\n      return elem[name];\n    },\n    propHooks: {\n      tabIndex: {\n        get: function get(elem) {\n          // Support: IE <=9 - 11 only\n          // elem.tabIndex doesn\'t always return the\n          // correct value when it hasn\'t been explicitly set\n          // Use proper attribute retrieval (trac-12072)\n          var tabindex = jQuery.find.attr(elem, "tabindex");\n          if (tabindex) {\n            return parseInt(tabindex, 10);\n          }\n          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n            return 0;\n          }\n          return -1;\n        }\n      }\n    },\n    propFix: {\n      "for": "htmlFor",\n      "class": "className"\n    }\n  });\n\n  // Support: IE <=11 only\n  // Accessing the selectedIndex property\n  // forces the browser to respect setting selected\n  // on the option\n  // The getter ensures a default option is selected\n  // when in an optgroup\n  // eslint rule "no-unused-expressions" is disabled for this code\n  // since it considers such accessions noop\n  if (!support.optSelected) {\n    jQuery.propHooks.selected = {\n      get: function get(elem) {\n        /* eslint no-unused-expressions: "off" */\n\n        var parent = elem.parentNode;\n        if (parent && parent.parentNode) {\n          parent.parentNode.selectedIndex;\n        }\n        return null;\n      },\n      set: function set(elem) {\n        /* eslint no-unused-expressions: "off" */\n\n        var parent = elem.parentNode;\n        if (parent) {\n          parent.selectedIndex;\n          if (parent.parentNode) {\n            parent.parentNode.selectedIndex;\n          }\n        }\n      }\n    };\n  }\n  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {\n    jQuery.propFix[this.toLowerCase()] = this;\n  });\n\n  // Strip and collapse whitespace according to HTML spec\n  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n  function stripAndCollapse(value) {\n    var tokens = value.match(rnothtmlwhite) || [];\n    return tokens.join(" ");\n  }\n  function getClass(elem) {\n    return elem.getAttribute && elem.getAttribute("class") || "";\n  }\n  function classesToArray(value) {\n    if (Array.isArray(value)) {\n      return value;\n    }\n    if (typeof value === "string") {\n      return value.match(rnothtmlwhite) || [];\n    }\n    return [];\n  }\n  jQuery.fn.extend({\n    addClass: function addClass(value) {\n      var classNames, cur, curValue, className, i, finalValue;\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).addClass(value.call(this, j, getClass(this)));\n        });\n      }\n      classNames = classesToArray(value);\n      if (classNames.length) {\n        return this.each(function () {\n          curValue = getClass(this);\n          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n          if (cur) {\n            for (i = 0; i < classNames.length; i++) {\n              className = classNames[i];\n              if (cur.indexOf(" " + className + " ") < 0) {\n                cur += className + " ";\n              }\n            }\n\n            // Only assign if different to avoid unneeded rendering.\n            finalValue = stripAndCollapse(cur);\n            if (curValue !== finalValue) {\n              this.setAttribute("class", finalValue);\n            }\n          }\n        });\n      }\n      return this;\n    },\n    removeClass: function removeClass(value) {\n      var classNames, cur, curValue, className, i, finalValue;\n      if (isFunction(value)) {\n        return this.each(function (j) {\n          jQuery(this).removeClass(value.call(this, j, getClass(this)));\n        });\n      }\n      if (!arguments.length) {\n        return this.attr("class", "");\n      }\n      classNames = classesToArray(value);\n      if (classNames.length) {\n        return this.each(function () {\n          curValue = getClass(this);\n\n          // This expression is here for better compressibility (see addClass)\n          cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";\n          if (cur) {\n            for (i = 0; i < classNames.length; i++) {\n              className = classNames[i];\n\n              // Remove *all* instances\n              while (cur.indexOf(" " + className + " ") > -1) {\n                cur = cur.replace(" " + className + " ", " ");\n              }\n            }\n\n            // Only assign if different to avoid unneeded rendering.\n            finalValue = stripAndCollapse(cur);\n            if (curValue !== finalValue) {\n              this.setAttribute("class", finalValue);\n            }\n          }\n        });\n      }\n      return this;\n    },\n    toggleClass: function toggleClass(value, stateVal) {\n      var classNames,\n        className,\n        i,\n        self,\n        type = _typeof(value),\n        isValidValue = type === "string" || Array.isArray(value);\n      if (isFunction(value)) {\n        return this.each(function (i) {\n          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n        });\n      }\n      if (typeof stateVal === "boolean" && isValidValue) {\n        return stateVal ? this.addClass(value) : this.removeClass(value);\n      }\n      classNames = classesToArray(value);\n      return this.each(function () {\n        if (isValidValue) {\n          // Toggle individual class names\n          self = jQuery(this);\n          for (i = 0; i < classNames.length; i++) {\n            className = classNames[i];\n\n            // Check each className given, space separated list\n            if (self.hasClass(className)) {\n              self.removeClass(className);\n            } else {\n              self.addClass(className);\n            }\n          }\n\n          // Toggle whole class name\n        } else if (value === undefined || type === "boolean") {\n          className = getClass(this);\n          if (className) {\n            // Store className if set\n            dataPriv.set(this, "__className__", className);\n          }\n\n          // If the element has a class name or if we\'re passed `false`,\n          // then remove the whole classname (if there was one, the above saved it).\n          // Otherwise bring back whatever was previously saved (if anything),\n          // falling back to the empty string if nothing was stored.\n          if (this.setAttribute) {\n            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");\n          }\n        }\n      });\n    },\n    hasClass: function hasClass(selector) {\n      var className,\n        elem,\n        i = 0;\n      className = " " + selector + " ";\n      while (elem = this[i++]) {\n        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n  var rreturn = /\\r/g;\n  jQuery.fn.extend({\n    val: function val(value) {\n      var hooks,\n        ret,\n        valueIsFunction,\n        elem = this[0];\n      if (!arguments.length) {\n        if (elem) {\n          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {\n            return ret;\n          }\n          ret = elem.value;\n\n          // Handle most common string cases\n          if (typeof ret === "string") {\n            return ret.replace(rreturn, "");\n          }\n\n          // Handle cases where value is null/undef or number\n          return ret == null ? "" : ret;\n        }\n        return;\n      }\n      valueIsFunction = isFunction(value);\n      return this.each(function (i) {\n        var val;\n        if (this.nodeType !== 1) {\n          return;\n        }\n        if (valueIsFunction) {\n          val = value.call(this, i, jQuery(this).val());\n        } else {\n          val = value;\n        }\n\n        // Treat null/undefined as ""; convert numbers to string\n        if (val == null) {\n          val = "";\n        } else if (typeof val === "number") {\n          val += "";\n        } else if (Array.isArray(val)) {\n          val = jQuery.map(val, function (value) {\n            return value == null ? "" : value + "";\n          });\n        }\n        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];\n\n        // If set returns undefined, fall back to normal setting\n        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {\n          this.value = val;\n        }\n      });\n    }\n  });\n  jQuery.extend({\n    valHooks: {\n      option: {\n        get: function get(elem) {\n          var val = jQuery.find.attr(elem, "value");\n          return val != null ? val :\n          // Support: IE <=10 - 11 only\n          // option.text throws exceptions (trac-14686, trac-14858)\n          // Strip and collapse whitespace\n          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n          stripAndCollapse(jQuery.text(elem));\n        }\n      },\n      select: {\n        get: function get(elem) {\n          var value,\n            option,\n            i,\n            options = elem.options,\n            index = elem.selectedIndex,\n            one = elem.type === "select-one",\n            values = one ? null : [],\n            max = one ? index + 1 : options.length;\n          if (index < 0) {\n            i = max;\n          } else {\n            i = one ? index : 0;\n          }\n\n          // Loop through all the selected options\n          for (; i < max; i++) {\n            option = options[i];\n\n            // Support: IE <=9 only\n            // IE8-9 doesn\'t update selected after form reset (trac-2551)\n            if ((option.selected || i === index) &&\n            // Don\'t return options that are disabled or in a disabled optgroup\n            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {\n              // Get the specific value for the option\n              value = jQuery(option).val();\n\n              // We don\'t need an array for one selects\n              if (one) {\n                return value;\n              }\n\n              // Multi-Selects return an array\n              values.push(value);\n            }\n          }\n          return values;\n        },\n        set: function set(elem, value) {\n          var optionSet,\n            option,\n            options = elem.options,\n            values = jQuery.makeArray(value),\n            i = options.length;\n          while (i--) {\n            option = options[i];\n\n            /* eslint-disable no-cond-assign */\n\n            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n              optionSet = true;\n            }\n\n            /* eslint-enable no-cond-assign */\n          }\n\n          // Force browsers to behave consistently when non-matching value is set\n          if (!optionSet) {\n            elem.selectedIndex = -1;\n          }\n          return values;\n        }\n      }\n    }\n  });\n\n  // Radios and checkboxes getter/setter\n  jQuery.each(["radio", "checkbox"], function () {\n    jQuery.valHooks[this] = {\n      set: function set(elem, value) {\n        if (Array.isArray(value)) {\n          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n        }\n      }\n    };\n    if (!support.checkOn) {\n      jQuery.valHooks[this].get = function (elem) {\n        return elem.getAttribute("value") === null ? "on" : elem.value;\n      };\n    }\n  });\n\n  // Return jQuery for attributes-only inclusion\n  var location = window.location;\n  var nonce = {\n    guid: Date.now()\n  };\n  var rquery = /\\?/;\n\n  // Cross-browser xml parsing\n  jQuery.parseXML = function (data) {\n    var xml, parserErrorElem;\n    if (!data || typeof data !== "string") {\n      return null;\n    }\n\n    // Support: IE 9 - 11 only\n    // IE throws on parseFromString with invalid input.\n    try {\n      xml = new window.DOMParser().parseFromString(data, "text/xml");\n    } catch (e) {}\n    parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];\n    if (!xml || parserErrorElem) {\n      jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function (el) {\n        return el.textContent;\n      }).join("\\n") : data));\n    }\n    return xml;\n  };\n  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n    stopPropagationCallback = function stopPropagationCallback(e) {\n      e.stopPropagation();\n    };\n  jQuery.extend(jQuery.event, {\n    trigger: function trigger(event, data, elem, onlyHandlers) {\n      var i,\n        cur,\n        tmp,\n        bubbleType,\n        ontype,\n        handle,\n        special,\n        lastElement,\n        eventPath = [elem || document],\n        type = hasOwn.call(event, "type") ? event.type : event,\n        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];\n      cur = lastElement = tmp = elem = elem || document;\n\n      // Don\'t do events on text and comment nodes\n      if (elem.nodeType === 3 || elem.nodeType === 8) {\n        return;\n      }\n\n      // focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n      if (rfocusMorph.test(type + jQuery.event.triggered)) {\n        return;\n      }\n      if (type.indexOf(".") > -1) {\n        // Namespaced trigger; create a regexp to match event type in handle()\n        namespaces = type.split(".");\n        type = namespaces.shift();\n        namespaces.sort();\n      }\n      ontype = type.indexOf(":") < 0 && "on" + type;\n\n      // Caller can pass in a jQuery.Event object, Object, or just an event type string\n      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event);\n\n      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n      event.isTrigger = onlyHandlers ? 2 : 3;\n      event.namespace = namespaces.join(".");\n      event.rnamespace = event.namespace ? new RegExp("(^|\\\\.)" + namespaces.join("\\\\.(?:.*\\\\.|)") + "(\\\\.|$)") : null;\n\n      // Clean up the event in case it is being reused\n      event.result = undefined;\n      if (!event.target) {\n        event.target = elem;\n      }\n\n      // Clone any incoming data and prepend the event, creating the handler arg list\n      data = data == null ? [event] : jQuery.makeArray(data, [event]);\n\n      // Allow special events to draw outside the lines\n      special = jQuery.event.special[type] || {};\n      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n        return;\n      }\n\n      // Determine event propagation path in advance, per W3C events spec (trac-9951)\n      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {\n        bubbleType = special.delegateType || type;\n        if (!rfocusMorph.test(bubbleType + type)) {\n          cur = cur.parentNode;\n        }\n        for (; cur; cur = cur.parentNode) {\n          eventPath.push(cur);\n          tmp = cur;\n        }\n\n        // Only add window if we got to document (e.g., not plain obj or detached DOM)\n        if (tmp === (elem.ownerDocument || document)) {\n          eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n        }\n      }\n\n      // Fire handlers on the event path\n      i = 0;\n      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n        lastElement = cur;\n        event.type = i > 1 ? bubbleType : special.bindType || type;\n\n        // jQuery handler\n        handle = (dataPriv.get(cur, "events") || Object.create(null))[event.type] && dataPriv.get(cur, "handle");\n        if (handle) {\n          handle.apply(cur, data);\n        }\n\n        // Native handler\n        handle = ontype && cur[ontype];\n        if (handle && handle.apply && acceptData(cur)) {\n          event.result = handle.apply(cur, data);\n          if (event.result === false) {\n            event.preventDefault();\n          }\n        }\n      }\n      event.type = type;\n\n      // If nobody prevented the default action, do it now\n      if (!onlyHandlers && !event.isDefaultPrevented()) {\n        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n          // Call a native DOM method on the target with the same name as the event.\n          // Don\'t do default actions on window, that\'s where global variables be (trac-6170)\n          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {\n            // Don\'t re-trigger an onFOO event when we call its FOO() method\n            tmp = elem[ontype];\n            if (tmp) {\n              elem[ontype] = null;\n            }\n\n            // Prevent re-triggering of the same event, since we already bubbled it above\n            jQuery.event.triggered = type;\n            if (event.isPropagationStopped()) {\n              lastElement.addEventListener(type, stopPropagationCallback);\n            }\n            elem[type]();\n            if (event.isPropagationStopped()) {\n              lastElement.removeEventListener(type, stopPropagationCallback);\n            }\n            jQuery.event.triggered = undefined;\n            if (tmp) {\n              elem[ontype] = tmp;\n            }\n          }\n        }\n      }\n      return event.result;\n    },\n    // Piggyback on a donor event to simulate a different one\n    // Used only for `focus(in | out)` events\n    simulate: function simulate(type, elem, event) {\n      var e = jQuery.extend(new jQuery.Event(), event, {\n        type: type,\n        isSimulated: true\n      });\n      jQuery.event.trigger(e, null, elem);\n    }\n  });\n  jQuery.fn.extend({\n    trigger: function trigger(type, data) {\n      return this.each(function () {\n        jQuery.event.trigger(type, data, this);\n      });\n    },\n    triggerHandler: function triggerHandler(type, data) {\n      var elem = this[0];\n      if (elem) {\n        return jQuery.event.trigger(type, data, elem, true);\n      }\n    }\n  });\n  var rbracket = /\\[\\]$/,\n    rCRLF = /\\r?\\n/g,\n    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n    rsubmittable = /^(?:input|select|textarea|keygen)/i;\n  function buildParams(prefix, obj, traditional, add) {\n    var name;\n    if (Array.isArray(obj)) {\n      // Serialize array item.\n      jQuery.each(obj, function (i, v) {\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v);\n        } else {\n          // Item is non-scalar (array or object), encode its numeric index.\n          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);\n        }\n      });\n    } else if (!traditional && toType(obj) === "object") {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);\n      }\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj);\n    }\n  }\n\n  // Serialize an array of form elements or a set of\n  // key/values into a query string\n  jQuery.param = function (a, traditional) {\n    var prefix,\n      s = [],\n      add = function add(key, valueOrFunction) {\n        // If value is a function, invoke it and use its return value\n        var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);\n      };\n    if (a == null) {\n      return "";\n    }\n\n    // If an array was passed in, assume that it is an array of form elements.\n    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n      // Serialize the form elements\n      jQuery.each(a, function () {\n        add(this.name, this.value);\n      });\n    } else {\n      // If traditional, encode the "old" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in a) {\n        buildParams(prefix, a[prefix], traditional, add);\n      }\n    }\n\n    // Return the resulting serialization\n    return s.join("&");\n  };\n  jQuery.fn.extend({\n    serialize: function serialize() {\n      return jQuery.param(this.serializeArray());\n    },\n    serializeArray: function serializeArray() {\n      return this.map(function () {\n        // Can add propHook for "elements" to filter or add form elements\n        var elements = jQuery.prop(this, "elements");\n        return elements ? jQuery.makeArray(elements) : this;\n      }).filter(function () {\n        var type = this.type;\n\n        // Use .is( ":disabled" ) so that fieldset[disabled] works\n        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n      }).map(function (_i, elem) {\n        var val = jQuery(this).val();\n        if (val == null) {\n          return null;\n        }\n        if (Array.isArray(val)) {\n          return jQuery.map(val, function (val) {\n            return {\n              name: elem.name,\n              value: val.replace(rCRLF, "\\r\\n")\n            };\n          });\n        }\n        return {\n          name: elem.name,\n          value: val.replace(rCRLF, "\\r\\n")\n        };\n      }).get();\n    }\n  });\n  var r20 = /%20/g,\n    rhash = /#.*$/,\n    rantiCache = /([?&])_=[^&]*/,\n    rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n    // trac-7653, trac-8125, trac-8152: local protocol detection\n    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n    rnoContent = /^(?:GET|HEAD)$/,\n    rprotocol = /^\\/\\//,\n    /* Prefilters\n     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n     * 2) These are called:\n     *    - BEFORE asking for a transport\n     *    - AFTER param serialization (s.data is a string if s.processData is true)\n     * 3) key is the dataType\n     * 4) the catchall symbol "*" can be used\n     * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n     */\n    prefilters = {},\n    /* Transports bindings\n     * 1) key is the dataType\n     * 2) the catchall symbol "*" can be used\n     * 3) selection will start with transport dataType and THEN go to "*" if needed\n     */\n    transports = {},\n    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n    allTypes = "*/".concat("*"),\n    // Anchor tag for parsing the document origin\n    originAnchor = document.createElement("a");\n  originAnchor.href = location.href;\n\n  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n  function addToPrefiltersOrTransports(structure) {\n    // dataTypeExpression is optional and defaults to "*"\n    return function (dataTypeExpression, func) {\n      if (typeof dataTypeExpression !== "string") {\n        func = dataTypeExpression;\n        dataTypeExpression = "*";\n      }\n      var dataType,\n        i = 0,\n        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n      if (isFunction(func)) {\n        // For each dataType in the dataTypeExpression\n        while (dataType = dataTypes[i++]) {\n          // Prepend if requested\n          if (dataType[0] === "+") {\n            dataType = dataType.slice(1) || "*";\n            (structure[dataType] = structure[dataType] || []).unshift(func);\n\n            // Otherwise append\n          } else {\n            (structure[dataType] = structure[dataType] || []).push(func);\n          }\n        }\n      }\n    };\n  }\n\n  // Base inspection function for prefilters and transports\n  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n    var inspected = {},\n      seekingTransport = structure === transports;\n    function inspect(dataType) {\n      var selected;\n      inspected[dataType] = true;\n      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n          options.dataTypes.unshift(dataTypeOrTransport);\n          inspect(dataTypeOrTransport);\n          return false;\n        } else if (seekingTransport) {\n          return !(selected = dataTypeOrTransport);\n        }\n      });\n      return selected;\n    }\n    return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");\n  }\n\n  // A special extend for ajax options\n  // that takes "flat" options (not to be deep extended)\n  // Fixes trac-9887\n  function ajaxExtend(target, src) {\n    var key,\n      deep,\n      flatOptions = jQuery.ajaxSettings.flatOptions || {};\n    for (key in src) {\n      if (src[key] !== undefined) {\n        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n      }\n    }\n    if (deep) {\n      jQuery.extend(true, target, deep);\n    }\n    return target;\n  }\n\n  /* Handles responses to an ajax request:\n   * - finds the right dataType (mediates between content-type and expected dataType)\n   * - returns the corresponding response\n   */\n  function ajaxHandleResponses(s, jqXHR, responses) {\n    var ct,\n      type,\n      finalDataType,\n      firstDataType,\n      contents = s.contents,\n      dataTypes = s.dataTypes;\n\n    // Remove auto dataType and get content-type in the process\n    while (dataTypes[0] === "*") {\n      dataTypes.shift();\n      if (ct === undefined) {\n        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");\n      }\n    }\n\n    // Check if we\'re dealing with a known content-type\n    if (ct) {\n      for (type in contents) {\n        if (contents[type] && contents[type].test(ct)) {\n          dataTypes.unshift(type);\n          break;\n        }\n      }\n    }\n\n    // Check to see if we have a response for the expected dataType\n    if (dataTypes[0] in responses) {\n      finalDataType = dataTypes[0];\n    } else {\n      // Try convertible dataTypes\n      for (type in responses) {\n        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {\n          finalDataType = type;\n          break;\n        }\n        if (!firstDataType) {\n          firstDataType = type;\n        }\n      }\n\n      // Or just use first one\n      finalDataType = finalDataType || firstDataType;\n    }\n\n    // If we found a dataType\n    // We add the dataType to the list if needed\n    // and return the corresponding response\n    if (finalDataType) {\n      if (finalDataType !== dataTypes[0]) {\n        dataTypes.unshift(finalDataType);\n      }\n      return responses[finalDataType];\n    }\n  }\n\n  /* Chain conversions given the request and the original response\n   * Also sets the responseXXX fields on the jqXHR instance\n   */\n  function ajaxConvert(s, response, jqXHR, isSuccess) {\n    var conv2,\n      current,\n      conv,\n      tmp,\n      prev,\n      converters = {},\n      // Work with a copy of dataTypes in case we need to modify it for conversion\n      dataTypes = s.dataTypes.slice();\n\n    // Create converters map with lowercased keys\n    if (dataTypes[1]) {\n      for (conv in s.converters) {\n        converters[conv.toLowerCase()] = s.converters[conv];\n      }\n    }\n    current = dataTypes.shift();\n\n    // Convert to each sequential dataType\n    while (current) {\n      if (s.responseFields[current]) {\n        jqXHR[s.responseFields[current]] = response;\n      }\n\n      // Apply the dataFilter if provided\n      if (!prev && isSuccess && s.dataFilter) {\n        response = s.dataFilter(response, s.dataType);\n      }\n      prev = current;\n      current = dataTypes.shift();\n      if (current) {\n        // There\'s only work to do if current dataType is non-auto\n        if (current === "*") {\n          current = prev;\n\n          // Convert response if prev dataType is non-auto and differs from current\n        } else if (prev !== "*" && prev !== current) {\n          // Seek a direct converter\n          conv = converters[prev + " " + current] || converters["* " + current];\n\n          // If none found, seek a pair\n          if (!conv) {\n            for (conv2 in converters) {\n              // If conv2 outputs current\n              tmp = conv2.split(" ");\n              if (tmp[1] === current) {\n                // If prev can be converted to accepted input\n                conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];\n                if (conv) {\n                  // Condense equivalence converters\n                  if (conv === true) {\n                    conv = converters[conv2];\n\n                    // Otherwise, insert the intermediate dataType\n                  } else if (converters[conv2] !== true) {\n                    current = tmp[0];\n                    dataTypes.unshift(tmp[1]);\n                  }\n                  break;\n                }\n              }\n            }\n          }\n\n          // Apply converter (if not an equivalence)\n          if (conv !== true) {\n            // Unless errors are allowed to bubble, catch and return them\n            if (conv && s.throws) {\n              response = conv(response);\n            } else {\n              try {\n                response = conv(response);\n              } catch (e) {\n                return {\n                  state: "parsererror",\n                  error: conv ? e : "No conversion from " + prev + " to " + current\n                };\n              }\n            }\n          }\n        }\n      }\n    }\n    return {\n      state: "success",\n      data: response\n    };\n  }\n  jQuery.extend({\n    // Counter for holding the number of active queries\n    active: 0,\n    // Last-Modified header cache for next request\n    lastModified: {},\n    etag: {},\n    ajaxSettings: {\n      url: location.href,\n      type: "GET",\n      isLocal: rlocalProtocol.test(location.protocol),\n      global: true,\n      processData: true,\n      async: true,\n      contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n      /*\n      timeout: 0,\n      data: null,\n      dataType: null,\n      username: null,\n      password: null,\n      cache: null,\n      throws: false,\n      traditional: false,\n      headers: {},\n      */\n\n      accepts: {\n        "*": allTypes,\n        text: "text/plain",\n        html: "text/html",\n        xml: "application/xml, text/xml",\n        json: "application/json, text/javascript"\n      },\n      contents: {\n        xml: /\\bxml\\b/,\n        html: /\\bhtml/,\n        json: /\\bjson\\b/\n      },\n      responseFields: {\n        xml: "responseXML",\n        text: "responseText",\n        json: "responseJSON"\n      },\n      // Data converters\n      // Keys separate source (or catchall "*") and destination types with a single space\n      converters: {\n        // Convert anything to text\n        "* text": String,\n        // Text to html (true = no transformation)\n        "text html": true,\n        // Evaluate text as a json expression\n        "text json": JSON.parse,\n        // Parse text as xml\n        "text xml": jQuery.parseXML\n      },\n      // For options that shouldn\'t be deep extended:\n      // you can add your own custom options here if\n      // and when you create one that shouldn\'t be\n      // deep extended (see ajaxExtend)\n      flatOptions: {\n        url: true,\n        context: true\n      }\n    },\n    // Creates a full fledged settings object into target\n    // with both ajaxSettings and settings fields.\n    // If target is omitted, writes into ajaxSettings.\n    ajaxSetup: function ajaxSetup(target, settings) {\n      return settings ?\n      // Building a settings object\n      ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\n      // Extending ajaxSettings\n      ajaxExtend(jQuery.ajaxSettings, target);\n    },\n    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n    ajaxTransport: addToPrefiltersOrTransports(transports),\n    // Main method\n    ajax: function ajax(url, options) {\n      // If url is an object, simulate pre-1.5 signature\n      if (_typeof(url) === "object") {\n        options = url;\n        url = undefined;\n      }\n\n      // Force options to be an object\n      options = options || {};\n      var transport,\n        // URL without anti-cache param\n        cacheURL,\n        // Response headers\n        responseHeadersString,\n        responseHeaders,\n        // timeout handle\n        timeoutTimer,\n        // Url cleanup var\n        urlAnchor,\n        // Request state (becomes false upon send and true upon completion)\n        completed,\n        // To know if global events are to be dispatched\n        fireGlobals,\n        // Loop variable\n        i,\n        // uncached part of the url\n        uncached,\n        // Create the final options object\n        s = jQuery.ajaxSetup({}, options),\n        // Callbacks context\n        callbackContext = s.context || s,\n        // Context for global events is callbackContext if it is a DOM node or jQuery collection\n        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n        // Deferreds\n        deferred = jQuery.Deferred(),\n        completeDeferred = jQuery.Callbacks("once memory"),\n        // Status-dependent callbacks\n        _statusCode = s.statusCode || {},\n        // Headers (they are sent all at once)\n        requestHeaders = {},\n        requestHeadersNames = {},\n        // Default abort message\n        strAbort = "canceled",\n        // Fake xhr\n        jqXHR = {\n          readyState: 0,\n          // Builds headers hashtable if needed\n          getResponseHeader: function getResponseHeader(key) {\n            var match;\n            if (completed) {\n              if (!responseHeaders) {\n                responseHeaders = {};\n                while (match = rheaders.exec(responseHeadersString)) {\n                  responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);\n                }\n              }\n              match = responseHeaders[key.toLowerCase() + " "];\n            }\n            return match == null ? null : match.join(", ");\n          },\n          // Raw string\n          getAllResponseHeaders: function getAllResponseHeaders() {\n            return completed ? responseHeadersString : null;\n          },\n          // Caches the header\n          setRequestHeader: function setRequestHeader(name, value) {\n            if (completed == null) {\n              name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n              requestHeaders[name] = value;\n            }\n            return this;\n          },\n          // Overrides response content-type header\n          overrideMimeType: function overrideMimeType(type) {\n            if (completed == null) {\n              s.mimeType = type;\n            }\n            return this;\n          },\n          // Status-dependent callbacks\n          statusCode: function statusCode(map) {\n            var code;\n            if (map) {\n              if (completed) {\n                // Execute the appropriate callbacks\n                jqXHR.always(map[jqXHR.status]);\n              } else {\n                // Lazy-add the new callbacks in a way that preserves old ones\n                for (code in map) {\n                  _statusCode[code] = [_statusCode[code], map[code]];\n                }\n              }\n            }\n            return this;\n          },\n          // Cancel the request\n          abort: function abort(statusText) {\n            var finalText = statusText || strAbort;\n            if (transport) {\n              transport.abort(finalText);\n            }\n            done(0, finalText);\n            return this;\n          }\n        };\n\n      // Attach deferreds\n      deferred.promise(jqXHR);\n\n      // Add protocol if not provided (prefilters might expect it)\n      // Handle falsy url in the settings object (trac-10093: consistency with old signature)\n      // We also use the url parameter if available\n      s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");\n\n      // Alias method option to type as per ticket trac-12004\n      s.type = options.method || options.type || s.method || s.type;\n\n      // Extract dataTypes list\n      s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];\n\n      // A cross-domain request is in order when the origin doesn\'t match the current origin.\n      if (s.crossDomain == null) {\n        urlAnchor = document.createElement("a");\n\n        // Support: IE <=8 - 11, Edge 12 - 15\n        // IE throws exception on accessing the href property if url is malformed,\n        // e.g. http://example.com:80x/\n        try {\n          urlAnchor.href = s.url;\n\n          // Support: IE <=8 - 11 only\n          // Anchor\'s host property isn\'t correctly set when s.url is relative\n          urlAnchor.href = urlAnchor.href;\n          s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;\n        } catch (e) {\n          // If there is an error parsing the URL, assume it is crossDomain,\n          // it can be rejected by the transport if it is invalid\n          s.crossDomain = true;\n        }\n      }\n\n      // Convert data if not already a string\n      if (s.data && s.processData && typeof s.data !== "string") {\n        s.data = jQuery.param(s.data, s.traditional);\n      }\n\n      // Apply prefilters\n      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);\n\n      // If request was aborted inside a prefilter, stop there\n      if (completed) {\n        return jqXHR;\n      }\n\n      // We can fire global events as of now if asked to\n      // Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n      fireGlobals = jQuery.event && s.global;\n\n      // Watch for a new set of requests\n      if (fireGlobals && jQuery.active++ === 0) {\n        jQuery.event.trigger("ajaxStart");\n      }\n\n      // Uppercase the type\n      s.type = s.type.toUpperCase();\n\n      // Determine if request has content\n      s.hasContent = !rnoContent.test(s.type);\n\n      // Save the URL in case we\'re toying with the If-Modified-Since\n      // and/or If-None-Match header later on\n      // Remove hash to simplify url manipulation\n      cacheURL = s.url.replace(rhash, "");\n\n      // More options handling for requests with no content\n      if (!s.hasContent) {\n        // Remember the hash so we can put it back\n        uncached = s.url.slice(cacheURL.length);\n\n        // If data is available and should be processed, append data to url\n        if (s.data && (s.processData || typeof s.data === "string")) {\n          cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;\n\n          // trac-9682: remove data so that it\'s not used in an eventual retry\n          delete s.data;\n        }\n\n        // Add or update anti-cache param if needed\n        if (s.cache === false) {\n          cacheURL = cacheURL.replace(rantiCache, "$1");\n          uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;\n        }\n\n        // Put hash and anti-cache on the URL that will be requested (gh-1732)\n        s.url = cacheURL + uncached;\n\n        // Change \'%20\' to \'+\' if this is encoded form body content (gh-2658)\n      } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {\n        s.data = s.data.replace(r20, "+");\n      }\n\n      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n      if (s.ifModified) {\n        if (jQuery.lastModified[cacheURL]) {\n          jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);\n        }\n        if (jQuery.etag[cacheURL]) {\n          jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);\n        }\n      }\n\n      // Set the correct header, if data is being sent\n      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n        jqXHR.setRequestHeader("Content-Type", s.contentType);\n      }\n\n      // Set the Accepts header for the server, depending on the dataType\n      jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);\n\n      // Check for headers option\n      for (i in s.headers) {\n        jqXHR.setRequestHeader(i, s.headers[i]);\n      }\n\n      // Allow custom headers/mimetypes and early abort\n      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n        // Abort if not done already and return\n        return jqXHR.abort();\n      }\n\n      // Aborting is no longer a cancellation\n      strAbort = "abort";\n\n      // Install callbacks on deferreds\n      completeDeferred.add(s.complete);\n      jqXHR.done(s.success);\n      jqXHR.fail(s.error);\n\n      // Get transport\n      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);\n\n      // If no transport, we auto-abort\n      if (!transport) {\n        done(-1, "No Transport");\n      } else {\n        jqXHR.readyState = 1;\n\n        // Send global event\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxSend", [jqXHR, s]);\n        }\n\n        // If request was aborted inside ajaxSend, stop there\n        if (completed) {\n          return jqXHR;\n        }\n\n        // Timeout\n        if (s.async && s.timeout > 0) {\n          timeoutTimer = window.setTimeout(function () {\n            jqXHR.abort("timeout");\n          }, s.timeout);\n        }\n        try {\n          completed = false;\n          transport.send(requestHeaders, done);\n        } catch (e) {\n          // Rethrow post-completion exceptions\n          if (completed) {\n            throw e;\n          }\n\n          // Propagate others as results\n          done(-1, e);\n        }\n      }\n\n      // Callback for when everything is done\n      function done(status, nativeStatusText, responses, headers) {\n        var isSuccess,\n          success,\n          error,\n          response,\n          modified,\n          statusText = nativeStatusText;\n\n        // Ignore repeat invocations\n        if (completed) {\n          return;\n        }\n        completed = true;\n\n        // Clear timeout if it exists\n        if (timeoutTimer) {\n          window.clearTimeout(timeoutTimer);\n        }\n\n        // Dereference transport for early garbage collection\n        // (no matter how long the jqXHR object will be used)\n        transport = undefined;\n\n        // Cache response headers\n        responseHeadersString = headers || "";\n\n        // Set readyState\n        jqXHR.readyState = status > 0 ? 4 : 0;\n\n        // Determine if successful\n        isSuccess = status >= 200 && status < 300 || status === 304;\n\n        // Get response data\n        if (responses) {\n          response = ajaxHandleResponses(s, jqXHR, responses);\n        }\n\n        // Use a noop converter for missing script but not if jsonp\n        if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {\n          s.converters["text script"] = function () {};\n        }\n\n        // Convert no matter what (that way responseXXX fields are always set)\n        response = ajaxConvert(s, response, jqXHR, isSuccess);\n\n        // If successful, handle type chaining\n        if (isSuccess) {\n          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n          if (s.ifModified) {\n            modified = jqXHR.getResponseHeader("Last-Modified");\n            if (modified) {\n              jQuery.lastModified[cacheURL] = modified;\n            }\n            modified = jqXHR.getResponseHeader("etag");\n            if (modified) {\n              jQuery.etag[cacheURL] = modified;\n            }\n          }\n\n          // if no content\n          if (status === 204 || s.type === "HEAD") {\n            statusText = "nocontent";\n\n            // if not modified\n          } else if (status === 304) {\n            statusText = "notmodified";\n\n            // If we have data, let\'s convert it\n          } else {\n            statusText = response.state;\n            success = response.data;\n            error = response.error;\n            isSuccess = !error;\n          }\n        } else {\n          // Extract error from statusText and normalize for non-aborts\n          error = statusText;\n          if (status || !statusText) {\n            statusText = "error";\n            if (status < 0) {\n              status = 0;\n            }\n          }\n        }\n\n        // Set data for the fake xhr object\n        jqXHR.status = status;\n        jqXHR.statusText = (nativeStatusText || statusText) + "";\n\n        // Success/Error\n        if (isSuccess) {\n          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n        } else {\n          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n        }\n\n        // Status-dependent callbacks\n        jqXHR.statusCode(_statusCode);\n        _statusCode = undefined;\n        if (fireGlobals) {\n          globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);\n        }\n\n        // Complete\n        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n        if (fireGlobals) {\n          globalEventContext.trigger("ajaxComplete", [jqXHR, s]);\n\n          // Handle the global AJAX counter\n          if (! --jQuery.active) {\n            jQuery.event.trigger("ajaxStop");\n          }\n        }\n      }\n      return jqXHR;\n    },\n    getJSON: function getJSON(url, data, callback) {\n      return jQuery.get(url, data, callback, "json");\n    },\n    getScript: function getScript(url, callback) {\n      return jQuery.get(url, undefined, callback, "script");\n    }\n  });\n  jQuery.each(["get", "post"], function (_i, method) {\n    jQuery[method] = function (url, data, callback, type) {\n      // Shift arguments if data argument was omitted\n      if (isFunction(data)) {\n        type = type || callback;\n        callback = data;\n        data = undefined;\n      }\n\n      // The url can be an options object (which then must have .url)\n      return jQuery.ajax(jQuery.extend({\n        url: url,\n        type: method,\n        dataType: type,\n        data: data,\n        success: callback\n      }, jQuery.isPlainObject(url) && url));\n    };\n  });\n  jQuery.ajaxPrefilter(function (s) {\n    var i;\n    for (i in s.headers) {\n      if (i.toLowerCase() === "content-type") {\n        s.contentType = s.headers[i] || "";\n      }\n    }\n  });\n  jQuery._evalUrl = function (url, options, doc) {\n    return jQuery.ajax({\n      url: url,\n      // Make this explicit, since user can override this through ajaxSetup (trac-11264)\n      type: "GET",\n      dataType: "script",\n      cache: true,\n      async: false,\n      global: false,\n      // Only evaluate the response if it is successful (gh-4126)\n      // dataFilter is not invoked for failure responses, so using it instead\n      // of the default converter is kludgy but it works.\n      converters: {\n        "text script": function textScript() {}\n      },\n      dataFilter: function dataFilter(response) {\n        jQuery.globalEval(response, options, doc);\n      }\n    });\n  };\n  jQuery.fn.extend({\n    wrapAll: function wrapAll(html) {\n      var wrap;\n      if (this[0]) {\n        if (isFunction(html)) {\n          html = html.call(this[0]);\n        }\n\n        // The elements to wrap the target around\n        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n        if (this[0].parentNode) {\n          wrap.insertBefore(this[0]);\n        }\n        wrap.map(function () {\n          var elem = this;\n          while (elem.firstElementChild) {\n            elem = elem.firstElementChild;\n          }\n          return elem;\n        }).append(this);\n      }\n      return this;\n    },\n    wrapInner: function wrapInner(html) {\n      if (isFunction(html)) {\n        return this.each(function (i) {\n          jQuery(this).wrapInner(html.call(this, i));\n        });\n      }\n      return this.each(function () {\n        var self = jQuery(this),\n          contents = self.contents();\n        if (contents.length) {\n          contents.wrapAll(html);\n        } else {\n          self.append(html);\n        }\n      });\n    },\n    wrap: function wrap(html) {\n      var htmlIsFunction = isFunction(html);\n      return this.each(function (i) {\n        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);\n      });\n    },\n    unwrap: function unwrap(selector) {\n      this.parent(selector).not("body").each(function () {\n        jQuery(this).replaceWith(this.childNodes);\n      });\n      return this;\n    }\n  });\n  jQuery.expr.pseudos.hidden = function (elem) {\n    return !jQuery.expr.pseudos.visible(elem);\n  };\n  jQuery.expr.pseudos.visible = function (elem) {\n    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n  };\n  jQuery.ajaxSettings.xhr = function () {\n    try {\n      return new window.XMLHttpRequest();\n    } catch (e) {}\n  };\n  var xhrSuccessStatus = {\n      // File protocol always yields status code 0, assume 200\n      0: 200,\n      // Support: IE <=9 only\n      // trac-1450: sometimes IE returns 1223 when it should be 204\n      1223: 204\n    },\n    xhrSupported = jQuery.ajaxSettings.xhr();\n  support.cors = !!xhrSupported && "withCredentials" in xhrSupported;\n  support.ajax = xhrSupported = !!xhrSupported;\n  jQuery.ajaxTransport(function (options) {\n    var _callback, errorCallback;\n\n    // Cross domain only allowed if supported through XMLHttpRequest\n    if (support.cors || xhrSupported && !options.crossDomain) {\n      return {\n        send: function send(headers, complete) {\n          var i,\n            xhr = options.xhr();\n          xhr.open(options.type, options.url, options.async, options.username, options.password);\n\n          // Apply custom fields if provided\n          if (options.xhrFields) {\n            for (i in options.xhrFields) {\n              xhr[i] = options.xhrFields[i];\n            }\n          }\n\n          // Override mime type if needed\n          if (options.mimeType && xhr.overrideMimeType) {\n            xhr.overrideMimeType(options.mimeType);\n          }\n\n          // X-Requested-With header\n          // For cross-domain requests, seeing as conditions for a preflight are\n          // akin to a jigsaw puzzle, we simply never set it to be sure.\n          // (it can always be set on a per-request basis or even using ajaxSetup)\n          // For same-domain requests, won\'t change header if already provided.\n          if (!options.crossDomain && !headers["X-Requested-With"]) {\n            headers["X-Requested-With"] = "XMLHttpRequest";\n          }\n\n          // Set headers\n          for (i in headers) {\n            xhr.setRequestHeader(i, headers[i]);\n          }\n\n          // Callback\n          _callback = function callback(type) {\n            return function () {\n              if (_callback) {\n                _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;\n                if (type === "abort") {\n                  xhr.abort();\n                } else if (type === "error") {\n                  // Support: IE <=9 only\n                  // On a manual native abort, IE9 throws\n                  // errors on any property access that is not readyState\n                  if (typeof xhr.status !== "number") {\n                    complete(0, "error");\n                  } else {\n                    complete(\n                    // File: protocol always yields status 0; see trac-8605, trac-14207\n                    xhr.status, xhr.statusText);\n                  }\n                } else {\n                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,\n                  // Support: IE <=9 only\n                  // IE9 has no XHR2 but throws on binary (trac-11426)\n                  // For XHR2 non-text, let the caller handle it (gh-2498)\n                  (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? {\n                    binary: xhr.response\n                  } : {\n                    text: xhr.responseText\n                  }, xhr.getAllResponseHeaders());\n                }\n              }\n            };\n          };\n\n          // Listen to events\n          xhr.onload = _callback();\n          errorCallback = xhr.onerror = xhr.ontimeout = _callback("error");\n\n          // Support: IE 9 only\n          // Use onreadystatechange to replace onabort\n          // to handle uncaught aborts\n          if (xhr.onabort !== undefined) {\n            xhr.onabort = errorCallback;\n          } else {\n            xhr.onreadystatechange = function () {\n              // Check readyState before timeout as it changes\n              if (xhr.readyState === 4) {\n                // Allow onerror to be called first,\n                // but that will not handle a native abort\n                // Also, save errorCallback to a variable\n                // as xhr.onerror cannot be accessed\n                window.setTimeout(function () {\n                  if (_callback) {\n                    errorCallback();\n                  }\n                });\n              }\n            };\n          }\n\n          // Create the abort callback\n          _callback = _callback("abort");\n          try {\n            // Do send the request (this may raise an exception)\n            xhr.send(options.hasContent && options.data || null);\n          } catch (e) {\n            // trac-14683: Only rethrow if this hasn\'t been notified as an error yet\n            if (_callback) {\n              throw e;\n            }\n          }\n        },\n        abort: function abort() {\n          if (_callback) {\n            _callback();\n          }\n        }\n      };\n    }\n  });\n\n  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n  jQuery.ajaxPrefilter(function (s) {\n    if (s.crossDomain) {\n      s.contents.script = false;\n    }\n  });\n\n  // Install script dataType\n  jQuery.ajaxSetup({\n    accepts: {\n      script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"\n    },\n    contents: {\n      script: /\\b(?:java|ecma)script\\b/\n    },\n    converters: {\n      "text script": function textScript(text) {\n        jQuery.globalEval(text);\n        return text;\n      }\n    }\n  });\n\n  // Handle cache\'s special case and crossDomain\n  jQuery.ajaxPrefilter("script", function (s) {\n    if (s.cache === undefined) {\n      s.cache = false;\n    }\n    if (s.crossDomain) {\n      s.type = "GET";\n    }\n  });\n\n  // Bind script tag hack transport\n  jQuery.ajaxTransport("script", function (s) {\n    // This transport only deals with cross domain or forced-by-attrs requests\n    if (s.crossDomain || s.scriptAttrs) {\n      var script, _callback2;\n      return {\n        send: function send(_, complete) {\n          script = jQuery("<script>").attr(s.scriptAttrs || {}).prop({\n            charset: s.scriptCharset,\n            src: s.url\n          }).on("load error", _callback2 = function callback(evt) {\n            script.remove();\n            _callback2 = null;\n            if (evt) {\n              complete(evt.type === "error" ? 404 : 200, evt.type);\n            }\n          });\n\n          // Use native DOM manipulation to avoid our domManip AJAX trickery\n          document.head.appendChild(script[0]);\n        },\n        abort: function abort() {\n          if (_callback2) {\n            _callback2();\n          }\n        }\n      };\n    }\n  });\n  var oldCallbacks = [],\n    rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n  // Default jsonp settings\n  jQuery.ajaxSetup({\n    jsonp: "callback",\n    jsonpCallback: function jsonpCallback() {\n      var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;\n      this[callback] = true;\n      return callback;\n    }\n  });\n\n  // Detect, normalize options and install callbacks for jsonp requests\n  jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {\n    var callbackName,\n      overwritten,\n      responseContainer,\n      jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");\n\n    // Handle iff the expected data type is "jsonp" or we have a parameter to set\n    if (jsonProp || s.dataTypes[0] === "jsonp") {\n      // Get callback name, remembering preexisting value associated with it\n      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;\n\n      // Insert callback into url or form data\n      if (jsonProp) {\n        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);\n      } else if (s.jsonp !== false) {\n        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;\n      }\n\n      // Use data converter to retrieve json after script execution\n      s.converters["script json"] = function () {\n        if (!responseContainer) {\n          jQuery.error(callbackName + " was not called");\n        }\n        return responseContainer[0];\n      };\n\n      // Force json dataType\n      s.dataTypes[0] = "json";\n\n      // Install callback\n      overwritten = window[callbackName];\n      window[callbackName] = function () {\n        responseContainer = arguments;\n      };\n\n      // Clean-up function (fires after converters)\n      jqXHR.always(function () {\n        // If previous value didn\'t exist - remove it\n        if (overwritten === undefined) {\n          jQuery(window).removeProp(callbackName);\n\n          // Otherwise restore preexisting value\n        } else {\n          window[callbackName] = overwritten;\n        }\n\n        // Save back as free\n        if (s[callbackName]) {\n          // Make sure that re-using the options doesn\'t screw things around\n          s.jsonpCallback = originalSettings.jsonpCallback;\n\n          // Save the callback name for future use\n          oldCallbacks.push(callbackName);\n        }\n\n        // Call if it was a function and we have a response\n        if (responseContainer && isFunction(overwritten)) {\n          overwritten(responseContainer[0]);\n        }\n        responseContainer = overwritten = undefined;\n      });\n\n      // Delegate to script\n      return "script";\n    }\n  });\n\n  // Support: Safari 8 only\n  // In Safari 8 documents created via document.implementation.createHTMLDocument\n  // collapse sibling forms: the second one becomes a child of the first one.\n  // Because of that, this security measure has to be disabled in Safari 8.\n  // https://bugs.webkit.org/show_bug.cgi?id=137337\n  support.createHTMLDocument = function () {\n    var body = document.implementation.createHTMLDocument("").body;\n    body.innerHTML = "<form></form><form></form>";\n    return body.childNodes.length === 2;\n  }();\n\n  // Argument "data" should be string of html\n  // context (optional): If specified, the fragment will be created in this context,\n  // defaults to document\n  // keepScripts (optional): If true, will include scripts passed in the html string\n  jQuery.parseHTML = function (data, context, keepScripts) {\n    if (typeof data !== "string") {\n      return [];\n    }\n    if (typeof context === "boolean") {\n      keepScripts = context;\n      context = false;\n    }\n    var base, parsed, scripts;\n    if (!context) {\n      // Stop scripts or inline event handlers from being executed immediately\n      // by using document.implementation\n      if (support.createHTMLDocument) {\n        context = document.implementation.createHTMLDocument("");\n\n        // Set the base href for the created document\n        // so any parsed elements with URLs\n        // are based on the document\'s URL (gh-2965)\n        base = context.createElement("base");\n        base.href = document.location.href;\n        context.head.appendChild(base);\n      } else {\n        context = document;\n      }\n    }\n    parsed = rsingleTag.exec(data);\n    scripts = !keepScripts && [];\n\n    // Single tag\n    if (parsed) {\n      return [context.createElement(parsed[1])];\n    }\n    parsed = buildFragment([data], context, scripts);\n    if (scripts && scripts.length) {\n      jQuery(scripts).remove();\n    }\n    return jQuery.merge([], parsed.childNodes);\n  };\n\n  /**\n   * Load a url into a page\n   */\n  jQuery.fn.load = function (url, params, callback) {\n    var selector,\n      type,\n      response,\n      self = this,\n      off = url.indexOf(" ");\n    if (off > -1) {\n      selector = stripAndCollapse(url.slice(off));\n      url = url.slice(0, off);\n    }\n\n    // If it\'s a function\n    if (isFunction(params)) {\n      // We assume that it\'s the callback\n      callback = params;\n      params = undefined;\n\n      // Otherwise, build a param string\n    } else if (params && _typeof(params) === "object") {\n      type = "POST";\n    }\n\n    // If we have elements to modify, make the request\n    if (self.length > 0) {\n      jQuery.ajax({\n        url: url,\n        // If "type" variable is undefined, then "GET" method will be used.\n        // Make value of this field explicit since\n        // user can override it through ajaxSetup method\n        type: type || "GET",\n        dataType: "html",\n        data: params\n      }).done(function (responseText) {\n        // Save response for use in complete callback\n        response = arguments;\n        self.html(selector ?\n        // If a selector was specified, locate the right elements in a dummy div\n        // Exclude scripts to avoid IE \'Permission Denied\' errors\n        jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :\n        // Otherwise use the full result\n        responseText);\n\n        // If the request succeeds, this function gets "data", "status", "jqXHR"\n        // but they are ignored because response was set above.\n        // If it fails, this function gets "jqXHR", "status", "error"\n      }).always(callback && function (jqXHR, status) {\n        self.each(function () {\n          callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n        });\n      });\n    }\n    return this;\n  };\n  jQuery.expr.pseudos.animated = function (elem) {\n    return jQuery.grep(jQuery.timers, function (fn) {\n      return elem === fn.elem;\n    }).length;\n  };\n  jQuery.offset = {\n    setOffset: function setOffset(elem, options, i) {\n      var curPosition,\n        curLeft,\n        curCSSTop,\n        curTop,\n        curOffset,\n        curCSSLeft,\n        calculatePosition,\n        position = jQuery.css(elem, "position"),\n        curElem = jQuery(elem),\n        props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === "static") {\n        elem.style.position = "relative";\n      }\n      curOffset = curElem.offset();\n      curCSSTop = jQuery.css(elem, "top");\n      curCSSLeft = jQuery.css(elem, "left");\n      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = curElem.position();\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      if (isFunction(options)) {\n        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n        options = options.call(elem, i, jQuery.extend({}, curOffset));\n      }\n      if (options.top != null) {\n        props.top = options.top - curOffset.top + curTop;\n      }\n      if (options.left != null) {\n        props.left = options.left - curOffset.left + curLeft;\n      }\n      if ("using" in options) {\n        options.using.call(elem, props);\n      } else {\n        curElem.css(props);\n      }\n    }\n  };\n  jQuery.fn.extend({\n    // offset() relates an element\'s border box to the document origin\n    offset: function offset(options) {\n      // Preserve chaining for setter\n      if (arguments.length) {\n        return options === undefined ? this : this.each(function (i) {\n          jQuery.offset.setOffset(this, options, i);\n        });\n      }\n      var rect,\n        win,\n        elem = this[0];\n      if (!elem) {\n        return;\n      }\n\n      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n      // Support: IE <=11 only\n      // Running getBoundingClientRect on a\n      // disconnected node in IE throws an error\n      if (!elem.getClientRects().length) {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n\n      // Get document-relative position by adding viewport scroll to viewport-relative gBCR\n      rect = elem.getBoundingClientRect();\n      win = elem.ownerDocument.defaultView;\n      return {\n        top: rect.top + win.pageYOffset,\n        left: rect.left + win.pageXOffset\n      };\n    },\n    // position() relates an element\'s margin box to its offset parent\'s padding box\n    // This corresponds to the behavior of CSS absolute positioning\n    position: function position() {\n      if (!this[0]) {\n        return;\n      }\n      var offsetParent,\n        offset,\n        doc,\n        elem = this[0],\n        parentOffset = {\n          top: 0,\n          left: 0\n        };\n\n      // position:fixed elements are offset from the viewport, which itself always has zero offset\n      if (jQuery.css(elem, "position") === "fixed") {\n        // Assume position:fixed implies availability of getBoundingClientRect\n        offset = elem.getBoundingClientRect();\n      } else {\n        offset = this.offset();\n\n        // Account for the *real* offset parent, which can be the document or its root element\n        // when a statically positioned element is identified\n        doc = elem.ownerDocument;\n        offsetParent = elem.offsetParent || doc.documentElement;\n        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.parentNode;\n        }\n        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {\n          // Incorporate borders into its offset, since they are outside its content origin\n          parentOffset = jQuery(offsetParent).offset();\n          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);\n          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);\n        }\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),\n        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)\n      };\n    },\n    // This method will return documentElement in the following cases:\n    // 1) For the element inside the iframe without offsetParent, this method will return\n    //    documentElement of the parent window\n    // 2) For the hidden or detached element\n    // 3) For body or html element, i.e. in case of the html node - it will return itself\n    //\n    // but those exceptions were never presented as a real life use-cases\n    // and might be considered as more preferable results.\n    //\n    // This logic, however, is not guaranteed and can change at any point in the future\n    offsetParent: function offsetParent() {\n      return this.map(function () {\n        var offsetParent = this.offsetParent;\n        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {\n          offsetParent = offsetParent.offsetParent;\n        }\n        return offsetParent || documentElement;\n      });\n    }\n  });\n\n  // Create scrollLeft and scrollTop methods\n  jQuery.each({\n    scrollLeft: "pageXOffset",\n    scrollTop: "pageYOffset"\n  }, function (method, prop) {\n    var top = "pageYOffset" === prop;\n    jQuery.fn[method] = function (val) {\n      return access(this, function (elem, method, val) {\n        // Coalesce documents and windows\n        var win;\n        if (isWindow(elem)) {\n          win = elem;\n        } else if (elem.nodeType === 9) {\n          win = elem.defaultView;\n        }\n        if (val === undefined) {\n          return win ? win[prop] : elem[method];\n        }\n        if (win) {\n          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n        } else {\n          elem[method] = val;\n        }\n      }, method, val, arguments.length);\n    };\n  });\n\n  // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n  // Add the top/left cssHooks using jQuery.fn.position\n  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n  // getComputedStyle returns percent when specified for top/left/bottom/right;\n  // rather than make the css module depend on the offset module, just check for it here\n  jQuery.each(["top", "left"], function (_i, prop) {\n    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n      if (computed) {\n        computed = curCSS(elem, prop);\n\n        // If curCSS returns percentage, fallback to offset\n        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;\n      }\n    });\n  });\n\n  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n  jQuery.each({\n    Height: "height",\n    Width: "width"\n  }, function (name, type) {\n    jQuery.each({\n      padding: "inner" + name,\n      content: type,\n      "": "outer" + name\n    }, function (defaultExtra, funcName) {\n      // Margin is only for outerHeight, outerWidth\n      jQuery.fn[funcName] = function (margin, value) {\n        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),\n          extra = defaultExtra || (margin === true || value === true ? "margin" : "border");\n        return access(this, function (elem, type, value) {\n          var doc;\n          if (isWindow(elem)) {\n            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];\n          }\n\n          // Get document width or height\n          if (elem.nodeType === 9) {\n            doc = elem.documentElement;\n\n            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n            // whichever is greatest\n            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);\n          }\n          return value === undefined ?\n          // Get width or height on the element, requesting but not forcing parseFloat\n          jQuery.css(elem, type, extra) :\n          // Set width or height on the element\n          jQuery.style(elem, type, value, extra);\n        }, type, chainable ? margin : undefined, chainable);\n      };\n    });\n  });\n  jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (_i, type) {\n    jQuery.fn[type] = function (fn) {\n      return this.on(type, fn);\n    };\n  });\n  jQuery.fn.extend({\n    bind: function bind(types, data, fn) {\n      return this.on(types, null, data, fn);\n    },\n    unbind: function unbind(types, fn) {\n      return this.off(types, null, fn);\n    },\n    delegate: function delegate(selector, types, data, fn) {\n      return this.on(types, selector, data, fn);\n    },\n    undelegate: function undelegate(selector, types, fn) {\n      // ( namespace ) or ( selector, types [, fn] )\n      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);\n    },\n    hover: function hover(fnOver, fnOut) {\n      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n    }\n  });\n  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (_i, name) {\n    // Handle event binding\n    jQuery.fn[name] = function (data, fn) {\n      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n    };\n  });\n\n  // Support: Android <=4.0 only\n  // Make sure we trim BOM and NBSP\n  // Require that the "whitespace run" starts from a non-whitespace\n  // to avoid O(N^2) behavior when the engine would try matching "\\s+$" at each space position.\n  var rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n  // Bind a function to a context, optionally partially applying any\n  // arguments.\n  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n  // However, it is not slated for removal any time soon\n  jQuery.proxy = function (fn, context) {\n    var tmp, args, proxy;\n    if (typeof context === "string") {\n      tmp = fn[context];\n      context = fn;\n      fn = tmp;\n    }\n\n    // Quick check to determine if target is callable, in the spec\n    // this throws a TypeError, but we will just return undefined.\n    if (!isFunction(fn)) {\n      return undefined;\n    }\n\n    // Simulated bind\n    args = _slice.call(arguments, 2);\n    proxy = function proxy() {\n      return fn.apply(context || this, args.concat(_slice.call(arguments)));\n    };\n\n    // Set the guid of unique handler to the same of original handler, so it can be removed\n    proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n    return proxy;\n  };\n  jQuery.holdReady = function (hold) {\n    if (hold) {\n      jQuery.readyWait++;\n    } else {\n      jQuery.ready(true);\n    }\n  };\n  jQuery.isArray = Array.isArray;\n  jQuery.parseJSON = JSON.parse;\n  jQuery.nodeName = nodeName;\n  jQuery.isFunction = isFunction;\n  jQuery.isWindow = isWindow;\n  jQuery.camelCase = camelCase;\n  jQuery.type = toType;\n  jQuery.now = Date.now;\n  jQuery.isNumeric = function (obj) {\n    // As of jQuery 3.0, isNumeric is limited to\n    // strings and numbers (primitives or objects)\n    // that can be coerced to finite numbers (gh-2662)\n    var type = jQuery.type(obj);\n    return (type === "number" || type === "string") &&\n    // parseFloat NaNs numeric-cast false positives ("")\n    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n    // subtraction forces infinities to NaN\n    !isNaN(obj - parseFloat(obj));\n  };\n  jQuery.trim = function (text) {\n    return text == null ? "" : (text + "").replace(rtrim, "$1");\n  };\n\n  // Register as a named AMD module, since jQuery can be concatenated with other\n  // files that may use define, but not via a proper concatenation script that\n  // understands anonymous AMD modules. A named AMD is safest and most robust\n  // way to register. Lowercase jquery is used because AMD module names are\n  // derived from file names, and jQuery is normally delivered in a lowercase\n  // file name. Do this after creating the global so that if an AMD module wants\n  // to call noConflict to hide this version of jQuery, it will work.\n\n  // Note that for maximum portability, libraries that are not jQuery should\n  // declare themselves as anonymous modules, and avoid setting a global if an\n  // AMD loader is present. jQuery is a special case. For more information, see\n  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jQuery;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  var\n    // Map over jQuery in case of overwrite\n    _jQuery = window.jQuery,\n    // Map over the $ in case of overwrite\n    _$ = window.$;\n  jQuery.noConflict = function (deep) {\n    if (window.$ === jQuery) {\n      window.$ = _$;\n    }\n    if (deep && window.jQuery === jQuery) {\n      window.jQuery = _jQuery;\n    }\n    return jQuery;\n  };\n\n  // Expose jQuery and $ identifiers, even in AMD\n  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n  // and CommonJS for browser emulators (trac-13566)\n  if (typeof noGlobal === "undefined") {\n    window.jQuery = window.$ = jQuery;\n  }\n  return jQuery;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0VBQ0E7RUFDQTtFQUNBLElBQUssT0FBT2hELFFBQVEsS0FBSyxXQUFXLEVBQUc7SUFDdENELE1BQU0sQ0FBQ2lELE1BQU0sR0FBR2pELE1BQU0sQ0FBQzhyQyxDQUFDLEdBQUc3b0MsTUFBTTtFQUNsQztFQUtBLE9BQU9BLE1BQU07QUFDYixDQUFFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by1wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcz8xMTU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My43LjBcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjMtMDUtMTFUMTg6MjlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0IHRyYWMtMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyIHZlcnNpb24gPSBcIjMuNy4wXCIsXG5cblx0cmh0bWxTdWZmaXggPSAvSFRNTCQvaSxcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblxuXHQvLyBSZXRyaWV2ZSB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcblx0dGV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5vZGUsXG5cdFx0XHRyZXQgPSBcIlwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0XHRyZXQgKz0galF1ZXJ5LnRleHQoIG5vZGUgKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0XHR9XG5cblx0XHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdGlzWE1MRG9jOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGVcblx0XHQvLyBkb2N1bWVudCBmcmFnbWVudHMuXG5cdFx0cmV0dXJuICFyaHRtbFN1ZmZpeC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cblx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn1cbnZhciBwb3AgPSBhcnIucG9wO1xuXG5cbnZhciBzb3J0ID0gYXJyLnNvcnQ7XG5cblxudmFyIHNwbGljZSA9IGFyci5zcGxpY2U7XG5cblxudmFyIHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCI7XG5cblxudmFyIHJ0cmltQ1NTID0gbmV3IFJlZ0V4cChcblx0XCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIixcblx0XCJnXCJcbik7XG5cblxuXG5cbi8vIE5vdGU6IGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcbmpRdWVyeS5jb250YWlucyA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHR2YXIgYnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cblx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0Ly8gSUUgZG9lc24ndCBoYXZlIGBjb250YWluc2Agb24gU1ZHLlxuXHRcdGEuY29udGFpbnMgP1xuXHRcdFx0YS5jb250YWlucyggYnVwICkgOlxuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdCkgKTtcbn07XG5cblxuXG5cbi8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG4vLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcbnZhciByY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFx4ODAtXFx1RkZGRlxcdy1dL2c7XG5cbmZ1bmN0aW9uIGZjc3Nlc2NhcGUoIGNoLCBhc0NvZGVQb2ludCApIHtcblx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHR9XG5cblx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcbn1cblxualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblxuXG5cbnZhciBwcmVmZXJyZWREb2MgPSBkb2N1bWVudCxcblx0cHVzaE5hdGl2ZSA9IHB1c2g7XG5cbiggZnVuY3Rpb24oKSB7XG5cbnZhciBpLFxuXHRFeHByLFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblx0cHVzaCA9IHB1c2hOYXRpdmUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRkb2N1bWVudCxcblx0ZG9jdW1lbnRFbGVtZW50LFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRtYXRjaGVzLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvLFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfFwiICtcblx0XHRcImxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRybGVhZGluZ0NvbWJpbmF0b3IgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdElEOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0Q0xBU1M6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0VEFHOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0QVRUUjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0UFNFVURPOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRDSElMRDogbmV3IFJlZ0V4cChcblx0XHRcdFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRib29sOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdG5lZWRzQ29udGV4dDogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdGlmICggbm9uSGV4ICkge1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdHJldHVybiBub25IZXg7XG5cdFx0fVxuXG5cdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRyZXR1cm4gaGlnaCA8IDAgP1xuXHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzOyBzZWUgYHNldERvY3VtZW50YC5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUUvRWRnZS5cblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIG5vZGVOYW1lKCBlbGVtLCBcImZpZWxkc2V0XCIgKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0ge1xuXHRcdGFwcGx5OiBmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSxcblx0XHRjYWxsOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDEgKSApO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gZmluZCggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0ZmluZC5jb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cHVzaC5jYWxsKCByZXN1bHRzLCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoICFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmxlYWRpbmdDb21iaW5hdG9yLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuXG5cdFx0XHRcdFx0Ly8gc3RyaWN0LWNvbXBhcmluZyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBqUXVlcnkuZXNjYXBlU2VsZWN0b3IoIG5pZCApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzXG5cdFx0Ly8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9pc3N1ZXMvMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgalF1ZXJ5IHNlbGVjdG9yIG1vZHVsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSB8fCBub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApICkgJiZcblx0XHRcdGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMStcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBqUXVlcnkgc2VsZWN0b3IgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtub2RlXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5mdW5jdGlvbiBzZXREb2N1bWVudCggbm9kZSApIHtcblx0dmFyIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWpRdWVyeS5pc1hNTERvYyggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBpT1MgNyBvbmx5LCBJRSA5IC0gMTErXG5cdC8vIE9sZGVyIGJyb3dzZXJzIGRpZG4ndCBzdXBwb3J0IHVucHJlZml4ZWQgYG1hdGNoZXNgLlxuXHRtYXRjaGVzID0gZG9jdW1lbnRFbGVtZW50Lm1hdGNoZXMgfHxcblx0XHRkb2N1bWVudEVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jdW1lbnRFbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChzZWUgdHJhYy0xMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmlkID0galF1ZXJ5LmV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fFxuXHRcdFx0IWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBqUXVlcnkuZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZS5cblx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdHJldHVybiBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBJRS9FZGdlIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZVwiICk7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBDaHJvbWUgMTA1IC0gMTExIG9ubHksIFNhZmFyaSAxNS40IC0gMTYuMyBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0aGUgYDpoYXMoKWAgYXJndW1lbnQgaXMgcGFyc2VkIHVuZm9yZ2l2aW5nbHkuXG5cdC8vIFdlIGluY2x1ZGUgYCpgIGluIHRoZSB0ZXN0IHRvIGRldGVjdCBidWdneSBpbXBsZW1lbnRhdGlvbnMgdGhhdCBhcmVcblx0Ly8gX3NlbGVjdGl2ZWx5XyBmb3JnaXZpbmcgKHNwZWNpZmljYWxseSB3aGVuIHRoZSBsaXN0IGluY2x1ZGVzIGF0IGxlYXN0XG5cdC8vIG9uZSB2YWxpZCBzZWxlY3RvcikuXG5cdC8vIE5vdGUgdGhhdCB3ZSB0cmVhdCBjb21wbGV0ZSBsYWNrIG9mIHN1cHBvcnQgZm9yIGA6aGFzKClgIGFzIGlmIGl0IHdlcmVcblx0Ly8gc3BlYy1jb21wbGlhbnQgc3VwcG9ydCwgd2hpY2ggaXMgZmluZSBiZWNhdXNlIHVzZSBvZiBgOmhhcygpYCBpbiBzdWNoXG5cdC8vIGVudmlyb25tZW50cyB3aWxsIGZhaWwgaW4gdGhlIHFTQSBwYXRoIGFuZCBmYWxsIGJhY2sgdG8galF1ZXJ5IHRyYXZlcnNhbFxuXHQvLyBhbnl3YXkuXG5cdHN1cHBvcnQuY3NzSGFzID0gYXNzZXJ0KCBmdW5jdGlvbigpIHtcblx0XHR0cnkge1xuXHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvciggXCI6aGFzKCosOmpxZmFrZSlcIiApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyLklEID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmQuSUQgPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyLklEID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZC5JRCA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kLlRBRyA9IGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kLkNMQVNTID0gZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdC8vIEJ1aWxkIFFTQSByZWdleFxuXHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0dmFyIGlucHV0O1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9XG5cdFx0XHRcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIicgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIGRpc2FibGVkPSdkaXNhYmxlZCc+XCIgK1xuXHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogaU9TIDw9NyAtIDggb25seVxuXHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHkgaW4gc29tZSBYTUwgZG9jdW1lbnRzXG5cdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA8PTcgLSA4IG9ubHlcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IGlPUyA4IG9ubHlcblx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MTA1KywgRmlyZWZveCA8PTEwNCssIFNhZmFyaSA8PTE1LjQrXG5cdFx0Ly8gSW4gc29tZSBvZiB0aGUgZG9jdW1lbnQga2luZHMsIHRoZXNlIHNlbGVjdG9ycyB3b3VsZG4ndCB3b3JrIG5hdGl2ZWx5LlxuXHRcdC8vIFRoaXMgaXMgcHJvYmFibHkgT0sgYnV0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3ZSB3YW50IHRvIG1haW50YWluXG5cdFx0Ly8gaGFuZGxpbmcgdGhlbSB0aHJvdWdoIGpRdWVyeSB0cmF2ZXJzYWwgaW4galF1ZXJ5IDMueC5cblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMStcblx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0xMDUrLCBGaXJlZm94IDw9MTA0KywgU2FmYXJpIDw9MTUuNCtcblx0XHQvLyBJbiBzb21lIG9mIHRoZSBkb2N1bWVudCBraW5kcywgdGhlc2Ugc2VsZWN0b3JzIHdvdWxkbid0IHdvcmsgbmF0aXZlbHkuXG5cdFx0Ly8gVGhpcyBpcyBwcm9iYWJseSBPSyBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdlIHdhbnQgdG8gbWFpbnRhaW5cblx0XHQvLyBoYW5kbGluZyB0aGVtIHRocm91Z2ggalF1ZXJ5IHRyYXZlcnNhbCBpbiBqUXVlcnkgMy54LlxuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0fVxuXHR9ICk7XG5cblx0aWYgKCAhc3VwcG9ydC5jc3NIYXMgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgMTA1IC0gMTEwKywgU2FmYXJpIDE1LjQgLSAxNi4zK1xuXHRcdC8vIE91ciByZWd1bGFyIGB0cnktY2F0Y2hgIG1lY2hhbmlzbSBmYWlscyB0byBkZXRlY3QgbmF0aXZlbHktdW5zdXBwb3J0ZWRcblx0XHQvLyBwc2V1ZG8tY2xhc3NlcyBpbnNpZGUgYDpoYXMoKWAgKHN1Y2ggYXMgYDpoYXMoOmNvbnRhaW5zKFwiRm9vXCIpKWApXG5cdFx0Ly8gaW4gYnJvd3NlcnMgdGhhdCBwYXJzZSB0aGUgYDpoYXMoKWAgYXJndW1lbnQgYXMgYSBmb3JnaXZpbmcgc2VsZWN0b3IgbGlzdC5cblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLyNyZWxhdGlvbmFsIG5vdyByZXF1aXJlcyB0aGUgYXJndW1lbnRcblx0XHQvLyB0byBiZSBwYXJzZWQgdW5mb3JnaXZpbmdseSwgYnV0IGJyb3dzZXJzIGhhdmUgbm90IHlldCBmdWxseSBhZGp1c3RlZC5cblx0XHRyYnVnZ3lRU0EucHVzaCggXCI6aGFzXCIgKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGZpbmQuY29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0ZmluZC5jb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn1cblxuZmluZC5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gZmluZCggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cbmZpbmQubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmluZCggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cbmZpbmQuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5cbmZpbmQuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgdHJhYy0xMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdGlmICggdmFsICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xufTtcblxuZmluZC5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5qUXVlcnkudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHQvL1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wK1xuXHQvLyBUZXN0aW5nIGZvciBkZXRlY3RpbmcgZHVwbGljYXRlcyBpcyB1bnByZWRpY3RhYmxlIHNvIGluc3RlYWQgYXNzdW1lIHdlIGNhbid0XG5cdC8vIGRlcGVuZCBvbiBkdXBsaWNhdGUgZGV0ZWN0aW9uIGluIGFsbCBicm93c2VycyB3aXRob3V0IGEgc3RhYmxlIHNvcnQuXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LnNvcnRTdGFibGU7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgc2xpY2UuY2FsbCggcmVzdWx0cywgMCApO1xuXHRzb3J0LmNhbGwoIHJlc3VsdHMsIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0c3BsaWNlLmNhbGwoIHJlc3VsdHMsIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxualF1ZXJ5LmZuLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkudW5pcXVlU29ydCggc2xpY2UuYXBwbHkoIHRoaXMgKSApICk7XG59O1xuXG5FeHByID0galF1ZXJ5LmV4cHIgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0QVRUUjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCIgKVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdENISUxEOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdGZpbmQuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApXG5cdFx0XHRcdCk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdGZpbmQuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRQU0VVRE86IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHIuQ0hJTEQudGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFRBRzogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgZXhwZWN0ZWROb2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGVsZW0sIGV4cGVjdGVkTm9kZU5hbWUgKTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0Q0xBU1M6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgK1xuXHRcdFx0XHRcdFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0QVRUUjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IGZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIj1cIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ID09PSBjaGVjaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIiE9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAhPT0gY2hlY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCJePVwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcIio9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCIkPVwiICkge1xuXHRcdFx0XHRcdHJldHVybiBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2s7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBvcGVyYXRvciA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRcdHJldHVybiAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKVxuXHRcdFx0XHRcdFx0LmluZGV4T2YoIGNoZWNrICkgPiAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIG9wZXJhdG9yID09PSBcInw9XCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRDSElMRDogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGVOYW1lKCBub2RlLCBuYW1lICkgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBwYXJlbnRbIGV4cGFuZG8gXSB8fCAoIHBhcmVudFsgZXhwYW5kbyBdID0ge30gKTtcblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSBvdXRlckNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZU5hbWUoIG5vZGUsIG5hbWUgKSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRQU0VVRE86IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRmaW5kLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgalF1ZXJ5IGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mLmNhbGwoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0bm90OiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbUNTUywgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnRcblx0XHRcdFx0XHQvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2lzc3Vlcy8yOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdGhhczogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBmaW5kKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdGNvbnRhaW5zOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBqUXVlcnkudGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdGxhbmc6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRmaW5kLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdHRhcmdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0cm9vdDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0sXG5cblx0XHRmb2N1czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJlxuXHRcdFx0XHRkb2N1bWVudC5oYXNGb2N1cygpICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdGVuYWJsZWQ6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdGRpc2FibGVkOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0Y2hlY2tlZDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lKCBlbGVtLCBcIm9wdGlvblwiICkgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdHNlbGVjdGVkOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuXHRcdFx0Ly8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHRyZWF0IHRoZSBkZWZhdWx0IG9wdGlvbiBhc1xuXHRcdFx0Ly8gc2VsZWN0ZWQgd2hlbiBpbiBhbiBvcHRncm91cC5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRlbXB0eTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvcy5lbXB0eSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0aGVhZGVyOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0aW5wdXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRidXR0b246IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHxcblx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiYnV0dG9uXCIgKTtcblx0XHR9LFxuXG5cdFx0dGV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgJiYgZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwxMCBvbmx5XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXJcblx0XHRcdFx0Ly8gd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0Zmlyc3Q6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdGxhc3Q6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0ZXE6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdGV2ZW46IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRvZGQ6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRsdDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoIGFyZ3VtZW50IDwgMCApIHtcblx0XHRcdFx0aSA9IGFyZ3VtZW50ICsgbGVuZ3RoO1xuXHRcdFx0fSBlbHNlIGlmICggYXJndW1lbnQgPiBsZW5ndGggKSB7XG5cdFx0XHRcdGkgPSBsZW5ndGg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpID0gYXJndW1lbnQ7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRndDogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvcy5udGggPSBFeHByLnBzZXVkb3MuZXE7XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxuZnVuY3Rpb24gdG9rZW5pemUoIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJsZWFkaW5nQ29tYmluYXRvci5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdGlmICggcGFyc2VPbmx5ICkge1xuXHRcdHJldHVybiBzb0Zhci5sZW5ndGg7XG5cdH1cblxuXHRyZXR1cm4gc29GYXIgP1xuXHRcdGZpbmQuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufVxuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBub2RlTmFtZSggZWxlbSwgc2tpcCApICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGZpbmQoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sIG1hdGNoZXJPdXQsXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHxcblx0XHRcdFx0bXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcztcblxuXHRcdGlmICggbWF0Y2hlciApIHtcblxuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXJcblx0XHRcdC8vIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRtYXRjaGVyT3V0ID0gcG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdHJlc3VsdHM7XG5cblx0XHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlckluO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZi5jYWxsKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnRcblx0XHRcdC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvaXNzdWVzLzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltQ1NTLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmQuVEFHKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IGlPUyA8PTcgLSA5IG9ubHlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZ1xuXHRcdFx0Ly8gZWxlbWVudHMgYnkgaWQuIChzZWUgdHJhYy0xNDE0Milcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRwdXNoLmNhbGwoIHJlc3VsdHMsIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBqUXVlcnkncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIGpRdWVyeSBzZWxlY3RvciBjb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuZnVuY3Rpb24gc2VsZWN0KCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZC5JRChcblx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdGNvbnRleHRcblx0XHRcdCkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwci5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiZcblx0XHRcdFx0XHRcdHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgLSA0LjErXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIC0gNC4xK1xuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG5qUXVlcnkuZmluZCA9IGZpbmQ7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWUgPSBqUXVlcnkudW5pcXVlU29ydDtcblxuLy8gVGhlc2UgaGF2ZSBhbHdheXMgYmVlbiBwcml2YXRlLCBidXQgdGhleSB1c2VkIHRvIGJlIGRvY3VtZW50ZWRcbi8vIGFzIHBhcnQgb2YgU2l6emxlIHNvIGxldCdzIG1haW50YWluIHRoZW0gaW4gdGhlIDMueCBsaW5lXG4vLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcHVycG9zZXMuXG5maW5kLmNvbXBpbGUgPSBjb21waWxlO1xuZmluZC5zZWxlY3QgPSBzZWxlY3Q7XG5maW5kLnNldERvY3VtZW50ID0gc2V0RG9jdW1lbnQ7XG5cbmZpbmQuZXNjYXBlID0galF1ZXJ5LmVzY2FwZVNlbGVjdG9yO1xuZmluZC5nZXRUZXh0ID0galF1ZXJ5LnRleHQ7XG5maW5kLmlzWE1MID0galF1ZXJ5LmlzWE1MRG9jO1xuZmluZC5zZWxlY3RvcnMgPSBqUXVlcnkuZXhwcjtcbmZpbmQuc3VwcG9ydCA9IGpRdWVyeS5zdXBwb3J0O1xuZmluZC51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZVNvcnQ7XG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG59ICkoKTtcblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAodHJhYy05NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAodHJhYy0xMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8galF1ZXJ5I2ZpbmRcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5lcnJvciApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBlcnJvciwgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRFcnJvckhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yID0galF1ZXJ5LkRlZmVycmVkLmdldEVycm9ySG9vaygpO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVGhlIGRlcHJlY2F0ZWQgYWxpYXMgb2YgdGhlIGFib3ZlLiBXaGlsZSB0aGUgbmFtZSBzdWdnZXN0c1xuXHRcdFx0XHRcdFx0XHRcdC8vIHJldHVybmluZyB0aGUgc3RhY2ssIG5vdCBhbiBlcnJvciBpbnN0YW5jZSwgalF1ZXJ5IGp1c3QgcGFzc2VzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXQgZGlyZWN0bHkgdG8gYGNvbnNvbGUud2FybmAgc28gYm90aCB3aWxsIHdvcms7IGFuIGluc3RhbmNlXG5cdFx0XHRcdFx0XHRcdFx0Ly8ganVzdCBiZXR0ZXIgY29vcGVyYXRlcyB3aXRoIHNvdXJjZSBtYXBzLlxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLmVycm9yID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbi8vIElmIGBqUXVlcnkuRGVmZXJyZWQuZ2V0RXJyb3JIb29rYCBpcyBkZWZpbmVkLCBgYXN5bmNFcnJvcmAgaXMgYW4gZXJyb3Jcbi8vIGNhcHR1cmVkIGJlZm9yZSB0aGUgYXN5bmMgYmFycmllciB0byBnZXQgdGhlIG9yaWdpbmFsIGVycm9yIGNhdXNlXG4vLyB3aGljaCBtYXkgb3RoZXJ3aXNlIGJlIGhpZGRlbi5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBhc3luY0Vycm9yICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSxcblx0XHRcdGVycm9yLnN0YWNrLCBhc3luY0Vycm9yICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSB0cmFjLTY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAodHJhYy05NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgdHJhYy04MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAodHJhYy0xNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAodHJhYy0xMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKHRyYWMtMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKHRyYWMtMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICh0cmFjLTE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAodHJhYy0xMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKHRyYWMtMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICh0cmFjLTY5MTEsIHRyYWMtODE2NSwgdHJhYy0xMTM4MiwgdHJhYy0xMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICh0cmFjLTEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGlzU2V0dXAgKSB7XG5cblx0Ly8gTWlzc2luZyBgaXNTZXR1cGAgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFpc1NldHVwICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHRpZiAoICFzYXZlZCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZ1xuXHRcdFx0XHQvLyB0aGUgbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblx0XHRcdFx0XHRzYXZlZFsgMCBdLFxuXHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHQpICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudCBieSBhbGwgalF1ZXJ5IGhhbmRsZXJzIHdoaWxlIGFsbG93aW5nXG5cdFx0XHRcdC8vIG5hdGl2ZSBoYW5kbGVycyBvbiB0aGUgc2FtZSBlbGVtZW50IHRvIHJ1bi4gT24gdGFyZ2V0LCB0aGlzIGlzIGFjaGlldmVkXG5cdFx0XHRcdC8vIGJ5IHN0b3BwaW5nIGltbWVkaWF0ZSBwcm9wYWdhdGlvbiBqdXN0IG9uIHRoZSBqUXVlcnkgZXZlbnQuIEhvd2V2ZXIsXG5cdFx0XHRcdC8vIHRoZSBuYXRpdmUgZXZlbnQgaXMgcmUtd3JhcHBlZCBieSBhIGpRdWVyeSBvbmUgb24gZWFjaCBsZXZlbCBvZiB0aGVcblx0XHRcdFx0Ly8gcHJvcGFnYXRpb24gc28gdGhlIG9ubHkgd2F5IHRvIHN0b3AgaXQgZm9yIGpRdWVyeSBpcyB0byBzdG9wIGl0IGZvclxuXHRcdFx0XHQvLyBldmVyeW9uZSB2aWEgbmF0aXZlIGBzdG9wUHJvcGFnYXRpb24oKWAuIFRoaXMgaXMgbm90IGEgcHJvYmxlbSBmb3Jcblx0XHRcdFx0Ly8gZm9jdXMvYmx1ciB3aGljaCBkb24ndCBidWJibGUsIGJ1dCBpdCBkb2VzIGFsc28gc3RvcCBjbGljayBvbiBjaGVja2JveGVzXG5cdFx0XHRcdC8vIGFuZCByYWRpb3MuIFdlIGFjY2VwdCB0aGlzIGxpbWl0YXRpb24uXG5cdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAodHJhYy01MDQsIHRyYWMtMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cblx0ZnVuY3Rpb24gZm9jdXNNYXBwZWRIYW5kbGVyKCBuYXRpdmVFdmVudCApIHtcblx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgZm9jdXNpbi9mb2N1c291dCBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzXG5cdFx0XHQvLyBmb2N1cy9ibHVyLiBUaGlzIGlzIGJlY2F1c2UgdGhlIGZvcm1lciBhcmUgc3luY2hyb25vdXMgaW4gSUUgd2hpbGUgdGhlIGxhdHRlclxuXHRcdFx0Ly8gYXJlIGFzeW5jLiBJbiBvdGhlciBicm93c2VycywgYWxsIHRob3NlIGhhbmRsZXJzIGFyZSBpbnZva2VkIHN5bmNocm9ub3VzbHkuXG5cblx0XHRcdC8vIGBoYW5kbGVgIGZyb20gcHJpdmF0ZSBkYXRhIHdvdWxkIGFscmVhZHkgd3JhcCB0aGUgZXZlbnQsIGJ1dCB3ZSBuZWVkXG5cdFx0XHQvLyB0byBjaGFuZ2UgdGhlIGB0eXBlYCBoZXJlLlxuXHRcdFx0dmFyIGhhbmRsZSA9IGRhdGFQcml2LmdldCggdGhpcywgXCJoYW5kbGVcIiApLFxuXHRcdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cdFx0XHRldmVudC50eXBlID0gbmF0aXZlRXZlbnQudHlwZSA9PT0gXCJmb2N1c2luXCIgPyBcImZvY3VzXCIgOiBcImJsdXJcIjtcblx0XHRcdGV2ZW50LmlzU2ltdWxhdGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRmlyc3QsIGhhbmRsZSBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0XHRoYW5kbGUoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHRcdC8vIC4uLnRoZW4sIGhhbmRsZSBmb2N1cy9ibHVyXG5cdFx0XHQvL1xuXHRcdFx0Ly8gZm9jdXMvYmx1ciBkb24ndCBidWJibGUgd2hpbGUgZm9jdXNpbi9mb2N1c291dCBkbzsgc2ltdWxhdGUgdGhlIGZvcm1lciBieSBvbmx5XG5cdFx0XHQvLyBpbnZva2luZyB0aGUgaGFuZGxlciBhdCB0aGUgbG93ZXIgbGV2ZWwuXG5cdFx0XHRpZiAoIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCApIHtcblxuXHRcdFx0XHQvLyBUaGUgc2V0dXAgcGFydCBjYWxscyBgbGV2ZXJhZ2VOYXRpdmVgLCB3aGljaCwgaW4gdHVybiwgY2FsbHNcblx0XHRcdFx0Ly8gYGpRdWVyeS5ldmVudC5hZGRgLCBzbyBldmVudCBoYW5kbGUgd2lsbCBhbHJlYWR5IGhhdmUgYmVlbiBzZXRcblx0XHRcdFx0Ly8gYnkgdGhpcyBwb2ludC5cblx0XHRcdFx0aGFuZGxlKCBldmVudCApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBub24tSUUgYnJvd3NlcnMsIGF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnRcblx0XHRcdC8vIHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dC5cblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZGVsZWdhdGVUeXBlLCBuYXRpdmVFdmVudC50YXJnZXQsXG5cdFx0XHRcdGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICkgKTtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgYXR0YWNoZXM7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErXG5cdFx0XHRcdC8vIFdlIHVzZSB0aGUgc2FtZSBuYXRpdmUgaGFuZGxlciBmb3IgZm9jdXNpbiAmIGZvY3VzIChhbmQgZm9jdXNvdXQgJiBibHVyKVxuXHRcdFx0XHQvLyBzbyB3ZSBuZWVkIHRvIGNvb3JkaW5hdGUgc2V0dXAgJiB0ZWFyZG93biBwYXJ0cyBiZXR3ZWVuIHRob3NlIGV2ZW50cy5cblx0XHRcdFx0Ly8gVXNlIGBkZWxlZ2F0ZVR5cGVgIGFzIHRoZSBrZXkgYXMgYHR5cGVgIGlzIGFscmVhZHkgdXNlZCBieSBgbGV2ZXJhZ2VOYXRpdmVgLlxuXHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmdldCggdGhpcywgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIGRlbGVnYXRlVHlwZSwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhdHRhY2hlcztcblxuXHRcdFx0aWYgKCBkb2N1bWVudC5kb2N1bWVudE1vZGUgKSB7XG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCB0aGlzLCBkZWxlZ2F0ZVR5cGUgKSAtIDE7XG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggZGVsZWdhdGVUeXBlLCBmb2N1c01hcHBlZEhhbmRsZXIgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIHRoaXMsIGRlbGVnYXRlVHlwZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgZGVsZWdhdGVUeXBlLCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBpbmRpY2F0ZSBzdGFuZGFyZCB0ZWFyZG93biBzaG91bGQgYmUgYXBwbGllZFxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGVcblx0XHQvLyBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZXZlbnQudGFyZ2V0LCB0eXBlICk7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG5cdC8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcblx0Ly9cblx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG5cdC8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuXHQvLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcblx0Ly8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcblx0Ly9cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHQvLyBUbyBwcmVzZXJ2ZSByZWxhdGl2ZSBmb2N1c2luL2ZvY3VzICYgZm9jdXNvdXQvYmx1ciBldmVudCBvcmRlciBndWFyYW50ZWVkIG9uIHRoZSAzLnggYnJhbmNoLFxuXHQvLyBhdHRhY2ggYSBzaW5nbGUgaGFuZGxlciBmb3IgYm90aCBldmVudHMgaW4gSUUuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBkZWxlZ2F0ZVR5cGUgXSA9IHtcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0ZGF0YUhvbGRlciA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSA/IHRoaXMgOiBkb2MsXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExK1xuXHRcdFx0Ly8gV2UgdXNlIHRoZSBzYW1lIG5hdGl2ZSBoYW5kbGVyIGZvciBmb2N1c2luICYgZm9jdXMgKGFuZCBmb2N1c291dCAmIGJsdXIpXG5cdFx0XHQvLyBzbyB3ZSBuZWVkIHRvIGNvb3JkaW5hdGUgc2V0dXAgJiB0ZWFyZG93biBwYXJ0cyBiZXR3ZWVuIHRob3NlIGV2ZW50cy5cblx0XHRcdC8vIFVzZSBgZGVsZWdhdGVUeXBlYCBhcyB0aGUga2V5IGFzIGB0eXBlYCBpcyBhbHJlYWR5IHVzZWQgYnkgYGxldmVyYWdlTmF0aXZlYC5cblx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRkYXRhUHJpdi5zZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0fSxcblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0ZGF0YUhvbGRlciA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSA/IHRoaXMgOiBkb2MsXG5cdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuZ2V0KCBkYXRhSG9sZGVyLCBkZWxlZ2F0ZVR5cGUgKSAtIDE7XG5cblx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRpZiAoIGRvY3VtZW50LmRvY3VtZW50TW9kZSApIHtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIGRlbGVnYXRlVHlwZSwgZm9jdXNNYXBwZWRIYW5kbGVyICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGZvY3VzTWFwcGVkSGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGF0YUhvbGRlciwgZGVsZWdhdGVUeXBlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGRhdGFIb2xkZXIsIGRlbGVnYXRlVHlwZSwgYXR0YWNoZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhXFxbQ0RBVEFcXFt8XFxdXFxdPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICh0cmFjLTgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVud3JhcCBhIENEQVRBIHNlY3Rpb24gY29udGFpbmluZyBzY3JpcHQgY29udGVudHMuIFRoaXMgc2hvdWxkbid0IGJlXG5cdFx0XHRcdFx0XHRcdC8vIG5lZWRlZCBhcyBpbiBYTUwgZG9jdW1lbnRzIHRoZXkncmUgYWxyZWFkeSBub3QgdmlzaWJsZSB3aGVuXG5cdFx0XHRcdFx0XHRcdC8vIGluc3BlY3RpbmcgZWxlbWVudCBjb250ZW50cyBhbmQgaW4gSFRNTCBkb2N1bWVudHMgdGhleSBoYXZlIG5vXG5cdFx0XHRcdFx0XHRcdC8vIG1lYW5pbmcgYnV0IHdlJ3JlIHByZXNlcnZpbmcgdGhhdCBsb2dpYyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIGNvbXBsZXRlbHkgaW4gNC4wLiBTZWUgZ2gtNDkwNC5cblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBqUXVlcnkjZmluZCBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOlxuXHRcdFx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgcmN1c3RvbVByb3AgPSAvXi0tLztcblxuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAodHJhYy0xNTA5OCwgdHJhYy0xNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKHRyYWMtODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgdHJhYy0xMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoZ2gtMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdC8vIElFIG9ubHkgc3VwcG9ydHMgYFwiZmxvYXRcImAgaW4gYGdldFByb3BlcnR5VmFsdWVgOyBpbiBjb21wdXRlZCBzdHlsZXNcblx0XHQvLyBpdCdzIG9ubHkgYXZhaWxhYmxlIGFzIGBcImNzc0Zsb2F0XCJgLiBXZSBubyBsb25nZXIgbW9kaWZ5IHByb3BlcnRpZXNcblx0XHQvLyBzZW50IHRvIGAuY3NzKClgIGFwYXJ0IGZyb20gY2FtZWxDYXNpbmcsIHNvIHdlIG5lZWQgdG8gY2hlY2sgYm90aC5cblx0XHQvLyBOb3JtYWxseSwgdGhpcyB3b3VsZCBjcmVhdGUgZGlmZmVyZW5jZSBpbiBiZWhhdmlvcjogaWZcblx0XHQvLyBgZ2V0UHJvcGVydHlWYWx1ZWAgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcsIHRoZSB2YWx1ZSByZXR1cm5lZFxuXHRcdC8vIGJ5IGAuY3NzKClgIHdvdWxkIGJlIGB1bmRlZmluZWRgLiBUaGlzIGlzIHVzdWFsbHkgdGhlIGNhc2UgZm9yXG5cdFx0Ly8gZGlzY29ubmVjdGVkIGVsZW1lbnRzLiBIb3dldmVyLCBpbiBJRSBldmVuIGRpc2Nvbm5lY3RlZCBlbGVtZW50c1xuXHRcdC8vIHdpdGggbm8gc3R5bGVzIHJldHVybiBgXCJub25lXCJgIGZvciBgZ2V0UHJvcGVydHlWYWx1ZSggXCJmbG9hdFwiIClgXG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIGlzQ3VzdG9tUHJvcCAmJiByZXQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMTA1KywgQ2hyb21lIDw9MTA1K1xuXHRcdFx0Ly8gU3BlYyByZXF1aXJlcyB0cmltbWluZyB3aGl0ZXNwYWNlIGZvciBjdXN0b20gcHJvcGVydGllcyAoZ2gtNDkyNikuXG5cdFx0XHQvLyBGaXJlZm94IG9ubHkgdHJpbXMgbGVhZGluZyB3aGl0ZXNwYWNlLiBDaHJvbWUganVzdCBjb2xsYXBzZXNcblx0XHRcdC8vIGJvdGggbGVhZGluZyAmIHRyYWlsaW5nIHdoaXRlc3BhY2UgdG8gYSBzaW5nbGUgc3BhY2UuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gRmFsbCBiYWNrIHRvIGB1bmRlZmluZWRgIGlmIGVtcHR5IHN0cmluZyByZXR1cm5lZC5cblx0XHRcdC8vIFRoaXMgY29sbGFwc2VzIGEgbWlzc2luZyBkZWZpbml0aW9uIHdpdGggcHJvcGVydHkgZGVmaW5lZFxuXHRcdFx0Ly8gYW5kIHNldCB0byBhbiBlbXB0eSBzdHJpbmcgYnV0IHRoZXJlJ3Mgbm8gc3RhbmRhcmQgQVBJXG5cdFx0XHQvLyBhbGxvd2luZyB1cyB0byBkaWZmZXJlbnRpYXRlIHRoZW0gd2l0aG91dCBhIHBlcmZvcm1hbmNlIHBlbmFsdHlcblx0XHRcdC8vIGFuZCByZXR1cm5pbmcgYHVuZGVmaW5lZGAgYWxpZ25zIHdpdGggb2xkZXIgalF1ZXJ5LlxuXHRcdFx0Ly9cblx0XHRcdC8vIHJ0cmltQ1NTIHRyZWF0cyBVKzAwMEQgQ0FSUklBR0UgUkVUVVJOIGFuZCBVKzAwMEMgRk9STSBGRUVEXG5cdFx0XHQvLyBhcyB3aGl0ZXNwYWNlIHdoaWxlIENTUyBkb2VzIG5vdCwgYnV0IHRoaXMgaXMgbm90IGEgcHJvYmxlbVxuXHRcdFx0Ly8gYmVjYXVzZSBDU1MgcHJlcHJvY2Vzc2luZyByZXBsYWNlcyB0aGVtIHdpdGggVSswMDBBIExJTkUgRkVFRFxuXHRcdFx0Ly8gKHdoaWNoICppcyogQ1NTIHdoaXRlc3BhY2UpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpbnB1dC1wcmVwcm9jZXNzaW5nXG5cdFx0XHRyZXQgPSByZXQucmVwbGFjZSggcnRyaW1DU1MsIFwiJDFcIiApIHx8IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDAsXG5cdFx0bWFyZ2luRGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdC8vIENvdW50IG1hcmdpbiBkZWx0YSBzZXBhcmF0ZWx5IHRvIG9ubHkgYWRkIGl0IGFmdGVyIHNjcm9sbCBndXR0ZXIgYWRqdXN0bWVudC5cblx0XHQvLyBUaGlzIGlzIG5lZWRlZCB0byBtYWtlIG5lZ2F0aXZlIG1hcmdpbnMgd29yayB3aXRoIGBvdXRlckhlaWdodCggdHJ1ZSApYCAoZ2gtMzk4MikuXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRtYXJnaW5EZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGEgKyBtYXJnaW5EZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG5cdFx0YXNwZWN0UmF0aW86IHRydWUsXG5cdFx0Ym9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcblx0XHRjb2x1bW5Db3VudDogdHJ1ZSxcblx0XHRmbGV4R3JvdzogdHJ1ZSxcblx0XHRmbGV4U2hyaW5rOiB0cnVlLFxuXHRcdGZvbnRXZWlnaHQ6IHRydWUsXG5cdFx0Z3JpZEFyZWE6IHRydWUsXG5cdFx0Z3JpZENvbHVtbjogdHJ1ZSxcblx0XHRncmlkQ29sdW1uRW5kOiB0cnVlLFxuXHRcdGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcblx0XHRncmlkUm93OiB0cnVlLFxuXHRcdGdyaWRSb3dFbmQ6IHRydWUsXG5cdFx0Z3JpZFJvd1N0YXJ0OiB0cnVlLFxuXHRcdGxpbmVIZWlnaHQ6IHRydWUsXG5cdFx0b3BhY2l0eTogdHJ1ZSxcblx0XHRvcmRlcjogdHJ1ZSxcblx0XHRvcnBoYW5zOiB0cnVlLFxuXHRcdHNjYWxlOiB0cnVlLFxuXHRcdHdpZG93czogdHJ1ZSxcblx0XHR6SW5kZXg6IHRydWUsXG5cdFx0em9vbTogdHJ1ZSxcblxuXHRcdC8vIFNWRy1yZWxhdGVkXG5cdFx0ZmlsbE9wYWNpdHk6IHRydWUsXG5cdFx0Zmxvb2RPcGFjaXR5OiB0cnVlLFxuXHRcdHN0b3BPcGFjaXR5OiB0cnVlLFxuXHRcdHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG5cdFx0c3Ryb2tlT3BhY2l0eTogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAodHJhYy03MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgdHJhYy05MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKHRyYWMtNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICh0cmFjLTEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsICh0cmFjLTEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzTmFtZXMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGFzc05hbWUgKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY3VyLCBjdXJWYWx1ZSwgY2xhc3NOYW1lLCBpLCBmaW5hbFZhbHVlO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc05hbWVzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCB0aGlzICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gdGhpcy5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXNzTmFtZSArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhc3NOYW1lICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgY2xhc3NOYW1lcywgY2xhc3NOYW1lLCBpLCBzZWxmLFxuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0XHRjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpIF07XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAodHJhYy0xNDY4NiwgdHJhYy0xNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKHRyYWMtMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICh0cmFjLTk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICh0cmFjLTk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKHRyYWMtNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gdHJhYy03NjUzLCB0cmFjLTgxMjUsIHRyYWMtODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAodHJhYy0xMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyB0cmFjLTk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICh0cmFjLTEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0IHRyYWMtMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICh0cmFjLTE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gdHJhYy05NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICh0cmFjLTExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyB0cmFjLTE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSB0cmFjLTg2MDUsIHRyYWMtMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vIHRyYWMtMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG4vLyBSZXF1aXJlIHRoYXQgdGhlIFwid2hpdGVzcGFjZSBydW5cIiBzdGFydHMgZnJvbSBhIG5vbi13aGl0ZXNwYWNlXG4vLyB0byBhdm9pZCBPKE5eMikgYmVoYXZpb3Igd2hlbiB0aGUgZW5naW5lIHdvdWxkIHRyeSBtYXRjaGluZyBcIlxccyskXCIgYXQgZWFjaCBzcGFjZSBwb3NpdGlvbi5cbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfChbXlxcc1xcdUZFRkZcXHhBMF0pW1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAodHJhYy03MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAodHJhYy0xMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsIl90eXBlb2YiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNhbGwiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXRlbSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwiaSIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwidmVyc2lvbiIsInJodG1sU3VmZml4IiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJsZW5ndGgiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJpc0FycmF5TGlrZSIsInRleHRDb250ZW50Iiwibm9kZVZhbHVlIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJpc1hNTERvYyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY0VsZW0iLCJvd25lckRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwidGVzdCIsIm5vZGVOYW1lIiwic2Vjb25kIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzcGxpdCIsIl9pIiwidG9Mb3dlckNhc2UiLCJwb3AiLCJ3aGl0ZXNwYWNlIiwicnRyaW1DU1MiLCJSZWdFeHAiLCJjb250YWlucyIsImEiLCJiIiwiYnVwIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiZXNjYXBlU2VsZWN0b3IiLCJzZWwiLCJwcmVmZXJyZWREb2MiLCJwdXNoTmF0aXZlIiwiRXhwciIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYm9vbGVhbnMiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJsZWFkaW5nQ29tYmluYXRvciIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ1bmxvYWRIYW5kbGVyIiwic2V0RG9jdW1lbnQiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0Iiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiZXJyIiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJmaW5kIiwic2VlZCIsIm0iLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRva2VuaXplIiwidG9TZWxlY3RvciIsImpvaW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZWxlY3QiLCJrZXlzIiwiY2FjaGUiLCJrZXkiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsInN1YldpbmRvdyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjc3NIYXMiLCJxdWVyeVNlbGVjdG9yIiwiZmlsdGVyIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImNsYXNzTmFtZSIsImlucHV0IiwiaW5uZXJIVE1MIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImV4cHIiLCJlbGVtZW50cyIsIm1hdGNoZXNTZWxlY3RvciIsImF0dHIiLCJhdHRySGFuZGxlIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJleHBlY3RlZE5vZGVOYW1lIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0IiwiX2FyZ3VtZW50Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIl9jb250ZXh0IiwieG1sIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJkaWZmIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm5vdCIsIm1hdGNoZXIiLCJjb21waWxlIiwidW5tYXRjaGVkIiwiaGFzIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwibmV4dFNpYmxpbmciLCJoZWFkZXIiLCJidXR0b24iLCJfbWF0Y2hJbmRleGVzIiwibHQiLCJndCIsIm50aCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInRva2VucyIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwibXVsdGlwbGVDb250ZXh0cyIsImNvbnRleHRzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwibWF0Y2hlck91dCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJ0b2tlbiIsImNvbXBpbGVkIiwidW5pcXVlIiwiZ2V0VGV4dCIsImlzWE1MIiwic2VsZWN0b3JzIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2IiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiY3VyIiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInNpYmxpbmciLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsImNyZWF0ZU9wdGlvbnMiLCJvYmplY3QiLCJfIiwiZmxhZyIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwibGlzdCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJfY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsImhhbmRsZXIiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInJlamVjdFdpdGgiLCJnZXRFcnJvckhvb2siLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwicHJpbWFyeSIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsImFzeW5jRXJyb3IiLCJjb25zb2xlIiwid2FybiIsIm1lc3NhZ2UiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZ2V0RGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGFBdHRyIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJhdHRycyIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJ1bnNoaWZ0Iiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJ0bXAiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZGl2IiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwib3B0aW9uIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwib3B0Z3JvdXAiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJhdHRhY2hlZCIsIm5vZGVzIiwiY3JlYXRlVGV4dE5vZGUiLCJodG1sUHJlZmlsdGVyIiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJjcmVhdGUiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJjbGljayIsImxldmVyYWdlTmF0aXZlIiwidHJpZ2dlciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNTZXR1cCIsInNhdmVkIiwiaXNUcmlnZ2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImJsdXIiLCJmb2N1c01hcHBlZEhhbmRsZXIiLCJkb2N1bWVudE1vZGUiLCJzaW11bGF0ZSIsImF0dGFjaGVzIiwiZGF0YUhvbGRlciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwicmN1c3RvbVByb3AiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJ3aWR0aCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsQm94U3R5bGVzIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJpc0N1c3RvbVByb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsInZlbmRvclByb3BOYW1lIiwiY2FwTmFtZSIsImZpbmFsUHJvcE5hbWUiLCJmaW5hbCIsImNzc1Byb3BzIiwicmRpc3BsYXlzd2FwIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsIm1hcmdpbkRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJib3hTaXppbmdOZWVkZWQiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsImdldENsaWVudFJlY3RzIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlU2xpY2UiLCJjb2x1bW5Db3VudCIsImZsZXhHcm93IiwiZmxleFNocmluayIsImdyaWRBcmVhIiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3RhcnQiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTdGFydCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwib3JpZ05hbWUiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwiVHdlZW4iLCJlYXNpbmciLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwib3B0cyIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiYW5pbSIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4Iiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJhZGRDbGFzcyIsImNsYXNzTmFtZXMiLCJjdXJWYWx1ZSIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInRyaWdnZXJIYW5kbGVyIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwibW9kaWZpZWQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0IiwidGV4dFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInJ0cmltIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJ0cmltIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///563\n')},230:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n;// CONCATENATED MODULE: ./src/components/constants.js\n\n\n// Переменные\nvar listContainerEl = document.querySelector('.elements');\nvar temlateEl = document.querySelector('.template');\n// Открытие и закрытие модальных окон\nvar popupProfile = document.querySelector('.popup_type_profile');\nvar popupAddNewCards = document.querySelector('.popup_type_add_new-cards');\nvar profileInfoEditButton = document.querySelector('.profile__info-edit-button');\nvar profileAddCardsButton = document.querySelector('.profile__add-button');\nvar profileAddAvatarButton = document.querySelector('.profile__avatar-update-button');\nvar popupAvatar = document.querySelector('.popup_type_add__img-avatar');\n\n// Открытие попапа с картинкой\nvar popupCards = document.querySelector('.popup_type_zoom-card');\nvar popupCardsImage = popupCards.querySelector('.popup__container-img');\nvar popupCardsText = popupCards.querySelector('.popup__container-text');\n// Все кнопки закрытия модальных окон\nvar popups = document.querySelectorAll('.popup');\n// Редактирование имени и информации о себе\nvar formPopupProfile = document.forms['profile-form'];\nvar nameInput = document.querySelector('.profile__info-title');\nvar jobInput = document.querySelector('.profile__info-subtitle');\n// Находим поля формы в DOM\nvar popupProfileNameInput = document.querySelector('.popup__form-input-name');\nvar popupProfilejobInput = document.querySelector('.popup__form-input-job');\n//Форма добавления карточки\nvar formPopupNewCards = document.forms['card-form'];\nvar popupNewCardsNameInput = document.querySelector('.popup__form-input-img-name');\nvar popupNewCardsLinkInput = document.querySelector('.popup__form-input-link');\nvar popupFormBattonSave = formPopupNewCards.querySelector('.popup__form-button-save');\n//aватар\nvar formPopupAvatar = document.forms['avatar-form'];\nvar popupAvatarLinkInput = document.querySelector('.popup__form-input-link-avatar');\nvar popupImgAvatar = document.querySelector('.profile__image');\n// кнопки сохранении для ux\nvar popupFormBattonSaveProfile = document.querySelector('.popup__form-button-save-profile');\nvar popupFormBattonSavenewCards = document.querySelector('.popup__form-button-save-new-cards');\nvar popupFormBattonSaveAvatar = document.querySelector('.popup__form-button-save-avatar');\n;// CONCATENATED MODULE: ./src/components/utils.js\nfunction setStatusButton(_ref) {\n  var buttonEl = _ref.buttonEl,\n    text = _ref.text,\n    disabled = _ref.disabled;\n  if (disabled) {\n    buttonEl.disabled = true;\n  } else buttonEl.disabled = false;\n  buttonEl.textContent = text;\n}\n;// CONCATENATED MODULE: ./src/components/api.js\nconsole.log('test');\n\n\n// Объект конфигурации\nvar config = {\n  baseUrl: 'https://nomoreparties.co/v1/plus-cohort-25',\n  headers: {\n    'content-type': 'application/json',\n    authorization: '4795c652-4f69-4cb4-b309-abc01e676f2c'\n  }\n};\nfunction onResponse(res) {\n  return res.ok ? res.json() : res.json().then(function (data) {\n    return Promise.reject(data);\n  });\n}\n\n//_____________________________________________________________________\n\n//загрузка карточек с сервера\nfunction getAllCards() {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n//получение информации пользователя\nfunction getUserInfo() {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'GET',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n//редактирование профиля пользователя\nfunction editProfile(dataProfile) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(dataProfile)\n  }).then(onResponse);\n}\n\n//получение новой карточки\nfunction addNewCard(dataCard) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify(dataCard)\n  }).then(onResponse);\n}\n\n//удаление карточки\nfunction deleteCardFrom(card) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/\").concat(card), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n//постановка лайка\nfunction addLike(dataId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(dataId), {\n    method: 'PUT',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n//снятие лайка\nfunction removeLike(dataId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(dataId), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(onResponse);\n}\n\n//обновление аватара пользователя\nfunction changeAvatarImg(avatarData) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify(avatarData)\n  }).then(onResponse);\n}\n;// CONCATENATED MODULE: ./src/components/modal.js\n\n\n\n\n// функции открытия и закрытия модальных окон\n// функции закрытия\nfunction closePopup(popup) {\n  popup.classList.remove('popup_opened');\n  document.removeEventListener('keydown', closeByEscape);\n}\n\n// функции открытия\nfunction openPopup(popup) {\n  popup.classList.add('popup_opened');\n  document.addEventListener('keydown', closeByEscape);\n}\n\n// функция закрытия попапа нажатием на Esc\nfunction closeByEscape(evt) {\n  if (evt.key === 'Escape') {\n    var openedPopup = document.querySelector('.popup_opened');\n    closePopup(openedPopup);\n  }\n}\nfunction handleProfileFormSubmit(evt) {\n  evt.preventDefault();\n  setStatusButton({\n    buttonEl: popupFormBattonSaveProfile,\n    text: 'Сохраняем..'\n  });\n  return editProfile({\n    name: popupProfileNameInput.value,\n    about: popupProfilejobInput.value\n  }).then(function (dataProfile) {\n    nameInput.textContent = popupProfileNameInput.value;\n    jobInput.textContent = popupProfilejobInput.value;\n    closePopup(popupProfile);\n  }).catch(function (err) {\n    return console.log(err);\n  }).finally(function () {\n    setStatusButton({\n      buttonEl: popupFormBattonSaveProfile,\n      text: 'Сохранить'\n    });\n  });\n}\nfunction handleAvatarFormSubmit(evt) {\n  evt.preventDefault();\n  setStatusButton({\n    buttonEl: popupFormBattonSaveAvatar,\n    text: 'Сохраняем..'\n  });\n  popupFormBattonSave.textContent = 'Сохранение...';\n  return changeAvatarImg({\n    avatar: popupAvatarLinkInput.value\n  }).then(function (avatarData) {\n    popupImgAvatar.src = avatarData.avatar;\n    closePopup(popupAvatar);\n  }).catch(function (err) {\n    return console.log(err);\n  }).finally(function () {\n    setStatusButton({\n      buttonEl: popupFormBattonSaveAvatar,\n      text: 'Сохранить'\n    });\n  });\n}\nprofileAddAvatarButton.addEventListener('click', function () {\n  return openPopup(popupAvatar);\n});\nformPopupAvatar.addEventListener('submit', handleAvatarFormSubmit);\n// //\n// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js\nvar jquery = __webpack_require__(563);\n;// CONCATENATED MODULE: ./src/components/card.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n// массив карточек для предудущей проектной работы\n// const catOne = new URL('../images/element__img-cat-7.jpg', import.meta.url);\n// const catTwo = new URL('../images/element__img-cat-3.jpg', import.meta.url);\n// const catThree = new URL('../images/element__img-cat-1.jpg', import.meta.url);\n// const catFour = new URL('../images/element__img-cat-4.jpg', import.meta.url);\n// const catFive = new URL('../images/element__img-cat-5.jpg', import.meta.url);\n// const catSix = new URL('../images/element__img-cat-6.jpg', import.meta.url);\n// const initialCards = [\n//   { name: 'Ландыши', link: catOne },\n//   { name: 'Полевые цветы', link: catTwo },\n//   { name: 'Незабудки', link: catThree },\n//   { name: 'Розы', link: catFour },\n//   { name: 'Пионы', link: catFive },\n//   { name: 'Ромашки', link: catSix }\n// ];\n//функция рендеринга карточек\n\n// function renderCards(addCard) {\n//   // const newCards = initialCards.map(addCard);\n//   //  listContainerEl.append(...newCards)\n// }\n// renderCards(addCard);\n\nvar userId = null;\nPromise.all([getUserInfo(), getAllCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    user = _ref2[0],\n    initialCards = _ref2[1];\n  nameInput.textContent = user.name;\n  jobInput.textContent = user.about;\n  popupImgAvatar.src = user.avatar;\n  console.log(user);\n  userId = user._id;\n  var newCards = initialCards.map(addCard);\n  listContainerEl.append.apply(listContainerEl, _toConsumableArray(newCards));\n});\nfunction addCard(item) {\n  console.log(userId);\n  var newItem = temlateEl.content.cloneNode(true);\n  var captionEl = newItem.querySelector('.element__img-caption');\n  var imageEl = newItem.querySelector('.element__img');\n  captionEl.textContent = item.name;\n  imageEl.src = item.link;\n  imageEl.alt = item.name;\n\n  // удаление карточек\n  var likeButtonEl = newItem.querySelector('.element__like-button');\n  var deleteButtonEl = newItem.querySelector('.element__delete-button');\n  if (item.owner._id !== userId) {\n    deleteButtonEl.remove();\n  } else {\n    deleteButtonEl.addEventListener('click', deleteCard);\n    function deleteCard(evt) {\n      deleteCardFrom(item._id).then(function () {\n        var targetEl = evt.target;\n        var targetItem = targetEl.closest('.element');\n        targetItem.remove();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  // лайк карточек\n  var likeCount = newItem.querySelector('.element__like-counter');\n  likeCount.textContent = item.likes.length;\n  if (item.likes.find(function (like) {\n    return like.id == userId;\n  })) {\n    likeButtonEl.classList.add('element__like-button_activ');\n  }\n  likeButtonEl.addEventListener('click', function (evt) {\n    if (evt.target.classList.contains('element__like-button_activ')) {\n      removeLike(item._id).then(function (res) {\n        likeButtonEl.classList.remove('element__like-button_activ');\n        likeCount.textContent = res.likes.length;\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    } else {\n      addLike(item._id).then(function (res) {\n        likeButtonEl.classList.add('element__like-button_activ');\n        likeCount.textContent = res.likes.length;\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  });\n  function handleClickImage() {\n    popupCardsImage.src = item.link;\n    popupCardsText.textContent = item.name;\n    popupCardsImage.alt = item.name;\n    openPopup(popupCards);\n  }\n  imageEl.addEventListener('click', handleClickImage);\n  return newItem;\n}\n\n//функция добавление новой карточки через заполнение формы\nfunction handleFormAddNewCard(evt) {\n  setStatusButton({\n    buttonEl: popupFormBattonSavenewCards,\n    text: 'Сохраняем..',\n    disabled: true\n  });\n  evt.preventDefault();\n  return addNewCard({\n    name: popupNewCardsNameInput.value,\n    link: popupNewCardsLinkInput.value\n  }) //?\n  .then(function (dataCard) {\n    var newName = popupNewCardsNameInput.value;\n    var newLink = popupNewCardsLinkInput.value;\n    var newCard = addCard({\n      name: newName,\n      link: newLink\n    });\n    listContainerEl.prepend(newCard);\n    evt.target.reset();\n    popupFormBattonSave.setAttribute('disabled', true);\n    popupFormBattonSave.classList.add('button_inactive');\n    closePopup(popupAddNewCards);\n  }).catch(function (err) {\n    return console.log(err);\n  }).finally(function () {\n    setStatusButton({\n      buttonEl: popupFormBattonSavenewCards,\n      text: 'Добавить',\n      disabled: false\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/components/validate.js\n\n\n//Кнопки\nfunction hasInvalidInput(inputList) {\n  return inputList.some(function (inputElement) {\n    return !inputElement.validity.valid;\n  });\n}\n;\nfunction toggleButtonState(inputList, buttonElement, inactiveButtonClass) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.setAttribute('disabled', true);\n    buttonElement.classList.add(inactiveButtonClass);\n  } else {\n    buttonElement.removeAttribute('disabled');\n    buttonElement.classList.remove(inactiveButtonClass);\n  }\n}\n\n//Валидация\nvar showInputError = function showInputError(formElement, inputElement, errorMessage, inputErrorClass, errorClass) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.add(inputErrorClass);\n  errorElement.classList.add(errorClass);\n  errorElement.textContent = errorMessage;\n};\nvar hideInputError = function hideInputError(formElement, inputElement, inputErrorClass, errorClass) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.remove(inputErrorClass);\n  errorElement.classList.remove(errorClass);\n  errorElement.textContent = '';\n};\nvar checkInputValidity = function checkInputValidity(formElement, inputElement, inputErrorClass, errorClass) {\n  var isInputNotValid = !inputElement.validity.valid;\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n  if (isInputNotValid) {\n    var errorMessage = inputElement.validationMessage;\n    showInputError(formElement, inputElement, errorMessage, inputErrorClass, errorClass);\n  } else {\n    hideInputError(formElement, inputElement, inputErrorClass, errorClass);\n  }\n  ;\n};\nvar setEventListeners = function setEventListeners(formElement, inputSelector, submitButtonSelector, inactiveButtonClass, inputErrorClass, errorClass) {\n  formElement.addEventListener('submit', function (evt) {\n    evt.preventDefault();\n  });\n  var inputList = Array.from(formElement.querySelectorAll(inputSelector));\n  var buttonElement = formElement.querySelector(submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function (evt) {\n      checkInputValidity(formElement, inputElement, inputErrorClass, errorClass);\n      toggleButtonState(inputList, buttonElement, inactiveButtonClass);\n    });\n  });\n};\nvar enableValidation = function enableValidation(_ref) {\n  var formSelector = _ref.formSelector,\n    inputSelector = _ref.inputSelector,\n    submitButtonSelector = _ref.submitButtonSelector,\n    inactiveButtonClass = _ref.inactiveButtonClass,\n    inputErrorClass = _ref.inputErrorClass,\n    errorClass = _ref.errorClass;\n  var formElements = document.querySelectorAll(formSelector);\n  var formList = Array.from(formElements);\n  formList.forEach(function (formElement) {\n    setEventListeners(formElement, inputSelector, submitButtonSelector, inactiveButtonClass, inputErrorClass, errorClass);\n  });\n};\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\npopups.forEach(function (popup) {\n  popup.addEventListener('mousedown', function (evt) {\n    if (evt.target.classList.contains('popup_opened')) {\n      closePopup(popup);\n    }\n    if (evt.target.classList.contains('popup__close')) {\n      closePopup(popup);\n    }\n  });\n});\nformPopupNewCards.addEventListener('submit', handleFormAddNewCard);\nprofileAddCardsButton.addEventListener('click', function () {\n  return openPopup(popupAddNewCards);\n});\nformPopupProfile.addEventListener('submit', handleProfileFormSubmit);\nprofileInfoEditButton.addEventListener('click', function () {\n  popupProfileNameInput.value = nameInput.textContent;\n  popupProfilejobInput.value = jobInput.textContent;\n  openPopup(popupProfile);\n});\nenableValidation({\n  formSelector: '.popup__form',\n  inputSelector: '.popup__form-input',\n  submitButtonSelector: '.popup__form-button-save',\n  inactiveButtonClass: 'button_inactive',\n  inputErrorClass: 'form__input-error',\n  errorClass: 'form__input-error_active'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///230\n")}},__webpack_module_cache__={};function __webpack_require__(F){var Q=__webpack_module_cache__[F];if(void 0!==Q)return Q.exports;var U=__webpack_module_cache__[F]={id:F,loaded:!1,exports:{}};return __webpack_modules__[F].call(U.exports,U,U.exports,__webpack_require__),U.loaded=!0,U.exports}__webpack_require__.nmd=F=>(F.paths=[],F.children||(F.children=[]),F);var __webpack_exports__=__webpack_require__(230)})();